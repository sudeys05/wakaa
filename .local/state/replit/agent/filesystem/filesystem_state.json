{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Police Management System built as a full-stack web application. The system provides police departments with tools to manage cases, occurrence book (OB) entries, license plate records, and user administration. It features a React frontend with shadcn/ui components, an Express.js backend, and PostgreSQL database integration using Drizzle ORM.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nCode style: JavaScript/JSX only - all files use pure JavaScript syntax without TypeScript features\n\n# Migration Status (August 2025)\n\nThe project has been successfully migrated from Replit Agent to the standard Replit environment:\n- ✅ All TypeScript files converted to JavaScript (.ts → .js)\n- ✅ Dependencies installed and configured\n- ✅ Server running successfully on port 5000\n- ✅ Client-side React application functional\n- ✅ Database schema and storage layer operational\n\nNote: The package.json still references TypeScript files in the dev script, but the application runs correctly using the JavaScript files directly.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with JSX and Vite for fast development and building\n- **UI Library**: shadcn/ui components built on Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom CSS variables for theming and dark mode support\n- **State Management**: TanStack React Query for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Navigation**: Browser history-aware navigation with proper back button support for case management\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: JavaScript with ES modules for modern features\n- **Session Management**: Express-session with PostgreSQL storage for secure authentication\n- **API Design**: RESTful endpoints with middleware-based authentication and authorization\n- **Development**: Hot module replacement with Vite integration for rapid development\n\n## Enhanced Features (January 2025)\n- **Collapsible Sidebar**: Three-dot expandable navigation with user session persistence and hamburger menu icon when collapsed\n- **Role-Based Profile Management**: Admin-only access to officer management with full CRUD operations and black background filter styling\n- **Advanced Search & Filtering**: Multi-criteria search by departments, badge numbers, names, and specializations\n- **Case Navigation**: Browser-aware case management with proper back button functionality for seamless navigation\n- **Police-Specific Data Models**: Comprehensive officer profiles with department assignments and specializations\n- **Integrated Case Management**: New case creation with backend API integration and real-time dashboard updates\n- **Dashboard Navigation**: Clickable case statistics cards that link directly to the cases section\n- **Authentication Flow**: Logout functionality that redirects users to the login page automatically\n- **Case Editing**: Full case editing functionality with form validation and backend integration\n- **Refresh Functionality**: Manual refresh button for cases list with loading animation\n\n## Database Architecture\n- **Database**: PostgreSQL with Neon serverless integration\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema**: Structured tables for users, cases, occurrence book entries, license plates, and password reset tokens\n- **Authentication**: Session-based authentication with role-based access control (admin/user roles)\n\n## Security Features\n- **Authentication**: Session-based authentication with secure HTTP-only cookies and automatic logout redirection\n- **Authorization**: Role-based access control with admin and user permissions, including profile management restrictions\n- **Password Management**: Secure password reset functionality with time-limited tokens\n- **Input Validation**: Zod schema validation on both frontend and backend\n- **Admin Access Control**: Profile management section restricted to administrators only\n\n## Project Structure\n- **Monorepo Layout**: Client, server, and shared code in separate directories\n- **Shared Schema**: Common JavaScript modules and Zod schemas shared between frontend and backend\n- **Asset Management**: Centralized asset handling with proper path resolution\n- **Build Process**: Separate build processes for client (Vite) and server (esbuild)\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Drizzle Kit**: Database migration and schema management tools\n\n## UI and Styling\n- **Radix UI**: Accessible component primitives for complex UI components\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Fast build tool with hot module replacement for development\n- **ESBuild**: Fast JavaScript bundler for server-side code\n- **Node.js**: Pure JavaScript runtime without TypeScript compilation\n\n## Authentication and Session Management\n- **Express Session**: Server-side session management\n- **Connect PG Simple**: PostgreSQL session store for persistent sessions\n\n## Data Management\n- **TanStack React Query**: Server state management and caching\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Runtime type validation and schema parsing\n\n## Utilities\n- **date-fns**: Date manipulation and formatting library\n- **clsx**: Utility for constructing className strings conditionally\n- **nanoid**: Secure URL-friendly unique string ID generator","size_bytes":5667},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.js":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});","size_bytes":893},"scripts/setup-database.js":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { users, sessions } from '../shared/schema.ts';\nimport { eq } from 'drizzle-orm';\nimport ws from 'ws';\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nconst db = drizzle({ client: pool, schema: { users, sessions } });\n\nasync function setupDatabase() {\n  try {\n    console.log('Setting up database...');\n\n    // Check if admin user already exists\n    const existingAdmin = await db.select().from(users).where(eq(users.username, 'admin')).limit(1);\n\n    if (existingAdmin.length === 0) {\n      // Create default admin user\n      console.log('Creating default admin user...');\n      await db.insert(users).values({\n        username: 'admin',\n        email: 'admin@police.local',\n        password: 'admin123',\n        firstName: 'System',\n        lastName: 'Administrator',\n        badgeNumber: 'ADMIN001',\n        department: 'Administration',\n        position: 'System Administrator',\n        role: 'admin',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      });\n      console.log('✓ Default admin user created: admin / admin123');\n    } else {\n      console.log('✓ Admin user already exists');\n    }\n\n    // Verify session table exists (this is handled by Drizzle schema)\n    console.log('✓ Session table configured');\n\n    console.log('Database setup complete!');\n    console.log('\\nYou can now login with:');\n    console.log('Username: admin');\n    console.log('Password: admin123');\n\n  } catch (error) {\n    console.error('Database setup failed:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\nsetupDatabase();","size_bytes":1874},"server/db.js":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema.js\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":487},"server/index.js":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err, _req, res, _next) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":1813},"server/routes.js":{"content":"import { createServer } from \"http\";\nimport session from \"express-session\";\nimport { storage } from \"./storage.js\";\nimport { \n  loginSchema, \n  registerSchema, \n  forgotPasswordSchema, \n  resetPasswordSchema,\n  updateProfileSchema,\n  insertCaseSchema,\n  insertOBSchema,\n  insertLicensePlateSchema,\n  insertEvidenceSchema,\n  insertGeofileSchema,\n  insertReportSchema\n} from \"../shared/schema.js\";\nimport { randomBytes } from \"crypto\";\n\n// Authentication middleware\nexport const requireAuth = (req, res, next) => {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n};\n\n// Admin middleware\nexport const requireAdmin = (req, res, next) => {\n  if (!req.session.user || req.session.user.role !== 'admin') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app) {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'police-system-secret-key-2025',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Authentication routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(403).json({ message: \"Account is deactivated\" });\n      }\n\n      await storage.updateLastLogin(user.id);\n      req.session.userId = user.id;\n      req.session.user = user;\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/register', requireAuth, requireAdmin, async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(409).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(userData.email);\n      if (existingEmail) {\n        return res.status(409).json({ message: \"Email already exists\" });\n      }\n\n      // Create user (remove confirmPassword before saving)\n      const { confirmPassword, ...userToCreate } = userData;\n      const newUser = await storage.createUser(userToCreate);\n\n      const { password: _, ...userWithoutPassword } = newUser;\n      res.status(201).json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/forgot-password', async (req, res) => {\n    try {\n      const { username } = forgotPasswordSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        // Don't reveal if user exists or not\n        return res.json({ message: \"If the username exists, a reset token has been generated\" });\n      }\n\n      const token = randomBytes(32).toString('hex');\n      await storage.createPasswordResetToken(user.id, token);\n\n      // In production, send email here\n      // For development, return the token\n      res.json({ \n        message: \"Password reset token generated\",\n        token // Remove this in production\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/reset-password', async (req, res) => {\n    try {\n      const { token, password } = resetPasswordSchema.parse(req.body);\n      \n      const resetData = await storage.getPasswordResetToken(token);\n      if (!resetData) {\n        return res.status(400).json({ message: \"Invalid or expired token\" });\n      }\n\n      await storage.updateUserPassword(resetData.userId, password);\n      await storage.deletePasswordResetToken(token);\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/me', requireAuth, async (req, res) => {\n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    const { password: _, ...userWithoutPassword } = user;\n    res.json({ user: userWithoutPassword });\n  });\n\n  // Profile routes\n  app.put('/api/profile', requireAuth, async (req, res) => {\n    try {\n      const updates = updateProfileSchema.parse(req.body);\n      const updatedUser = await storage.updateUser(req.session.userId, updates);\n      \n      const { password: _, ...userWithoutPassword } = updatedUser;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  // User management routes (Admin only)\n  app.get('/api/users', requireAuth, requireAdmin, async (req, res) => {\n    const users = await storage.getAllUsers();\n    const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n    res.json({ users: usersWithoutPasswords });\n  });\n\n  app.delete('/api/users/:id', requireAuth, requireAdmin, async (req, res) => {\n    const userId = parseInt(req.params.id);\n    \n    if (userId === req.session.userId) {\n      return res.status(400).json({ message: \"Cannot delete your own account\" });\n    }\n\n    try {\n      await storage.deleteUser(userId);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"User not found\" });\n    }\n  });\n\n  app.post('/api/cases', requireAuth, async (req, res) => {\n    try {\n      const caseData = insertCaseSchema.parse(req.body);\n      const newCase = await storage.createCase({\n        ...caseData,\n        createdById: req.session.userId\n      });\n      res.status(201).json({ case: newCase });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.put('/api/cases/:id', requireAuth, async (req, res) => {\n    try {\n      const caseId = parseInt(req.params.id);\n      const updates = req.body;\n      const updatedCase = await storage.updateCase(caseId, updates);\n      res.json({ case: updatedCase });\n    } catch (error) {\n      res.status(404).json({ message: \"Case not found\" });\n    }\n  });\n\n  app.delete('/api/cases/:id', requireAuth, async (req, res) => {\n    try {\n      const caseId = parseInt(req.params.id);\n      await storage.deleteCase(caseId);\n      res.json({ message: \"Case deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"Case not found\" });\n    }\n  });\n\n  // OB Entry routes\n  app.get('/api/ob-entries', requireAuth, async (req, res) => {\n    const obEntries = await storage.getOBEntries();\n    res.json({ obEntries });\n  });\n\n  app.post('/api/ob-entries', requireAuth, async (req, res) => {\n    try {\n      const obData = insertOBSchema.parse(req.body);\n      const newOBEntry = await storage.createOBEntry({\n        ...obData,\n        recordingOfficerId: req.session.userId\n      });\n      res.status(201).json({ obEntry: newOBEntry });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.put('/api/ob-entries/:id', requireAuth, async (req, res) => {\n    try {\n      const obId = parseInt(req.params.id);\n      const updates = req.body;\n      const updatedOBEntry = await storage.updateOBEntry(obId, updates);\n      res.json({ obEntry: updatedOBEntry });\n    } catch (error) {\n      res.status(404).json({ message: \"OB Entry not found\" });\n    }\n  });\n\n  app.delete('/api/ob-entries/:id', requireAuth, async (req, res) => {\n    try {\n      const obId = parseInt(req.params.id);\n      await storage.deleteOBEntry(obId);\n      res.json({ message: \"OB Entry deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"OB Entry not found\" });\n    }\n  });\n\n  // License Plate routes\n  app.get('/api/license-plates', requireAuth, async (req, res) => {\n    const licensePlates = await storage.getLicensePlates();\n    res.json({ licensePlates });\n  });\n\n  app.get('/api/license-plates/search/:plateNumber', requireAuth, async (req, res) => {\n    const plateNumber = req.params.plateNumber;\n    const licensePlate = await storage.getLicensePlateByNumber(plateNumber);\n    \n    if (!licensePlate) {\n      return res.status(404).json({ message: \"License plate not found\" });\n    }\n\n    res.json({ licensePlate });\n  });\n\n  app.post('/api/license-plates', requireAuth, async (req, res) => {\n    try {\n      const plateData = insertLicensePlateSchema.parse(req.body);\n      const newPlate = await storage.createLicensePlate({\n        ...plateData,\n        addedById: req.session.userId\n      });\n      res.status(201).json({ licensePlate: newPlate });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.put('/api/license-plates/:id', requireAuth, async (req, res) => {\n    try {\n      const plateId = parseInt(req.params.id);\n      const updates = req.body;\n      const updatedPlate = await storage.updateLicensePlate(plateId, updates);\n      res.json({ licensePlate: updatedPlate });\n    } catch (error) {\n      res.status(404).json({ message: \"License plate not found\" });\n    }\n  });\n\n  app.delete('/api/license-plates/:id', requireAuth, async (req, res) => {\n    try {\n      const plateId = parseInt(req.params.id);\n      await storage.deleteLicensePlate(plateId);\n      res.json({ message: \"License plate deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"License plate not found\" });\n    }\n  });\n\n  // Officers management endpoints\n  app.get('/api/officers', requireAuth, requireAdmin, async (req, res) => {\n    try {\n      const officers = await storage.getAllUsers();\n      res.json(officers);\n    } catch (error) {\n      console.error('Error fetching officers:', error);\n      res.status(500).json({ message: 'Failed to fetch officers' });\n    }\n  });\n\n  app.post('/api/officers', requireAuth, requireAdmin, async (req, res) => {\n    try {\n      const officerData = req.body;\n      const newOfficer = await storage.createUser({\n        ...officerData,\n        username: officerData.badgeNumber || `officer_${Date.now()}`,\n        password: 'changeme123',\n        role: 'user',\n        isActive: true\n      });\n      res.status(201).json(newOfficer);\n    } catch (error) {\n      console.error('Error creating officer:', error);\n      res.status(500).json({ message: 'Failed to create officer' });\n    }\n  });\n\n  app.put('/api/officers/:id', requireAuth, requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const officerData = req.body;\n      const updatedOfficer = await storage.updateUser(parseInt(id), officerData);\n      res.json(updatedOfficer);\n    } catch (error) {\n      console.error('Error updating officer:', error);\n      res.status(500).json({ message: 'Failed to update officer' });\n    }\n  });\n\n  app.delete('/api/officers/:id', requireAuth, requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(parseInt(id));\n      res.json({ message: 'Officer deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting officer:', error);\n      res.status(500).json({ message: 'Failed to delete officer' });\n    }\n  });\n\n  // Cases endpoint using storage\n  app.get('/api/cases', requireAuth, async (req, res) => {\n    try {\n      const cases = await storage.getCases();\n      res.json({ cases });\n    } catch (error) {\n      console.error('Error fetching cases:', error);\n      res.status(500).json({ message: 'Failed to fetch cases' });\n    }\n  });\n\n  // Evidence routes\n  app.get('/api/evidence', requireAuth, async (req, res) => {\n    try {\n      const evidence = await storage.getEvidence();\n      res.json({ evidence });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch evidence' });\n    }\n  });\n\n  app.get('/api/evidence/:id', requireAuth, async (req, res) => {\n    try {\n      const evidenceItem = await storage.getEvidenceItem(parseInt(req.params.id));\n      if (!evidenceItem) {\n        return res.status(404).json({ message: 'Evidence not found' });\n      }\n      res.json(evidenceItem);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch evidence' });\n    }\n  });\n\n  app.post('/api/evidence', requireAuth, async (req, res) => {\n    try {\n      const evidenceData = insertEvidenceSchema.parse(req.body);\n      const newEvidence = await storage.createEvidence(evidenceData);\n      res.status(201).json(newEvidence);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid evidence data' });\n    }\n  });\n\n  app.put('/api/evidence/:id', requireAuth, async (req, res) => {\n    try {\n      const evidenceData = insertEvidenceSchema.parse(req.body);\n      const updatedEvidence = await storage.updateEvidence(parseInt(req.params.id), evidenceData);\n      res.json(updatedEvidence);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update evidence' });\n    }\n  });\n\n  app.delete('/api/evidence/:id', requireAuth, async (req, res) => {\n    try {\n      await storage.deleteEvidence(parseInt(req.params.id));\n      res.json({ message: 'Evidence deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete evidence' });\n    }\n  });\n\n  // Geofiles routes\n  app.get('/api/geofiles', requireAuth, async (req, res) => {\n    try {\n      const geofiles = await storage.getGeofiles();\n      res.json({ geofiles });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch geofiles' });\n    }\n  });\n\n  app.get('/api/geofiles/:id', requireAuth, async (req, res) => {\n    try {\n      const geofile = await storage.getGeofile(parseInt(req.params.id));\n      if (!geofile) {\n        return res.status(404).json({ message: 'Geofile not found' });\n      }\n      res.json(geofile);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch geofile' });\n    }\n  });\n\n  app.post('/api/geofiles', requireAuth, async (req, res) => {\n    try {\n      const geofileData = insertGeofileSchema.parse(req.body);\n      const newGeofile = await storage.createGeofile(geofileData);\n      res.status(201).json(newGeofile);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid geofile data' });\n    }\n  });\n\n  app.put('/api/geofiles/:id', requireAuth, async (req, res) => {\n    try {\n      const geofileData = insertGeofileSchema.parse(req.body);\n      const updatedGeofile = await storage.updateGeofile(parseInt(req.params.id), geofileData);\n      res.json(updatedGeofile);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update geofile' });\n    }\n  });\n\n  app.delete('/api/geofiles/:id', requireAuth, async (req, res) => {\n    try {\n      await storage.deleteGeofile(parseInt(req.params.id));\n      res.json({ message: 'Geofile deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete geofile' });\n    }\n  });\n\n  // Reports routes\n  app.get('/api/reports', requireAuth, async (req, res) => {\n    try {\n      const reports = await storage.getReports();\n      res.json({ reports });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch reports' });\n    }\n  });\n\n  app.get('/api/reports/:id', requireAuth, async (req, res) => {\n    try {\n      const report = await storage.getReport(parseInt(req.params.id));\n      if (!report) {\n        return res.status(404).json({ message: 'Report not found' });\n      }\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch report' });\n    }\n  });\n\n  app.post('/api/reports', requireAuth, async (req, res) => {\n    try {\n      const reportData = insertReportSchema.parse(req.body);\n      const newReport = await storage.createReport({\n        ...reportData,\n        requestedBy: req.session.userId\n      });\n      res.status(201).json(newReport);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid report data' });\n    }\n  });\n\n  app.put('/api/reports/:id', requireAuth, async (req, res) => {\n    try {\n      const reportData = insertReportSchema.parse(req.body);\n      const updatedReport = await storage.updateReport(parseInt(req.params.id), reportData);\n      res.json(updatedReport);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update report' });\n    }\n  });\n\n  app.delete('/api/reports/:id', requireAuth, async (req, res) => {\n    try {\n      await storage.deleteReport(parseInt(req.params.id));\n      res.json({ message: 'Report deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete report' });\n    }\n  });\n\n  const server = createServer(app);\n  return server;\n}","size_bytes":17423},"server/storage.js":{"content":"import { \n  users, \n  cases,\n  obEntries,\n  licensePlates,\n  evidence,\n  geofiles,\n  reports,\n  passwordResetTokens\n} from \"../shared/schema.js\";\n\nexport class MemStorage {\n  constructor() {\n    this.users = new Map();\n    this.cases = new Map();\n    this.obEntries = new Map();\n    this.licensePlates = new Map();\n    this.evidence = new Map();\n    this.geofiles = new Map();\n    this.reports = new Map();\n    this.resetTokens = new Map();\n    this.currentUserId = 1;\n    this.currentCaseId = 1;\n    this.currentOBId = 1;\n    this.currentPlateId = 1;\n    this.currentEvidenceId = 1;\n    this.currentGeofileId = 1;\n    this.currentReportId = 1;\n    \n    // Create default admin user\n    this.createDefaultAdmin();\n    \n    // Create default case data\n    this.createDefaultCases();\n  }\n\n  async createDefaultAdmin() {\n    const adminUser = {\n      id: this.currentUserId++,\n      username: 'admin',\n      email: 'admin@police.gov',\n      password: 'admin123', // In production, this should be hashed\n      firstName: 'System',\n      lastName: 'Administrator',\n      role: 'admin',\n      badgeNumber: 'ADMIN001',\n      department: 'IT',\n      position: 'System Administrator',\n      phone: '+1-555-0000',\n      profileImage: null,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastLoginAt: null,\n    };\n    this.users.set(adminUser.id, adminUser);\n  }\n\n  async createDefaultCases() {\n    // Create sample cases\n    const sampleCases = [\n      {\n        title: 'Burglary at Main Street Store',\n        description: 'Break-in occurred at electronics store on Main Street. Several items reported missing including laptops and phones.',\n        type: 'Burglary',\n        priority: 'High',\n        status: 'In Progress',\n        incidentDate: '2025-01-20T10:30:00Z',\n        location: 'Main Street Electronics Store, Downtown',\n        assignedOfficer: 'Officer Johnson',\n        createdById: 1\n      },\n      {\n        title: 'Traffic Accident Investigation',\n        description: 'Multi-vehicle accident at highway intersection. Minor injuries reported.',\n        type: 'Traffic',\n        priority: 'Medium',\n        status: 'Open',\n        incidentDate: '2025-01-21T15:45:00Z',\n        location: 'Highway 101 & Oak Avenue Intersection',\n        assignedOfficer: 'Officer Davis',\n        createdById: 1\n      },\n      {\n        title: 'Missing Person Report',\n        description: 'Adult male reported missing by family. Last seen at work on Friday evening.',\n        type: 'Other',\n        priority: 'Critical',\n        status: 'Open',\n        incidentDate: '2025-01-19T18:00:00Z',\n        location: 'Last seen at Downtown Office Building',\n        assignedOfficer: 'Detective Smith',\n        createdById: 1\n      }\n    ];\n\n    for (const caseData of sampleCases) {\n      const id = this.currentCaseId++;\n      const caseNumber = `CASE-${new Date().getFullYear()}-${id.toString().padStart(3, '0')}`;\n      const newCase = {\n        ...caseData,\n        id,\n        caseNumber,\n        assignedOfficerId: null,\n        createdAt: new Date('2025-01-20T11:00:00Z'),\n        updatedAt: new Date('2025-01-21T09:15:00Z'),\n      };\n      this.cases.set(id, newCase);\n    }\n  }\n\n  // User operations\n  async getUser(id) {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username) {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email) {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser) {\n    const id = this.currentUserId++;\n    const user = { \n      ...insertUser, \n      id,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastLoginAt: null,\n      profileImage: null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id, updates) {\n    const user = this.users.get(id);\n    if (!user) throw new Error('User not found');\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id) {\n    this.users.delete(id);\n  }\n\n  async updateLastLogin(id) {\n    const user = this.users.get(id);\n    if (user) {\n      user.lastLoginAt = new Date();\n      this.users.set(id, user);\n    }\n  }\n\n  async getAllUsers() {\n    return Array.from(this.users.values());\n  }\n\n  // Password reset operations\n  async createPasswordResetToken(userId, token) {\n    this.resetTokens.set(token, { \n      userId, \n      expiresAt: new Date(Date.now() + 3600000) // 1 hour\n    });\n  }\n\n  async getPasswordResetToken(token) {\n    const tokenData = this.resetTokens.get(token);\n    if (!tokenData || tokenData.expiresAt < new Date()) {\n      this.resetTokens.delete(token);\n      return undefined;\n    }\n    return tokenData;\n  }\n\n  async deletePasswordResetToken(token) {\n    this.resetTokens.delete(token);\n  }\n\n  async updateUserPassword(id, password) {\n    const user = this.users.get(id);\n    if (user) {\n      user.password = password;\n      user.updatedAt = new Date();\n      this.users.set(id, user);\n    }\n  }\n\n  // Case operations\n  async getCases() {\n    return Array.from(this.cases.values());\n  }\n\n  async getCase(id) {\n    return this.cases.get(id);\n  }\n\n  async createCase(caseData) {\n    const id = this.currentCaseId++;\n    const caseNumber = `CASE-${new Date().getFullYear()}-${id.toString().padStart(3, '0')}`;\n    const newCase = {\n      ...caseData,\n      id,\n      caseNumber,\n      assignedOfficerId: caseData.assignedOfficerId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.cases.set(id, newCase);\n    return newCase;\n  }\n\n  async updateCase(id, updates) {\n    const existingCase = this.cases.get(id);\n    if (!existingCase) throw new Error('Case not found');\n    \n    const updatedCase = { ...existingCase, ...updates, updatedAt: new Date() };\n    this.cases.set(id, updatedCase);\n    return updatedCase;\n  }\n\n  async deleteCase(id) {\n    this.cases.delete(id);\n  }\n\n  // OB Entry operations\n  async getOBEntries() {\n    return Array.from(this.obEntries.values());\n  }\n\n  async getOBEntry(id) {\n    return this.obEntries.get(id);\n  }\n\n  async createOBEntry(obData) {\n    const id = this.currentOBId++;\n    const obNumber = `OB/${new Date().getFullYear()}/${id.toString().padStart(4, '0')}`;\n    const newEntry = {\n      ...obData,\n      id,\n      obNumber,\n      dateTime: new Date(),\n      status: 'recorded',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.obEntries.set(id, newEntry);\n    return newEntry;\n  }\n\n  async updateOBEntry(id, updates) {\n    const existingEntry = this.obEntries.get(id);\n    if (!existingEntry) throw new Error('OB Entry not found');\n    \n    const updatedEntry = { ...existingEntry, ...updates, updatedAt: new Date() };\n    this.obEntries.set(id, updatedEntry);\n    return updatedEntry;\n  }\n\n  async deleteOBEntry(id) {\n    this.obEntries.delete(id);\n  }\n\n  // License Plate operations\n  async getLicensePlates() {\n    return Array.from(this.licensePlates.values());\n  }\n\n  async getLicensePlate(id) {\n    return this.licensePlates.get(id);\n  }\n\n  async getLicensePlateByNumber(plateNumber) {\n    return Array.from(this.licensePlates.values()).find(\n      (plate) => plate.plateNumber === plateNumber\n    );\n  }\n\n  async createLicensePlate(plateData) {\n    const id = this.currentPlateId++;\n    const newPlate = {\n      ...plateData,\n      id,\n      ownerImage: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.licensePlates.set(id, newPlate);\n    return newPlate;\n  }\n\n  async updateLicensePlate(id, updates) {\n    const existingPlate = this.licensePlates.get(id);\n    if (!existingPlate) throw new Error('License plate not found');\n    \n    const updatedPlate = { ...existingPlate, ...updates, updatedAt: new Date() };\n    this.licensePlates.set(id, updatedPlate);\n    return updatedPlate;\n  }\n\n  async deleteLicensePlate(id) {\n    this.licensePlates.delete(id);\n  }\n\n  // Evidence methods\n  async getEvidence() {\n    return Array.from(this.evidence.values());\n  }\n\n  async getEvidenceItem(id) {\n    return this.evidence.get(id);\n  }\n\n  async getEvidenceByNumber(evidenceNumber) {\n    return Array.from(this.evidence.values()).find(\n      (evidence) => evidence.evidenceNumber === evidenceNumber\n    );\n  }\n\n  async createEvidence(evidenceData) {\n    const id = this.currentEvidenceId++;\n    const evidenceNumber = `EV-${new Date().getFullYear()}-${String(id).padStart(4, '0')}`;\n    const newEvidence = {\n      ...evidenceData,\n      id,\n      evidenceNumber,\n      collectedBy: 1, // Default to admin user\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.evidence.set(id, newEvidence);\n    return newEvidence;\n  }\n\n  async updateEvidence(id, updates) {\n    const existingEvidence = this.evidence.get(id);\n    if (!existingEvidence) throw new Error('Evidence not found');\n    \n    const updatedEvidence = { ...existingEvidence, ...updates, updatedAt: new Date() };\n    this.evidence.set(id, updatedEvidence);\n    return updatedEvidence;\n  }\n\n  async deleteEvidence(id) {\n    this.evidence.delete(id);\n  }\n\n  // Geofiles methods\n  async getGeofiles() {\n    return Array.from(this.geofiles.values());\n  }\n\n  async getGeofile(id) {\n    return this.geofiles.get(id);\n  }\n\n  async createGeofile(geofileData) {\n    const id = this.currentGeofileId++;\n    const newGeofile = {\n      ...geofileData,\n      id,\n      uploadedBy: 1, // Default to admin user\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.geofiles.set(id, newGeofile);\n    return newGeofile;\n  }\n\n  async updateGeofile(id, updates) {\n    const existingGeofile = this.geofiles.get(id);\n    if (!existingGeofile) throw new Error('Geofile not found');\n    \n    const updatedGeofile = { ...existingGeofile, ...updates, updatedAt: new Date() };\n    this.geofiles.set(id, updatedGeofile);\n    return updatedGeofile;\n  }\n\n  async deleteGeofile(id) {\n    this.geofiles.delete(id);\n  }\n\n  // Reports methods\n  async getReports() {\n    return Array.from(this.reports.values());\n  }\n\n  async getReport(id) {\n    return this.reports.get(id);\n  }\n\n  async getReportByNumber(reportNumber) {\n    return Array.from(this.reports.values()).find(\n      (report) => report.reportNumber === reportNumber\n    );\n  }\n\n  async createReport(reportData) {\n    const id = this.currentReportId++;\n    const reportNumber = `RPT-${new Date().getFullYear()}-${String(id).padStart(4, '0')}`;\n    const newReport = {\n      ...reportData,\n      id,\n      reportNumber,\n      requestedBy: 1, // Default to admin user\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.reports.set(id, newReport);\n    return newReport;\n  }\n\n  async updateReport(id, updates) {\n    const existingReport = this.reports.get(id);\n    if (!existingReport) throw new Error('Report not found');\n    \n    const updatedReport = { ...existingReport, ...updates, updatedAt: new Date() };\n    this.reports.set(id, updatedReport);\n    return updatedReport;\n  }\n\n  async deleteReport(id) {\n    this.reports.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":11225},"server/vite.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport viteConfig from \"../vite.config.js\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app, server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.jsx\"`,\n        `src=\"/src/main.jsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2159},"shared/schema.js":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"admin\" or \"user\"\n  badgeNumber: text(\"badge_number\"),\n  department: text(\"department\"),\n  position: text(\"position\"),\n  phone: text(\"phone\"),\n  profileImage: text(\"profile_image\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  lastLoginAt: timestamp(\"last_login_at\"),\n});\n\n// Cases table\nexport const cases = pgTable(\"cases\", {\n  id: serial(\"id\").primaryKey(),\n  caseNumber: text(\"case_number\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"open\"), // \"open\", \"in_progress\", \"closed\"\n  priority: text(\"priority\").notNull().default(\"medium\"), // \"low\", \"medium\", \"high\"\n  assignedOfficerId: integer(\"assigned_officer_id\").references(() => users.id),\n  createdById: integer(\"created_by_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Occurrence Book entries\nexport const obEntries = pgTable(\"ob_entries\", {\n  id: serial(\"id\").primaryKey(),\n  obNumber: text(\"ob_number\").notNull().unique(),\n  dateTime: timestamp(\"date_time\").notNull(),\n  type: text(\"type\").notNull(),\n  description: text(\"description\").notNull(),\n  reportedBy: text(\"reported_by\").notNull(),\n  recordingOfficerId: integer(\"recording_officer_id\").references(() => users.id),\n  location: text(\"location\"),\n  status: text(\"status\").notNull().default(\"recorded\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// License plates\nexport const licensePlates = pgTable(\"license_plates\", {\n  id: serial(\"id\").primaryKey(),\n  plateNumber: text(\"plate_number\").notNull().unique(),\n  ownerName: text(\"owner_name\").notNull(),\n  fatherName: text(\"father_name\"),\n  motherName: text(\"mother_name\"),\n  idNumber: text(\"id_number\"),\n  passportNumber: text(\"passport_number\"),\n  ownerImage: text(\"owner_image\"),\n  addedById: integer(\"added_by_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Password reset tokens\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Evidence log\nexport const evidence = pgTable(\"evidence\", {\n  id: serial(\"id\").primaryKey(),\n  evidenceNumber: text(\"evidence_number\").notNull().unique(),\n  caseId: integer(\"case_id\").references(() => cases.id),\n  obId: integer(\"ob_id\").references(() => obEntries.id),\n  type: text(\"type\").notNull(), // \"physical\", \"digital\", \"document\", \"photo\", \"video\"\n  description: text(\"description\").notNull(),\n  location: text(\"location\").notNull(),\n  chain_of_custody: text(\"chain_of_custody\"),\n  status: text(\"status\").notNull().default(\"collected\"), // \"collected\", \"analyzed\", \"stored\", \"disposed\"\n  collectedBy: integer(\"collected_by\").references(() => users.id),\n  collectedAt: timestamp(\"collected_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Geofiles\nexport const geofiles = pgTable(\"geofiles\", {\n  id: serial(\"id\").primaryKey(),\n  caseId: integer(\"case_id\").references(() => cases.id),\n  obId: integer(\"ob_id\").references(() => obEntries.id),\n  evidenceId: integer(\"evidence_id\").references(() => evidence.id),\n  filename: text(\"filename\").notNull(),\n  filepath: text(\"filepath\").notNull(),\n  fileType: text(\"file_type\").notNull(), // \"kml\", \"gpx\", \"shp\", \"geojson\"\n  coordinates: text(\"coordinates\"), // JSON string of coordinates\n  address: text(\"address\"),\n  description: text(\"description\"),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Reports\nexport const reports = pgTable(\"reports\", {\n  id: serial(\"id\").primaryKey(),\n  reportNumber: text(\"report_number\").notNull().unique(),\n  type: text(\"type\").notNull(), // \"warranty\", \"incident\", \"evidence\", \"case_summary\"\n  caseId: integer(\"case_id\").references(() => cases.id),\n  obId: integer(\"ob_id\").references(() => obEntries.id),\n  evidenceId: integer(\"evidence_id\").references(() => evidence.id),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  requestedBy: integer(\"requested_by\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"approved\", \"completed\", \"rejected\"\n  priority: text(\"priority\").notNull().default(\"medium\"), // \"low\", \"medium\", \"high\", \"urgent\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  role: true,\n  badgeNumber: true,\n  department: true,\n  position: true,\n  phone: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const registerSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  badgeNumber: true,\n  department: true,\n  position: true,\n  phone: true,\n}).extend({\n  confirmPassword: z.string().min(1, \"Confirm password is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const forgotPasswordSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n});\n\nexport const resetPasswordSchema = z.object({\n  token: z.string().min(1, \"Token is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Confirm password is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const updateProfileSchema = createInsertSchema(users).pick({\n  firstName: true,\n  lastName: true,\n  email: true,\n  badgeNumber: true,\n  department: true,\n  position: true,\n  phone: true,\n}).partial();\n\nexport const insertCaseSchema = createInsertSchema(cases).pick({\n  title: true,\n  description: true,\n  status: true,\n  priority: true,\n});\n\nexport const insertOBSchema = createInsertSchema(obEntries).pick({\n  type: true,\n  description: true,\n  reportedBy: true,\n  location: true,\n});\n\nexport const insertLicensePlateSchema = createInsertSchema(licensePlates).pick({\n  plateNumber: true,\n  ownerName: true,\n  fatherName: true,\n  motherName: true,\n  idNumber: true,\n  passportNumber: true,\n});\n\nexport const insertEvidenceSchema = createInsertSchema(evidence).pick({\n  type: true,\n  description: true,\n  location: true,\n  chain_of_custody: true,\n  status: true,\n  collectedAt: true,\n});\n\nexport const insertGeofileSchema = createInsertSchema(geofiles).pick({\n  filename: true,\n  filepath: true,\n  fileType: true,\n  coordinates: true,\n  address: true,\n  description: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).pick({\n  type: true,\n  title: true,\n  content: true,\n  status: true,\n  priority: true,\n});","size_bytes":7999},"client/src/App.css":{"content":"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  background-color: #1a1f2e;\n  color: #ffffff;\n}\n\n.app {\n  display: flex;\n  min-height: 100vh;\n}\n\n.main-content {\n  flex: 1;\n  background-color: #1a1f2e;\n  overflow-y: auto;\n}\n\n/* Loading Screen Styles */\n.loading-screen {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  background: linear-gradient(145deg, #1a1a1a, #2a2a2a);\n  color: #ffffff;\n}\n\n.loading-content {\n  text-align: center;\n  padding: 40px;\n  border-radius: 16px;\n  background: linear-gradient(145deg, #2a2a2a, #1a1a1a);\n  border: 1px solid #333;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 3px solid #333;\n  border-top: 3px solid #4CAF50;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto 20px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.loading-content h2 {\n  margin: 0 0 8px 0;\n  color: #ffffff;\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.loading-content p {\n  margin: 0;\n  color: #ccc;\n  font-size: 16px;\n}\n\n/* Login Screen Styles */\n.login-screen {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  background: linear-gradient(145deg, #1a1a1a, #2a2a2a);\n  color: #ffffff;\n  padding: 20px;\n}\n\n.login-content {\n  text-align: center;\n  max-width: 500px;\n  width: 100%;\n}\n\n.login-header {\n  margin-bottom: 40px;\n}\n\n.login-logo {\n  margin-bottom: 30px;\n}\n\n.logo-badge {\n  font-size: 64px;\n  margin-bottom: 20px;\n  text-shadow: 0 0 20px rgba(76, 175, 80, 0.3);\n}\n\n.login-logo h1 {\n  margin: 0 0 8px 0;\n  font-size: 32px;\n  font-weight: 700;\n  color: #ffffff;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.login-logo p {\n  margin: 0;\n  color: #4CAF50;\n  font-size: 18px;\n  font-weight: 500;\n}\n\n.login-form {\n  background: linear-gradient(145deg, #2a2a2a, #1a1a1a);\n  border-radius: 16px;\n  border: 1px solid #333;\n  padding: 40px;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);\n}\n\n.login-btn {\n  width: 100%;\n  padding: 16px 24px;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 18px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  margin-bottom: 20px;\n}\n\n.login-btn:hover {\n  background: linear-gradient(135deg, #45a049, #3d8b40);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);\n}\n\n.login-help {\n  margin: 20px 0;\n  color: #ccc;\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n.default-credentials {\n  background-color: rgba(76, 175, 80, 0.1);\n  border: 1px solid rgba(76, 175, 80, 0.3);\n  border-radius: 8px;\n  padding: 16px;\n  margin: 20px 0 0 0;\n  color: #e0e0e0;\n  font-size: 14px;\n}\n\n.default-credentials strong {\n  color: #4CAF50;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .login-content {\n    max-width: 400px;\n  }\n\n  .login-logo h1 {\n    font-size: 28px;\n  }\n\n  .logo-badge {\n    font-size: 48px;\n  }\n\n  .login-form {\n    padding: 30px;\n  }\n\n  .login-btn {\n    font-size: 16px;\n    padding: 14px 20px;\n  }\n}\n\n@media (max-width: 480px) {\n  .login-screen {\n    padding: 10px;\n  }\n\n  .login-content {\n    max-width: none;\n  }\n\n  .login-logo h1 {\n    font-size: 24px;\n  }\n\n  .logo-badge {\n    font-size: 40px;\n  }\n\n  .login-form {\n    padding: 20px;\n  }\n\n  .loading-content {\n    padding: 30px;\n  }\n\n  .loading-content h2 {\n    font-size: 20px;\n  }\n}","size_bytes":3534},"client/src/App.jsx":{"content":"import React, { useState } from 'react';\nimport { AuthProvider, useAuth } from './context/AuthContext';\nimport CollapsibleSidebar from './components/Sidebar/CollapsibleSidebar';\nimport EnhancedProfile from './components/Profile/EnhancedProfile';\nimport CasesManager from './components/Cases/CasesManager';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport Cases from './components/Cases/Cases';\nimport OccurrenceBook from './components/OccurrenceBook/OccurrenceBook';\nimport LicensePlates from './components/LicensePlates/LicensePlates';\nimport Evidence from './components/Evidence/Evidence';\nimport Geofiles from './components/Geofiles/Geofiles';\nimport Reports from './components/Reports/Reports';\nimport Profile from './components/Profile/Profile';\nimport UserManagement from './components/UserManagement/UserManagement';\nimport AddCaseModal from './components/AddCaseModal/AddCaseModal';\nimport AddOBModal from './components/AddOBModal/AddOBModal';\nimport LicensePlateModal from './components/LicensePlateModal/LicensePlateModal';\nimport LoginModal from './components/Auth/LoginModal';\nimport RegisterModal from './components/Auth/RegisterModal';\nimport ForgotPasswordModal from './components/Auth/ForgotPasswordModal';\nimport './App.css';\n\nconst AuthenticatedApp = () => {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [activeSection, setActiveSection] = useState('dashboard');\n  const [isAddCaseModalOpen, setIsAddCaseModalOpen] = useState(false);\n  const [isAddOBModalOpen, setIsAddOBModalOpen] = useState(false);\n  const [isLicensePlateModalOpen, setIsLicensePlateModalOpen] = useState(false);\n  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);\n  const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false);\n  const [isForgotPasswordModalOpen, setIsForgotPasswordModalOpen] = useState(false);\n  const [cases, setCases] = useState([]);\n\n  const [licensePlates, setLicensePlates] = useState([\n    {\n      id: 'LP-1',\n      plateNumber: 'ABC123',\n      ownerName: 'John Smith',\n      fatherName: 'Robert Smith',\n      motherName: 'Mary Smith',\n      idNumber: 'ID123456789',\n      passportNumber: 'P987654321',\n      ownerImage: null,\n      dateAdded: '2025-01-15'\n    }\n  ]);\n\n  const [obEntries, setOBEntries] = useState([\n    {\n      id: 'OB-2024-001',\n      obNumber: 'OB/2024/0001',\n      dateTime: '2025-01-15 14:30',\n      type: 'Incident',\n      description: 'Traffic accident at Main Street intersection',\n      reportedBy: 'John Doe',\n      recordingOfficer: 'Officer Smith',\n      location: 'Main Street & 5th Ave',\n      status: 'Under Investigation'\n    }\n  ]);\n\n  const handleAddCase = (newCase) => {\n    setCases(prev => [newCase, ...prev]);\n  };\n\n  const handleUpdateCase = (updatedCase) => {\n    setCases(prev => prev.map(c => c.id === updatedCase.id ? { ...updatedCase, lastUpdate: new Date().toISOString().split('T')[0] } : c));\n  };\n\n  const handleDeleteCase = (caseId) => {\n    setCases(prev => prev.filter(c => c.id !== caseId));\n  };\n\n  const handleAddOB = (newOBEntry) => {\n    setOBEntries(prev => [newOBEntry, ...prev]);\n  };\n\n  const handleUpdateOB = (updatedOB) => {\n    setOBEntries(prev => prev.map(ob => ob.id === updatedOB.id ? updatedOB : ob));\n  };\n\n  const handleDeleteOB = (obId) => {\n    setOBEntries(prev => prev.filter(ob => ob.id !== obId));\n  };\n\n  const handleAddPlate = (newPlate) => {\n    setLicensePlates(prev => [newPlate, ...prev]);\n  };\n\n  const handleAddCaseClick = () => {\n    setIsAddCaseModalOpen(true);\n  };\n\n  const handleAddOBClick = () => {\n    setIsAddOBModalOpen(true);\n  };\n\n  const handleLicensePlateClick = () => {\n    setIsLicensePlateModalOpen(true);\n  };\n\n  // Authentication modal handlers\n  const handleSwitchToRegister = () => {\n    setIsLoginModalOpen(false);\n    setIsRegisterModalOpen(true);\n  };\n\n  const handleSwitchToLogin = () => {\n    setIsRegisterModalOpen(false);\n    setIsForgotPasswordModalOpen(false);\n    setIsLoginModalOpen(true);\n  };\n\n  const handleSwitchToForgotPassword = () => {\n    setIsLoginModalOpen(false);\n    setIsForgotPasswordModalOpen(true);\n  };\n\n  const handleRegisterClick = () => {\n    setIsRegisterModalOpen(true);\n  };\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case 'dashboard':\n        return <Dashboard onAddCaseClick={handleAddCaseClick} onLicensePlateClick={handleLicensePlateClick} cases={cases} setActiveSection={setActiveSection} />;\n      case 'cases':\n        return <CasesManager />;\n      case 'occurrence-book':\n        return <OccurrenceBook onAddOBClick={handleAddOBClick} obEntries={obEntries} onUpdateOB={handleUpdateOB} onDeleteOB={handleDeleteOB} />;\n      case 'license-plates':\n        return <LicensePlates />;\n      case 'evidence':\n        return <Evidence />;\n      case 'geofiles':\n        return <Geofiles />;\n      case 'reports':\n        return <Reports />;\n      case 'profile':\n        return <EnhancedProfile />;\n      case 'admin':\n        return user?.role === 'admin' ? <UserManagement onRegisterClick={handleRegisterClick} /> : (\n          <div style={{ padding: '30px', color: '#ffffff' }}>\n            <h1>Access Denied</h1>\n            <p>You don't have permission to access this section.</p>\n          </div>\n        );\n      case 'message':\n      case 'media':\n      case 'updates':\n      case 'entry':\n        return (\n          <div style={{ padding: '30px', color: '#ffffff' }}>\n            <h1 style={{ textTransform: 'capitalize' }}>{activeSection}</h1>\n            <p>This section is coming soon...</p>\n          </div>\n        );\n      default:\n        return <Dashboard onAddCaseClick={handleAddCaseClick} onLicensePlateClick={handleLicensePlateClick} cases={cases} setActiveSection={setActiveSection} />;\n    }\n  };\n\n  // Show loading screen\n  if (isLoading) {\n    return (\n      <div className=\"loading-screen\">\n        <div className=\"loading-content\">\n          <div className=\"loading-spinner\"></div>\n          <h2>Loading Police System...</h2>\n          <p>Authenticating user session</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show login screen if not authenticated\n  if (!isAuthenticated) {\n    return (\n      <div className=\"login-screen\">\n        <div className=\"login-content\">\n          <div className=\"login-header\">\n            <div className=\"login-logo\">\n              <div className=\"logo-badge\">🛡️</div>\n              <h1>Police Management System</h1>\n              <p>Secure Access Portal</p>\n            </div>\n          </div>\n          \n          <div className=\"login-form\">\n            <button \n              className=\"login-btn\" \n              onClick={() => setIsLoginModalOpen(true)}\n            >\n              Sign In to Continue\n            </button>\n            <p className=\"login-help\">\n              Use your assigned username and password to access the system.\n            </p>\n            <p className=\"default-credentials\">\n              <strong>Default Admin:</strong> admin / admin123\n            </p>\n          </div>\n        </div>\n\n        <LoginModal\n          isOpen={isLoginModalOpen}\n          onClose={() => setIsLoginModalOpen(false)}\n          onSwitchToRegister={handleSwitchToRegister}\n          onSwitchToForgotPassword={handleSwitchToForgotPassword}\n        />\n\n        <ForgotPasswordModal\n          isOpen={isForgotPasswordModalOpen}\n          onClose={() => setIsForgotPasswordModalOpen(false)}\n          onSwitchToLogin={handleSwitchToLogin}\n        />\n      </div>\n    );\n  }\n\n  // Main authenticated app\n  return (\n    <div className=\"app\">\n      <CollapsibleSidebar activeSection={activeSection} setActiveSection={setActiveSection} />\n      <div className=\"main-content\">\n        {renderContent()}\n      </div>\n      \n      <AddCaseModal \n        isOpen={isAddCaseModalOpen}\n        onClose={() => setIsAddCaseModalOpen(false)}\n        onAddCase={handleAddCase}\n      />\n      <AddOBModal \n        isOpen={isAddOBModalOpen}\n        onClose={() => setIsAddOBModalOpen(false)}\n        onAddOB={handleAddOB}\n      />\n      <LicensePlateModal \n        isOpen={isLicensePlateModalOpen}\n        onClose={() => setIsLicensePlateModalOpen(false)}\n        onAddPlate={handleAddPlate}\n        onSearchPlate={() => {}}\n        plates={licensePlates}\n      />\n\n      {user?.role === 'admin' && (\n        <RegisterModal\n          isOpen={isRegisterModalOpen}\n          onClose={() => setIsRegisterModalOpen(false)}\n          onSwitchToLogin={handleSwitchToLogin}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <AuthenticatedApp />\n    </AuthProvider>\n  );\n}\n\nexport default App;","size_bytes":8625},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","size_bytes":59},"client/src/main.jsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.jsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);","size_bytes":232},"client/src/context/AuthContext.jsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check authentication status on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('/api/auth/me');\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n        setIsAuthenticated(true);\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (username, password) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return { success: true };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n      return { success: false, message: 'Login failed. Please try again.' };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', { method: 'POST' });\n    } catch (error) {\n      console.error('Logout failed:', error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n      // Redirect to login page after logout\n      window.location.href = '/';\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return { success: false, message: 'Registration failed. Please try again.' };\n    }\n  };\n\n  const forgotPassword = async (username) => {\n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, message: data.message, token: data.token };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('Forgot password failed:', error);\n      return { success: false, message: 'Request failed. Please try again.' };\n    }\n  };\n\n  const resetPassword = async (token, password, confirmPassword) => {\n    try {\n      const response = await fetch('/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token, password, confirmPassword }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return { success: true, message: data.message };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('Reset password failed:', error);\n      return { success: false, message: 'Reset failed. Please try again.' };\n    }\n  };\n\n  const updateProfile = async (profileData) => {\n    try {\n      const response = await fetch('/api/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(profileData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setUser(data.user);\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      console.error('Profile update failed:', error);\n      return { success: false, message: 'Update failed. Please try again.' };\n    }\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    register,\n    forgotPassword,\n    resetPassword,\n    updateProfile,\n    checkAuthStatus,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":5058},"client/src/components/AddCaseModal/AddCaseModal.css":{"content":".modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  padding: 20px;\n}\n\n.modal-content {\n  background-color: #2c3e50;\n  background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n  border-radius: 12px;\n  width: 100%;\n  max-width: 600px;\n  max-height: 90vh;\n  overflow-y: auto;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n  position: relative;\n  transition: all 0.3s ease;\n}\n\n.modal-content.maximized {\n  max-width: 95vw;\n  max-height: 95vh;\n  width: 95vw;\n  height: 95vh;\n}\n\n.modal-content.minimized {\n  max-width: 400px;\n  max-height: 300px;\n  width: 400px;\n  height: 300px;\n  overflow: hidden;\n}\n\n.modal-content.minimized .case-form {\n  display: none;\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 24px 24px 0 24px;\n  border-bottom: 1px solid #34495e;\n  border-bottom: 2px solid #3498db;\n  margin-bottom: 24px;\n  background: linear-gradient(135deg, #34495e 0%, #3498db 100%);\n  margin: 0;\n  padding: 20px 24px;\n  border-radius: 12px 12px 0 0;\n}\n\n.modal-header h2 {\n  font-size: 24px;\n  font-weight: 600;\n  color: #ffffff;\n  margin: 0;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.modal-header h2::before {\n  content: \"📁\";\n  font-size: 28px;\n}\n\n.modal-controls {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.minimize-btn,\n.maximize-btn {\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  color: #ffffff;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.minimize-btn:hover,\n.maximize-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: scale(1.1);\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  color: #7f8c8d;\n  color: #ffffff;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n  background: rgba(231, 76, 60, 0.8);\n}\n\n.close-btn:hover {\n  background: rgba(231, 76, 60, 1);\n  color: #ffffff;\n  transform: scale(1.1);\n}\n\n.case-form {\n  padding: 24px;\n  background: rgba(52, 73, 94, 0.3);\n  margin: 0;\n  backdrop-filter: blur(10px);\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  font-size: 14px;\n  font-weight: 500;\n  color: #bdc3c7;\n  margin-bottom: 8px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  padding: 12px 16px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 14px;\n  transition: border-color 0.2s ease;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3498db;\n}\n\n.form-group input::placeholder,\n.form-group textarea::placeholder {\n  color: #7f8c8d;\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: #e74c3c;\n}\n\n.error-message {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #e74c3c;\n  font-size: 12px;\n  margin-top: 6px;\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 100px;\n}\n\n.form-actions {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 32px;\n  padding-top: 24px;\n  border-top: 1px solid #34495e;\n}\n\n.cancel-btn {\n  padding: 12px 24px;\n  background-color: #34495e;\n  color: #bdc3c7;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover {\n  background-color: #4a5f7a;\n  color: #ffffff;\n}\n\n.submit-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 24px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.submit-btn:hover {\n  background-color: #2980b9;\n}\n\n@media (max-width: 768px) {\n  .modal-content {\n    margin: 10px;\n    max-width: none;\n  }\n  \n  .form-row {\n    grid-template-columns: 1fr;\n    gap: 0;\n  }\n  \n  .form-actions {\n    flex-direction: column;\n  }\n  \n  .cancel-btn,\n  .submit-btn {\n    width: 100%;\n  }\n}","size_bytes":4339},"client/src/components/AddCaseModal/AddCaseModal.jsx":{"content":"import React, { useState } from 'react';\nimport { X, Save, AlertCircle, Minimize2, Maximize2, Square } from 'lucide-react';\nimport './AddCaseModal.css';\n\nconst AddCaseModal = ({ isOpen, onClose, onAddCase }) => {\n  const [isMaximized, setIsMaximized] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [formData, setFormData] = useState({\n    title: '',\n    officer: '',\n    priority: 'Medium',\n    status: 'Open',\n    description: '',\n    location: '',\n    reportedBy: ''\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.title.trim()) {\n      newErrors.title = 'Case title is required';\n    }\n    \n    if (!formData.officer.trim()) {\n      newErrors.officer = 'Officer name is required';\n    }\n    \n    if (!formData.description.trim()) {\n      newErrors.description = 'Description is required';\n    }\n    \n    if (!formData.location.trim()) {\n      newErrors.location = 'Location is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      setIsSubmitting(true);\n      setErrors({});\n      \n      try {\n        const response = await fetch('/api/cases', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: formData.title,\n            description: formData.description,\n            priority: formData.priority.toLowerCase(),\n            status: formData.status.toLowerCase()\n          })\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          onAddCase(result.case);\n          setFormData({\n            title: '',\n            officer: '',\n            priority: 'Medium',\n            status: 'Open',\n            description: '',\n            location: '',\n            reportedBy: ''\n          });\n          onClose();\n        } else {\n          const errorData = await response.json();\n          setErrors({ submit: errorData.message || 'Failed to create case' });\n        }\n      } catch (error) {\n        console.error('Error creating case:', error);\n        setErrors({ submit: 'Failed to create case. Please try again.' });\n      } finally {\n        setIsSubmitting(false);\n      }\n    }\n  };\n\n  const handleClose = () => {\n    setFormData({\n      title: '',\n      officer: '',\n      priority: 'Medium',\n      status: 'Open',\n      description: '',\n      location: '',\n      reportedBy: ''\n    });\n    setErrors({});\n    onClose();\n  };\n\n  const handleMaximize = () => {\n    setIsMaximized(!isMaximized);\n    setIsMinimized(false);\n  };\n\n  const handleMinimize = () => {\n    setIsMinimized(!isMinimized);\n    setIsMaximized(false);\n  };\n\n  if (!isOpen) return null;\n\n  const modalClass = `modal-content ${isMaximized ? 'maximized' : ''} ${isMinimized ? 'minimized' : ''}`;\n\n  return (\n    <div className=\"modal-overlay\" onClick={handleClose}>\n      <div className={modalClass} onClick={(e) => e.stopPropagation()}>\n        <div className=\"modal-header\">\n          <h2>Add New Case</h2>\n          <div className=\"modal-controls\">\n            <button className=\"minimize-btn\" onClick={handleMinimize}>\n              <Minimize2 size={16} />\n            </button>\n            <button className=\"maximize-btn\" onClick={handleMaximize}>\n              {isMaximized ? <Square size={16} /> : <Maximize2 size={16} />}\n            </button>\n            <button className=\"close-btn\" onClick={handleClose}>\n              <X size={20} />\n            </button>\n          </div>\n        </div>\n        \n        {!isMinimized && (\n          <form onSubmit={handleSubmit} className=\"case-form\">\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Case Title *</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleInputChange}\n                placeholder=\"Enter case title\"\n                className={errors.title ? 'error' : ''}\n              />\n              {errors.title && (\n                <span className=\"error-message\">\n                  <AlertCircle size={14} />\n                  {errors.title}\n                </span>\n              )}\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"officer\">Assigned Officer *</label>\n              <input\n                type=\"text\"\n                id=\"officer\"\n                name=\"officer\"\n                value={formData.officer}\n                onChange={handleInputChange}\n                placeholder=\"Enter officer name\"\n                className={errors.officer ? 'error' : ''}\n              />\n              {errors.officer && (\n                <span className=\"error-message\">\n                  <AlertCircle size={14} />\n                  {errors.officer}\n                </span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"priority\">Priority</label>\n              <select\n                id=\"priority\"\n                name=\"priority\"\n                value={formData.priority}\n                onChange={handleInputChange}\n              >\n                <option value=\"Low\">Low</option>\n                <option value=\"Medium\">Medium</option>\n                <option value=\"High\">High</option>\n              </select>\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status</label>\n              <select\n                id=\"status\"\n                name=\"status\"\n                value={formData.status}\n                onChange={handleInputChange}\n              >\n                <option value=\"Open\">Open</option>\n                <option value=\"In Progress\">In Progress</option>\n                <option value=\"Closed\">Closed</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"location\">Location *</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              name=\"location\"\n              value={formData.location}\n              onChange={handleInputChange}\n              placeholder=\"Enter incident location\"\n              className={errors.location ? 'error' : ''}\n            />\n            {errors.location && (\n              <span className=\"error-message\">\n                <AlertCircle size={14} />\n                {errors.location}\n              </span>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"reportedBy\">Reported By</label>\n            <input\n              type=\"text\"\n              id=\"reportedBy\"\n              name=\"reportedBy\"\n              value={formData.reportedBy}\n              onChange={handleInputChange}\n              placeholder=\"Enter reporter name (optional)\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description *</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              placeholder=\"Enter case description\"\n              rows=\"4\"\n              className={errors.description ? 'error' : ''}\n            />\n            {errors.description && (\n              <span className=\"error-message\">\n                <AlertCircle size={14} />\n                {errors.description}\n              </span>\n            )}\n          </div>\n\n          {errors.submit && (\n            <div className=\"submit-error\">\n              <AlertCircle size={16} />\n              {errors.submit}\n            </div>\n          )}\n\n          <div className=\"form-actions\">\n            <button type=\"button\" className=\"cancel-btn\" onClick={handleClose} disabled={isSubmitting}>\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"submit-btn\" disabled={isSubmitting} data-testid=\"button-submit\">\n              <Save size={16} />\n              {isSubmitting ? 'Creating Case...' : 'Add Case'}\n            </button>\n          </div>\n        </form>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddCaseModal;","size_bytes":8876},"client/src/components/AddOBModal/AddOBModal.css":{"content":".modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  padding: 20px;\n}\n\n.modal-content {\n  background-color: #2c3e50;\n  background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%);\n  border-radius: 12px;\n  width: 100%;\n  max-width: 600px;\n  max-height: 90vh;\n  overflow-y: auto;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\n  position: relative;\n  transition: all 0.3s ease;\n}\n\n.modal-content.maximized {\n  max-width: 95vw;\n  max-height: 95vh;\n  width: 95vw;\n  height: 95vh;\n}\n\n.modal-content.minimized {\n  max-width: 400px;\n  max-height: 300px;\n  width: 400px;\n  height: 300px;\n  overflow: hidden;\n}\n\n.modal-content.minimized .ob-form {\n  display: none;\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 24px 24px 0 24px;\n  border-bottom: 1px solid #34495e;\n  border-bottom: 2px solid #9b59b6;\n  margin-bottom: 24px;\n  background: linear-gradient(135deg, #7d3c98 0%, #8e44ad 100%);\n  margin: 0;\n  padding: 20px 24px;\n  border-radius: 12px 12px 0 0;\n}\n\n.modal-header h2 {\n  font-size: 24px;\n  font-weight: 600;\n  color: #ffffff;\n  margin: 0;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.modal-header h2::before {\n  content: \"📋\";\n  font-size: 28px;\n}\n\n.modal-controls {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.minimize-btn,\n.maximize-btn {\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  color: #ffffff;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.minimize-btn:hover,\n.maximize-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: scale(1.1);\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  color: #7f8c8d;\n  color: #ffffff;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n  background: rgba(231, 76, 60, 0.8);\n}\n\n.close-btn:hover {\n  background: rgba(231, 76, 60, 1);\n  color: #ffffff;\n  transform: scale(1.1);\n}\n\n.ob-form {\n  padding: 24px;\n  background: rgba(155, 89, 182, 0.2);\n  margin: 0;\n  backdrop-filter: blur(10px);\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  font-size: 14px;\n  font-weight: 500;\n  color: #bdc3c7;\n  margin-bottom: 8px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  padding: 12px 16px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 14px;\n  transition: border-color 0.2s ease;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3498db;\n}\n\n.form-group input::placeholder,\n.form-group textarea::placeholder {\n  color: #7f8c8d;\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: #e74c3c;\n}\n\n.error-message {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #e74c3c;\n  font-size: 12px;\n  margin-top: 6px;\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 100px;\n}\n\n.form-actions {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  margin-top: 32px;\n  padding-top: 24px;\n  border-top: 1px solid #34495e;\n}\n\n.cancel-btn {\n  padding: 12px 24px;\n  background-color: #34495e;\n  color: #bdc3c7;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover {\n  background-color: #4a5f7a;\n  color: #ffffff;\n}\n\n.submit-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 24px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.submit-btn:hover {\n  background-color: #2980b9;\n}\n\n@media (max-width: 768px) {\n  .modal-content {\n    margin: 10px;\n    max-width: none;\n  }\n  \n  .form-row {\n    grid-template-columns: 1fr;\n    gap: 0;\n  }\n  \n  .form-actions {\n    flex-direction: column;\n  }\n  \n  .cancel-btn,\n  .submit-btn {\n    width: 100%;\n  }\n}","size_bytes":4337},"client/src/components/AddOBModal/AddOBModal.jsx":{"content":"import React, { useState } from 'react';\nimport { X, Save, AlertCircle, Minimize2, Maximize2, Square } from 'lucide-react';\nimport './AddOBModal.css';\n\nconst AddOBModal = ({ isOpen, onClose, onAddOB }) => {\n  const [isMaximized, setIsMaximized] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [formData, setFormData] = useState({\n    type: 'Incident',\n    description: '',\n    reportedBy: '',\n    officer: '',\n    location: '',\n    status: 'Pending',\n    details: ''\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.description.trim()) {\n      newErrors.description = 'Description is required';\n    }\n    \n    if (!formData.reportedBy.trim()) {\n      newErrors.reportedBy = 'Reported by field is required';\n    }\n    \n    if (!formData.officer.trim()) {\n      newErrors.officer = 'Officer name is required';\n    }\n    \n    if (!formData.location.trim()) {\n      newErrors.location = 'Location is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      const now = new Date();\n      const newOBEntry = {\n        id: `OB-${Date.now()}`,\n        obNumber: `OB/${now.getFullYear()}/${String(Date.now()).slice(-4)}`,\n        type: formData.type,\n        description: formData.description,\n        reportedBy: formData.reportedBy,\n        officer: formData.officer,\n        location: formData.location,\n        status: formData.status,\n        details: formData.details,\n        date: now.toISOString().split('T')[0],\n        dateTime: now.toLocaleString(),\n        createdAt: now.toISOString()\n      };\n      \n      onAddOB(newOBEntry);\n      \n      // Reset form\n      setFormData({\n        type: 'Incident',\n        description: '',\n        reportedBy: '',\n        officer: '',\n        location: '',\n        status: 'Pending',\n        details: ''\n      });\n      \n      onClose();\n    }\n  };\n\n  const handleClose = () => {\n    setFormData({\n      type: 'Incident',\n      description: '',\n      reportedBy: '',\n      officer: '',\n      location: '',\n      status: 'Pending',\n      details: ''\n    });\n    setErrors({});\n    onClose();\n  };\n\n  const handleMaximize = () => {\n    setIsMaximized(!isMaximized);\n    setIsMinimized(false);\n  };\n\n  const handleMinimize = () => {\n    setIsMinimized(!isMinimized);\n    setIsMaximized(false);\n  };\n\n  if (!isOpen) return null;\n\n  const modalClass = `modal-content ${isMaximized ? 'maximized' : ''} ${isMinimized ? 'minimized' : ''}`;\n\n  return (\n    <div className=\"modal-overlay\" onClick={handleClose}>\n      <div className={modalClass} onClick={(e) => e.stopPropagation()}>\n        <div className=\"modal-header\">\n          <h2>Add OB Entry</h2>\n          <div className=\"modal-controls\">\n            <button className=\"minimize-btn\" onClick={handleMinimize}>\n              <Minimize2 size={16} />\n            </button>\n            <button className=\"maximize-btn\" onClick={handleMaximize}>\n              {isMaximized ? <Square size={16} /> : <Maximize2 size={16} />}\n            </button>\n            <button className=\"close-btn\" onClick={handleClose}>\n              <X size={20} />\n            </button>\n          </div>\n        </div>\n        \n        {!isMinimized && (\n          <form onSubmit={handleSubmit} className=\"ob-form\">\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"type\">Type</label>\n              <select\n                id=\"type\"\n                name=\"type\"\n                value={formData.type}\n                onChange={handleInputChange}\n              >\n                <option value=\"Incident\">Incident</option>\n                <option value=\"Complaint\">Complaint</option>\n                <option value=\"Arrest\">Arrest</option>\n                <option value=\"Accident\">Accident</option>\n                <option value=\"Other\">Other</option>\n              </select>\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status</label>\n              <select\n                id=\"status\"\n                name=\"status\"\n                value={formData.status}\n                onChange={handleInputChange}\n              >\n                <option value=\"Pending\">Pending</option>\n                <option value=\"Under Review\">Under Review</option>\n                <option value=\"Completed\">Completed</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description *</label>\n            <input\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              placeholder=\"Brief description of the occurrence\"\n              className={errors.description ? 'error' : ''}\n            />\n            {errors.description && (\n              <span className=\"error-message\">\n                <AlertCircle size={14} />\n                {errors.description}\n              </span>\n            )}\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"reportedBy\">Reported By *</label>\n              <input\n                type=\"text\"\n                id=\"reportedBy\"\n                name=\"reportedBy\"\n                value={formData.reportedBy}\n                onChange={handleInputChange}\n                placeholder=\"Name of person reporting\"\n                className={errors.reportedBy ? 'error' : ''}\n              />\n              {errors.reportedBy && (\n                <span className=\"error-message\">\n                  <AlertCircle size={14} />\n                  {errors.reportedBy}\n                </span>\n              )}\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"officer\">Recording Officer *</label>\n              <input\n                type=\"text\"\n                id=\"officer\"\n                name=\"officer\"\n                value={formData.officer}\n                onChange={handleInputChange}\n                placeholder=\"Officer recording the entry\"\n                className={errors.officer ? 'error' : ''}\n              />\n              {errors.officer && (\n                <span className=\"error-message\">\n                  <AlertCircle size={14} />\n                  {errors.officer}\n                </span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"location\">Location *</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              name=\"location\"\n              value={formData.location}\n              onChange={handleInputChange}\n              placeholder=\"Location where occurrence happened\"\n              className={errors.location ? 'error' : ''}\n            />\n            {errors.location && (\n              <span className=\"error-message\">\n                <AlertCircle size={14} />\n                {errors.location}\n              </span>\n            )}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"details\">Additional Details</label>\n            <textarea\n              id=\"details\"\n              name=\"details\"\n              value={formData.details}\n              onChange={handleInputChange}\n              placeholder=\"Additional details about the occurrence (optional)\"\n              rows=\"4\"\n            />\n          </div>\n\n          <div className=\"form-actions\">\n            <button type=\"button\" className=\"cancel-btn\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"submit-btn\">\n              <Save size={16} />\n              Add Entry\n            </button>\n          </div>\n        </form>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddOBModal;","size_bytes":8339},"client/src/components/Auth/Auth.css":{"content":"/* Authentication Modal Styles */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n  backdrop-filter: blur(2px);\n}\n\n.auth-modal {\n  background: linear-gradient(145deg, #1a1a1a, #2a2a2a);\n  border-radius: 16px;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);\n  border: 1px solid #333;\n  width: 90%;\n  max-width: 500px;\n  max-height: 90vh;\n  overflow-y: auto;\n  color: #ffffff;\n}\n\n.register-modal {\n  max-width: 700px;\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px 30px 0;\n  margin-bottom: 24px;\n}\n\n.modal-header h2 {\n  margin: 0;\n  color: #ffffff;\n  font-size: 28px;\n  font-weight: 600;\n}\n\n.modal-close-btn {\n  background: none;\n  border: none;\n  font-size: 32px;\n  color: #999;\n  cursor: pointer;\n  padding: 0;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n}\n\n.modal-close-btn:hover {\n  background-color: #333;\n  color: #fff;\n}\n\n.auth-form {\n  padding: 0 30px 30px;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 16px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  color: #e0e0e0;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input,\n.form-group select {\n  width: 100%;\n  padding: 12px 16px;\n  background-color: #333;\n  border: 2px solid #444;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 16px;\n  transition: all 0.2s ease;\n  box-sizing: border-box;\n}\n\n.form-group input:focus,\n.form-group select:focus {\n  outline: none;\n  border-color: #4CAF50;\n  background-color: #3a3a3a;\n}\n\n.form-group input::placeholder {\n  color: #888;\n}\n\n.form-group input:disabled,\n.form-group select:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.auth-submit-btn {\n  width: 100%;\n  padding: 14px 20px;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  margin-top: 10px;\n}\n\n.auth-submit-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #45a049, #3d8b40);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);\n}\n\n.auth-submit-btn:disabled {\n  background: linear-gradient(135deg, #666, #555);\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: none;\n}\n\n.error-message {\n  background-color: #d32f2f;\n  color: white;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #f44336;\n}\n\n.success-message {\n  background-color: #388e3c;\n  color: white;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #4caf50;\n}\n\n.auth-links {\n  text-align: center;\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #333;\n}\n\n.link-button {\n  background: none;\n  border: none;\n  color: #4CAF50;\n  cursor: pointer;\n  text-decoration: underline;\n  font-size: 14px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.link-button:hover {\n  color: #66bb6a;\n  background-color: rgba(76, 175, 80, 0.1);\n  text-decoration: none;\n}\n\n.auth-footer {\n  text-align: center;\n  padding: 20px 30px;\n  border-top: 1px solid #333;\n  background-color: rgba(0, 0, 0, 0.2);\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n}\n\n.auth-footer p {\n  margin: 0;\n  color: #999;\n  font-size: 14px;\n}\n\n.auth-info {\n  background-color: rgba(76, 175, 80, 0.1);\n  border: 1px solid rgba(76, 175, 80, 0.3);\n  border-radius: 8px;\n  padding: 12px 16px;\n  margin-top: 16px;\n}\n\n.auth-info p {\n  margin: 0;\n  color: #e0e0e0;\n  font-size: 14px;\n}\n\n.token-display {\n  margin-bottom: 20px;\n}\n\n.token-display label {\n  display: block;\n  margin-bottom: 8px;\n  color: #e0e0e0;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.token-value {\n  background-color: #2a2a2a;\n  border: 2px solid #4CAF50;\n  border-radius: 8px;\n  padding: 12px 16px;\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  color: #4CAF50;\n  word-break: break-all;\n  letter-spacing: 0.5px;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .auth-modal {\n    margin: 20px;\n    width: calc(100% - 40px);\n  }\n  \n  .register-modal {\n    max-width: none;\n  }\n\n  .form-row {\n    grid-template-columns: 1fr;\n  }\n\n  .modal-header {\n    padding: 20px 20px 0;\n  }\n\n  .modal-header h2 {\n    font-size: 24px;\n  }\n\n  .auth-form {\n    padding: 0 20px 20px;\n  }\n\n  .auth-footer {\n    padding: 15px 20px;\n  }\n}\n\n@media (max-width: 480px) {\n  .modal-header h2 {\n    font-size: 20px;\n  }\n\n  .form-group input,\n  .form-group select {\n    font-size: 16px; /* Prevent zoom on iOS */\n  }\n}","size_bytes":4852},"client/src/components/Auth/ForgotPasswordModal.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport './Auth.css';\n\nconst ForgotPasswordModal = ({ isOpen, onClose, onSwitchToLogin }) => {\n  const [step, setStep] = useState('forgot'); // 'forgot' or 'reset'\n  const [formData, setFormData] = useState({\n    username: '',\n    token: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [resetToken, setResetToken] = useState('');\n  const { forgotPassword, resetPassword } = useAuth();\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n    setError('');\n    setSuccess('');\n  };\n\n  const handleForgotSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    setSuccess('');\n\n    const result = await forgotPassword(formData.username);\n\n    if (result.success) {\n      setSuccess(result.message);\n      if (result.token) {\n        setResetToken(result.token);\n        setFormData({ ...formData, token: result.token });\n        setStep('reset');\n        setSuccess('Token generated! You can now reset your password.');\n      }\n    } else {\n      setError(result.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleResetSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    setSuccess('');\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      setIsLoading(false);\n      return;\n    }\n\n    const result = await resetPassword(formData.token, formData.password, formData.confirmPassword);\n\n    if (result.success) {\n      setSuccess('Password reset successfully! You can now login.');\n      setTimeout(() => {\n        onClose();\n        onSwitchToLogin();\n        setStep('forgot');\n        setFormData({\n          username: '',\n          token: '',\n          password: '',\n          confirmPassword: ''\n        });\n        setResetToken('');\n        setSuccess('');\n        setError('');\n      }, 2000);\n    } else {\n      setError(result.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content auth-modal\">\n        <div className=\"modal-header\">\n          <h2>{step === 'forgot' ? 'Forgot Password' : 'Reset Password'}</h2>\n          <button className=\"modal-close-btn\" onClick={onClose}>×</button>\n        </div>\n        \n        {step === 'forgot' ? (\n          <form onSubmit={handleForgotSubmit} className=\"auth-form\">\n            {error && <div className=\"error-message\">{error}</div>}\n            {success && <div className=\"success-message\">{success}</div>}\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"username\">Username / Badge Number</label>\n              <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                value={formData.username}\n                onChange={handleChange}\n                required\n                placeholder=\"Enter your username\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"auth-submit-btn\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Generating Token...' : 'Generate Reset Token'}\n            </button>\n\n            <div className=\"auth-info\">\n              <p>Enter your username to generate a password reset token.</p>\n            </div>\n          </form>\n        ) : (\n          <form onSubmit={handleResetSubmit} className=\"auth-form\">\n            {error && <div className=\"error-message\">{error}</div>}\n            {success && <div className=\"success-message\">{success}</div>}\n            \n            {resetToken && (\n              <div className=\"token-display\">\n                <label>Reset Token (Auto-filled)</label>\n                <div className=\"token-value\">{resetToken}</div>\n              </div>\n            )}\n\n            <div className=\"form-group\">\n              <label htmlFor=\"token\">Reset Token</label>\n              <input\n                type=\"text\"\n                id=\"token\"\n                name=\"token\"\n                value={formData.token}\n                onChange={handleChange}\n                required\n                placeholder=\"Enter reset token\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">New Password</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n                placeholder=\"Enter new password\"\n                disabled={isLoading}\n                minLength={6}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"confirmPassword\">Confirm New Password</label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                required\n                placeholder=\"Confirm new password\"\n                disabled={isLoading}\n                minLength={6}\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"auth-submit-btn\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Resetting...' : 'Reset Password'}\n            </button>\n\n            <div className=\"auth-links\">\n              <button \n                type=\"button\" \n                className=\"link-button\"\n                onClick={() => setStep('forgot')}\n              >\n                ← Back to Generate Token\n              </button>\n            </div>\n          </form>\n        )}\n\n        <div className=\"auth-footer\">\n          <p>\n            Remember your password?{' '}\n            <button \n              type=\"button\" \n              className=\"link-button\"\n              onClick={onSwitchToLogin}\n            >\n              Sign In\n            </button>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPasswordModal;","size_bytes":6486},"client/src/components/Auth/LoginModal.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport './Auth.css';\n\nconst LoginModal = ({ isOpen, onClose, onSwitchToRegister, onSwitchToForgotPassword }) => {\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n    setError('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    const result = await login(formData.username, formData.password);\n\n    if (result.success) {\n      onClose();\n      setFormData({ username: '', password: '' });\n    } else {\n      setError(result.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content auth-modal\">\n        <div className=\"modal-header\">\n          <h2>Login to Police System</h2>\n          <button className=\"modal-close-btn\" onClick={onClose}>×</button>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"auth-form\">\n          {error && <div className=\"error-message\">{error}</div>}\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"username\">Username / Badge Number</label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n              required\n              placeholder=\"Enter your username\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              required\n              placeholder=\"Enter your password\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"auth-submit-btn\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Signing In...' : 'Sign In'}\n          </button>\n        </form>\n\n        <div className=\"auth-links\">\n          <button \n            type=\"button\" \n            className=\"link-button\"\n            onClick={onSwitchToForgotPassword}\n          >\n            Forgot Password?\n          </button>\n        </div>\n\n        <div className=\"auth-footer\">\n          <p>Administrator access required to create new accounts</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginModal;","size_bytes":2851},"client/src/components/Auth/RegisterModal.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport './Auth.css';\n\nconst RegisterModal = ({ isOpen, onClose, onSwitchToLogin }) => {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: '',\n    badgeNumber: '',\n    department: '',\n    position: '',\n    phone: '',\n    role: 'user'\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { register } = useAuth();\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n    setError('');\n    setSuccess('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    setSuccess('');\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      setIsLoading(false);\n      return;\n    }\n\n    const result = await register(formData);\n\n    if (result.success) {\n      setSuccess('User registered successfully!');\n      setFormData({\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        firstName: '',\n        lastName: '',\n        badgeNumber: '',\n        department: '',\n        position: '',\n        phone: '',\n        role: 'user'\n      });\n      setTimeout(() => {\n        onClose();\n        setSuccess('');\n      }, 2000);\n    } else {\n      setError(result.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content auth-modal register-modal\">\n        <div className=\"modal-header\">\n          <h2>Register New User</h2>\n          <button className=\"modal-close-btn\" onClick={onClose}>×</button>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"auth-form\">\n          {error && <div className=\"error-message\">{error}</div>}\n          {success && <div className=\"success-message\">{success}</div>}\n          \n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"firstName\">First Name *</label>\n              <input\n                type=\"text\"\n                id=\"firstName\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange}\n                required\n                placeholder=\"First Name\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"lastName\">Last Name *</label>\n              <input\n                type=\"text\"\n                id=\"lastName\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange}\n                required\n                placeholder=\"Last Name\"\n                disabled={isLoading}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"username\">Username *</label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n              required\n              placeholder=\"Unique username\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email *</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              required\n              placeholder=\"official@police.gov\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"badgeNumber\">Badge Number</label>\n              <input\n                type=\"text\"\n                id=\"badgeNumber\"\n                name=\"badgeNumber\"\n                value={formData.badgeNumber}\n                onChange={handleChange}\n                placeholder=\"Badge Number\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"department\">Department</label>\n              <input\n                type=\"text\"\n                id=\"department\"\n                name=\"department\"\n                value={formData.department}\n                onChange={handleChange}\n                placeholder=\"Department\"\n                disabled={isLoading}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"position\">Position</label>\n              <input\n                type=\"text\"\n                id=\"position\"\n                name=\"position\"\n                value={formData.position}\n                onChange={handleChange}\n                placeholder=\"Position/Rank\"\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"phone\">Phone</label>\n              <input\n                type=\"tel\"\n                id=\"phone\"\n                name=\"phone\"\n                value={formData.phone}\n                onChange={handleChange}\n                placeholder=\"Phone number\"\n                disabled={isLoading}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"role\">Access Level *</label>\n            <select\n              id=\"role\"\n              name=\"role\"\n              value={formData.role}\n              onChange={handleChange}\n              required\n              disabled={isLoading}\n            >\n              <option value=\"user\">Standard User</option>\n              <option value=\"admin\">Administrator</option>\n            </select>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password *</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n                placeholder=\"Strong password\"\n                disabled={isLoading}\n                minLength={6}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"confirmPassword\">Confirm Password *</label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                required\n                placeholder=\"Confirm password\"\n                disabled={isLoading}\n                minLength={6}\n              />\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"auth-submit-btn\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Creating Account...' : 'Create Account'}\n          </button>\n        </form>\n\n        <div className=\"auth-footer\">\n          <p>\n            Already have an account?{' '}\n            <button \n              type=\"button\" \n              className=\"link-button\"\n              onClick={onSwitchToLogin}\n            >\n              Sign In\n            </button>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterModal;","size_bytes":7738},"client/src/components/Cases/Cases.css":{"content":".cases {\n  padding: 30px;\n  max-width: 1400px;\n  background: linear-gradient(135deg, #1a1f2e 0%, #2c3e50 100%);\n  border-radius: 16px;\n  margin: 20px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n}\n\n.cases-header {\n  margin-bottom: 30px;\n  position: relative;\n  padding: 20px 0;\n  border-bottom: 2px solid #3498db;\n}\n\n.cases-header h1 {\n  font-size: 28px;\n  font-weight: 600;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.cases-header h1::before {\n  content: \"📁\";\n  font-size: 32px;\n}\n\n.cases-controls {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  margin-bottom: 30px;\n  flex-wrap: wrap;\n  background-color: rgba(52, 73, 94, 0.3);\n  padding: 20px;\n  border-radius: 12px;\n  backdrop-filter: blur(10px);\n}\n\n.search-bar {\n  position: relative;\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-bar::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(45deg, rgba(52, 152, 219, 0.1), rgba(155, 89, 182, 0.1));\n  border-radius: 8px;\n  z-index: -1;\n}\n\n.search-icon {\n  position: absolute;\n  left: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 18px;\n  height: 18px;\n  color: #3498db;\n}\n\n.search-bar input {\n  width: 100%;\n  padding: 12px 12px 12px 40px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 14px;\n  transition: all 0.3s ease;\n}\n\n.search-bar input::placeholder {\n  color: #7f8c8d;\n}\n\n.search-bar input:focus {\n  outline: none;\n  border-color: #3498db;\n  box-shadow: 0 0 15px rgba(52, 152, 219, 0.3);\n  transform: translateY(-2px);\n}\n\n.filters {\n  display: flex;\n  gap: 12px;\n}\n\n.filter-select {\n  padding: 12px 16px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 14px;\n  cursor: pointer;\n  min-width: 120px;\n  transition: all 0.3s ease;\n}\n\n.filter-select:focus {\n  outline: none;\n  border-color: #3498db;\n  box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);\n}\n\n.add-case-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.add-case-btn:hover {\n  background-color: #2980b9;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);\n}\n\n.add-case-btn::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.add-case-btn:hover::before {\n  left: 100%;\n}\n\n.btn-icon {\n  width: 18px;\n  height: 18px;\n}\n\n.cases-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.stat-card {\n  background-color: #2c3e50;\n  background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n  border-radius: 12px;\n  padding: 24px;\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  border-left: 4px solid;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.stat-card::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(45deg, rgba(255, 255, 255, 0.05), transparent);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.stat-card:hover::before {\n  opacity: 1;\n}\n\n.stat-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\n}\n\n.stat-card.orange { border-left-color: #f39c12; }\n.stat-card.blue { border-left-color: #3498db; }\n.stat-card.green { border-left-color: #27ae60; }\n\n.stat-icon {\n  width: 32px;\n  height: 32px;\n  color: #3498db;\n  filter: drop-shadow(0 2px 4px rgba(52, 152, 219, 0.3));\n}\n\n.stat-info h3 {\n  font-size: 16px;\n  font-weight: 500;\n  color: #bdc3c7;\n  margin-bottom: 4px;\n}\n\n.stat-value {\n  font-size: 28px;\n  font-weight: 700;\n  color: #ffffff;\n}\n\n.cases-table {\n  width: 100%;\n  background-color: #2c3e50;\n  background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\n}\n\n.cases-table table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.cases-table thead {\n  background-color: #34495e;\n  background: linear-gradient(135deg, #34495e 0%, #3498db 100%);\n}\n\n.cases-table th {\n  padding: 16px 20px;\n  text-align: left;\n  font-weight: 600;\n  font-size: 14px;\n  color: #bdc3c7;\n  border-bottom: 1px solid #4a5f7a;\n  color: #ffffff;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n.cases-table td {\n  padding: 16px 20px;\n  font-size: 14px;\n  color: #ffffff;\n  border-bottom: 1px solid #4a5f7a;\n  transition: all 0.3s ease;\n}\n\n.cases-table tbody tr {\n  transition: background-color 0.2s ease;\n  cursor: pointer;\n  position: relative;\n}\n\n.cases-table tbody tr:hover {\n  background: linear-gradient(90deg, rgba(52, 152, 219, 0.1), rgba(155, 89, 182, 0.1));\n  transform: scale(1.01);\n}\n\n.cases-table tbody tr:last-child td {\n  border-bottom: none;\n}\n\n.case-id {\n  color: #3498db;\n  font-weight: 500;\n  text-shadow: 0 1px 2px rgba(52, 152, 219, 0.3);\n}\n\n.status {\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.status.open {\n  background-color: #3498db;\n  color: white;\n}\n\n.status.in-progress {\n  background-color: #f39c12;\n  color: white;\n}\n\n.status.closed {\n  background-color: #27ae60;\n  color: white;\n}\n\n.priority {\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.priority.high {\n  background-color: #e74c3c;\n  color: white;\n}\n\n.priority.medium {\n  background-color: #f39c12;\n  color: white;\n}\n\n.priority.low {\n  background-color: #27ae60;\n  color: white;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.edit-btn,\n.delete-btn {\n  padding: 6px 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.edit-btn {\n  background-color: #3498db;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n}\n\n.edit-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);\n}\n\n.delete-btn {\n  background-color: #e74c3c;\n  background: linear-gradient(135deg, #e74c3c, #c0392b);\n  color: white;\n}\n\n.delete-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);\n}\n\n.edit-input,\n.edit-select {\n  padding: 4px 8px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 4px;\n  color: #ffffff;\n  font-size: 12px;\n  width: 100%;\n}\n\n.edit-input:focus,\n.edit-select:focus {\n  outline: none;\n  border-color: #3498db;\n}\n\n.save-btn,\n.cancel-btn-small {\n  padding: 4px 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.save-btn {\n  background-color: #27ae60;\n  color: white;\n}\n\n.save-btn:hover {\n  background-color: #229954;\n}\n\n.cancel-btn-small {\n  background-color: #7f8c8d;\n  color: white;\n}\n\n.cancel-btn-small:hover {\n  background-color: #6c7b7d;\n}\n\n@media (max-width: 768px) {\n  .cases-controls {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .search-bar {\n    min-width: auto;\n  }\n  \n  .filters {\n    justify-content: space-between;\n  }\n  \n  .table-header,\n  .table-row {\n    grid-template-columns: 1fr;\n    gap: 8px;\n  }\n  \n  .table-header span,\n  .table-row span {\n    padding: 4px 0;\n  }\n}","size_bytes":7900},"client/src/components/Cases/Cases.jsx":{"content":"import React, { useState } from 'react';\nimport { Search, Filter, Plus, Clock, CheckCircle, FileText, Edit, Trash2 } from 'lucide-react';\nimport './Cases.css';\n\nconst Cases = ({ onAddCaseClick, cases, onUpdateCase, onDeleteCase }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n  const [editingCase, setEditingCase] = useState(null);\n\n  const stats = [\n    { title: 'Total Cases', value: cases.length.toString(), icon: FileText, color: 'orange' },\n    { title: 'In Progress', value: cases.filter(c => c.status === 'In Progress').length.toString(), icon: Clock, color: 'blue' },\n    { title: 'Closed', value: cases.filter(c => c.status === 'Closed').length.toString(), icon: CheckCircle, color: 'green' }\n  ];\n\n  const filteredCases = cases.filter(caseItem => {\n    const matchesSearch = caseItem.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         caseItem.id.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || caseItem.status.toLowerCase() === statusFilter.toLowerCase();\n    const matchesPriority = priorityFilter === 'all' || caseItem.priority.toLowerCase() === priorityFilter.toLowerCase();\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  const handleEdit = (caseItem) => {\n    setEditingCase(caseItem);\n  };\n\n  const handleDelete = (caseId) => {\n    if (window.confirm('Are you sure you want to delete this case?')) {\n      onDeleteCase(caseId);\n    }\n  };\n\n  const handleUpdateSubmit = (e) => {\n    e.preventDefault();\n    onUpdateCase(editingCase);\n    setEditingCase(null);\n  };\n\n  const handleEditChange = (e) => {\n    const { name, value } = e.target;\n    setEditingCase(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  return (\n    <div className=\"cases\">\n      <div className=\"cases-header\">\n        <h1>All Cases</h1>\n      </div>\n\n      <div className=\"cases-controls\">\n        <div className=\"search-bar\">\n          <Search className=\"search-icon\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        \n        <div className=\"filters\">\n          <select \n            value={statusFilter} \n            onChange={(e) => setStatusFilter(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">Status</option>\n            <option value=\"open\">Open</option>\n            <option value=\"in progress\">In Progress</option>\n            <option value=\"closed\">Closed</option>\n          </select>\n          \n          <select \n            value={priorityFilter} \n            onChange={(e) => setPriorityFilter(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">Priority</option>\n            <option value=\"high\">High</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"low\">Low</option>\n          </select>\n        </div>\n\n        <button className=\"add-case-btn\" onClick={onAddCaseClick}>\n          <Plus className=\"btn-icon\" />\n          Add Case\n        </button>\n      </div>\n\n      <div className=\"cases-stats\">\n        {stats.map((stat, index) => {\n          const IconComponent = stat.icon;\n          return (\n            <div key={index} className={`stat-card ${stat.color}`}>\n              <IconComponent className=\"stat-icon\" />\n              <div className=\"stat-info\">\n                <h3>{stat.title}</h3>\n                <span className=\"stat-value\">{stat.value}</span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"cases-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Case ID</th>\n              <th>Title</th>\n              <th>Officer</th>\n              <th>Status</th>\n              <th>Priority</th>\n              <th>Last Update</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredCases.map((caseItem) => (\n              <tr key={caseItem.id}>\n                {editingCase && editingCase.id === caseItem.id ? (\n                  <>\n                    <td className=\"case-id\">{caseItem.id}</td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"title\"\n                        value={editingCase.title}\n                        onChange={handleEditChange}\n                        className=\"edit-input\"\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"officer\"\n                        value={editingCase.officer}\n                        onChange={handleEditChange}\n                        className=\"edit-input\"\n                      />\n                    </td>\n                    <td>\n                      <select\n                        name=\"status\"\n                        value={editingCase.status}\n                        onChange={handleEditChange}\n                        className=\"edit-select\"\n                      >\n                        <option value=\"Open\">Open</option>\n                        <option value=\"In Progress\">In Progress</option>\n                        <option value=\"Closed\">Closed</option>\n                      </select>\n                    </td>\n                    <td>\n                      <select\n                        name=\"priority\"\n                        value={editingCase.priority}\n                        onChange={handleEditChange}\n                        className=\"edit-select\"\n                      >\n                        <option value=\"Low\">Low</option>\n                        <option value=\"Medium\">Medium</option>\n                        <option value=\"High\">High</option>\n                      </select>\n                    </td>\n                    <td>{caseItem.lastUpdate}</td>\n                    <td>\n                      <div className=\"action-buttons\">\n                        <button onClick={handleUpdateSubmit} className=\"save-btn\">\n                          Save\n                        </button>\n                        <button onClick={() => setEditingCase(null)} className=\"cancel-btn-small\">\n                          Cancel\n                        </button>\n                      </div>\n                    </td>\n                  </>\n                ) : (\n                  <>\n                    <td className=\"case-id\">{caseItem.id}</td>\n                    <td>{caseItem.title}</td>\n                    <td>{caseItem.officer}</td>\n                    <td>\n                      <span className={`status ${caseItem.status.toLowerCase().replace(' ', '-')}`}>\n                        {caseItem.status}\n                      </span>\n                    </td>\n                    <td>\n                      <span className={`priority ${caseItem.priority.toLowerCase()}`}>\n                        {caseItem.priority}\n                      </span>\n                    </td>\n                    <td>{caseItem.lastUpdate}</td>\n                    <td>\n                      <div className=\"action-buttons\">\n                        <button onClick={() => handleEdit(caseItem)} className=\"edit-btn\">\n                          <Edit size={16} />\n                        </button>\n                        <button onClick={() => handleDelete(caseItem.id)} className=\"delete-btn\">\n                          <Trash2 size={16} />\n                        </button>\n                      </div>\n                    </td>\n                  </>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Cases;","size_bytes":7943},"client/src/components/Cases/CasesManager.css":{"content":".cases-list {\n  padding: 24px;\n  max-width: 1400px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.cases-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 32px;\n  padding: 24px;\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 16px;\n  border: 1px solid #3a526b;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  flex: 1;\n}\n\n.header-icon {\n  color: #27ae60;\n  width: 36px;\n  height: 36px;\n  flex-shrink: 0;\n}\n\n.header-content h1 {\n  color: #ecf0f1;\n  margin: 0 0 6px 0;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.2;\n}\n\n.header-content p {\n  color: #bdc3c7;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.3;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-shrink: 0;\n}\n\n.refresh-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.refresh-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #2980b9, #1abc9c);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(52, 152, 219, 0.4);\n}\n\n.refresh-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.refresh-btn .spinning {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.add-case-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background: linear-gradient(135deg, #5d8a66, #6b9b73);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(109, 155, 115, 0.2);\n}\n\n.add-case-btn:hover {\n  background: linear-gradient(135deg, #4a7355, #5d8a66);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(93, 138, 102, 0.3);\n}\n\n.filters-section {\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.search-box {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  background: #2c3e50;\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: 1px solid #3a526b;\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-box svg {\n  color: #7f8c8d;\n}\n\n.search-box input {\n  background: transparent;\n  border: none;\n  color: #ecf0f1;\n  font-size: 14px;\n  flex: 1;\n  outline: none;\n}\n\n.search-box input::placeholder {\n  color: #7f8c8d;\n}\n\n.filter-controls {\n  display: flex;\n  gap: 12px;\n}\n\n.filter-controls select {\n  background: #2c3e50;\n  border: 1px solid #3a526b;\n  color: #ecf0f1;\n  padding: 12px 16px;\n  border-radius: 8px;\n  font-size: 14px;\n  cursor: pointer;\n}\n\n.error-message {\n  background: rgba(231, 76, 60, 0.2);\n  border: 1px solid #e74c3c;\n  color: #e74c3c;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.cases-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  gap: 20px;\n}\n\n.case-card {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 12px;\n  padding: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.case-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);\n  border-color: #3498db;\n}\n\n.case-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 16px;\n}\n\n.case-info h3 {\n  color: #3498db;\n  margin: 0 0 4px 0;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.case-title {\n  color: #ecf0f1;\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.priority-badge {\n  padding: 4px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.priority-badge.critical {\n  background: rgba(231, 76, 60, 0.2);\n  color: #e74c3c;\n  border: 1px solid #e74c3c;\n}\n\n.priority-badge.high {\n  background: rgba(243, 156, 18, 0.2);\n  color: #f39c12;\n  border: 1px solid #f39c12;\n}\n\n.priority-badge.medium {\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n  border: 1px solid #3498db;\n}\n\n.priority-badge.low {\n  background: rgba(39, 174, 96, 0.2);\n  color: #27ae60;\n  border: 1px solid #27ae60;\n}\n\n.case-body {\n  margin-bottom: 16px;\n}\n\n.status-row {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n  color: #bdc3c7;\n}\n\n.status-icon {\n  width: 16px;\n  height: 16px;\n}\n\n.case-details p {\n  color: #bdc3c7;\n  margin: 4px 0;\n  font-size: 14px;\n}\n\n.case-details strong {\n  color: #ecf0f1;\n}\n\n.loading-state, .empty-state {\n  grid-column: 1 / -1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 60px 20px;\n  text-align: center;\n  color: #bdc3c7;\n}\n\n.empty-state svg {\n  color: #7f8c8d;\n  margin-bottom: 16px;\n}\n\n.empty-state h3 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 20px;\n}\n\n/* Case Detail Styles */\n.case-detail {\n  padding: 24px;\n  max-width: 1200px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 32px;\n}\n\n.back-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  background: rgba(52, 152, 219, 0.2);\n  border: 1px solid #3498db;\n  color: #3498db;\n  padding: 10px 16px;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.back-btn:hover {\n  background: rgba(52, 152, 219, 0.3);\n  transform: translateY(-1px);\n}\n\n.detail-actions {\n  display: flex;\n  gap: 12px;\n}\n\n.detail-actions button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  background: linear-gradient(135deg, #27ae60, #2ecc71);\n  color: white;\n  border: none;\n  padding: 10px 16px;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.detail-actions button:hover {\n  background: linear-gradient(135deg, #229954, #27ae60);\n  transform: translateY(-1px);\n}\n\n.case-info-panel {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 16px;\n  padding: 32px;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.panel-header h1 {\n  color: #ecf0f1;\n  margin: 0;\n  font-size: 32px;\n  font-weight: 700;\n}\n\n.case-badges {\n  display: flex;\n  gap: 12px;\n  flex-wrap: wrap;\n}\n\n.status-badge {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n  border: 1px solid #3498db;\n  border-radius: 20px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.detail-grid {\n  display: grid;\n  gap: 32px;\n}\n\n.detail-section {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 24px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n}\n\n.detail-section h3 {\n  color: #ecf0f1;\n  margin: 0 0 16px 0;\n  font-size: 20px;\n  font-weight: 600;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.info-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 16px;\n}\n\n.info-grid > div {\n  color: #bdc3c7;\n  font-size: 14px;\n}\n\n.info-grid strong {\n  color: #ecf0f1;\n  font-weight: 600;\n}\n\n.case-description {\n  color: #bdc3c7;\n  line-height: 1.6;\n  font-size: 16px;\n  margin: 0;\n}\n\n.activity-log {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.activity-item {\n  display: flex;\n  gap: 16px;\n  padding: 12px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  border-left: 3px solid #3498db;\n}\n\n.activity-time {\n  color: #7f8c8d;\n  font-size: 12px;\n  min-width: 150px;\n}\n\n.activity-text {\n  color: #ecf0f1;\n  font-size: 14px;\n}\n\n/* Case Form Styles */\n.case-form {\n  padding: 24px;\n  max-width: 800px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.case-form h1 {\n  color: #ecf0f1;\n  margin: 24px 0;\n  font-size: 28px;\n  font-weight: 700;\n}\n\n.case-form p {\n  color: #bdc3c7;\n  font-size: 16px;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .cases-list {\n    padding: 16px;\n  }\n\n  .cases-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .filters-section {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .search-box {\n    min-width: auto;\n  }\n\n  .filter-controls {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .filter-controls select {\n    width: 100%;\n  }\n\n  .cases-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .case-detail {\n    padding: 16px;\n  }\n\n  .panel-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .case-badges {\n    width: 100%;\n  }\n\n  .info-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .activity-item {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .activity-time {\n    min-width: auto;\n  }\n}\n\n/* Case Creation Form */\n.case-form-container {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.form-header {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.form-header h1 {\n  color: #ecf0f1;\n  font-size: 24px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.case-creation-form {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 30px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  max-width: 1000px;\n}\n\n.form-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-group.full-width {\n  grid-column: 1 / -1;\n}\n\n.form-group label {\n  color: #ecf0f1;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid #3a526b;\n  border-radius: 6px;\n  padding: 12px;\n  color: #ecf0f1 !important;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.form-group input::placeholder,\n.form-group textarea::placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input::-webkit-input-placeholder,\n.form-group textarea::-webkit-input-placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input::-moz-placeholder,\n.form-group textarea::-moz-placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input:-ms-input-placeholder,\n.form-group textarea:-ms-input-placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3498db;\n  background: rgba(255, 255, 255, 0.15);\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: #e74c3c;\n  background: rgba(231, 76, 60, 0.1);\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 120px;\n}\n\n.error-text {\n  color: #e74c3c;\n  font-size: 12px;\n  margin-top: 4px;\n}\n\n.submit-error {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 6px;\n  color: #e74c3c;\n  padding: 12px;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.form-actions {\n  display: flex;\n  gap: 15px;\n  justify-content: flex-end;\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid #3a526b;\n}\n\n.cancel-btn {\n  background: transparent;\n  border: 1px solid #7f8c8d;\n  color: #bdc3c7;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover:not(:disabled) {\n  background: rgba(127, 140, 141, 0.1);\n  border-color: #95a5a6;\n  color: #ecf0f1;\n}\n\n.submit-btn {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  border: none;\n  color: white;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.submit-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #2980b9, #1f618d);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);\n}\n\n.submit-btn:disabled,\n.cancel-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}","size_bytes":12270},"client/src/components/Cases/CasesManager.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  FileText, \n  Plus, \n  Search, \n  Filter,\n  ArrowLeft,\n  Eye,\n  Edit2,\n  Archive,\n  AlertTriangle,\n  Clock,\n  CheckCircle,\n  XCircle,\n  RotateCcw\n} from 'lucide-react';\nimport { useAuth } from '../../context/AuthContext';\nimport './CasesManager.css';\n\nconst CasesManager = () => {\n  const { user } = useAuth();\n  const [currentView, setCurrentView] = useState('list'); // 'list', 'detail', 'create', 'edit'\n  const [selectedCase, setSelectedCase] = useState(null);\n  const [cases, setCases] = useState([]);\n  const [filteredCases, setFilteredCases] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [priorityFilter, setPriorityFilter] = useState('');\n  const [viewHistory, setViewHistory] = useState(['list']); // Track navigation history\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const caseStatuses = ['Open', 'In Progress', 'Pending', 'Closed', 'Archived'];\n  const casePriorities = ['Low', 'Medium', 'High', 'Critical'];\n  const caseTypes = [\n    'Theft', 'Burglary', 'Assault', 'Domestic Violence', 'Drug Offense',\n    'Traffic Violation', 'Fraud', 'Vandalism', 'Missing Person', 'Other'\n  ];\n\n  // Handle browser back button navigation\n  useEffect(() => {\n    const handlePopState = (event) => {\n      if (viewHistory.length > 1) {\n        const newHistory = [...viewHistory];\n        newHistory.pop(); // Remove current view\n        const previousView = newHistory[newHistory.length - 1];\n        setViewHistory(newHistory);\n        setCurrentView(previousView);\n        if (previousView === 'list') {\n          setSelectedCase(null);\n        }\n      }\n    };\n\n    window.addEventListener('popstate', handlePopState);\n    return () => window.removeEventListener('popstate', handlePopState);\n  }, [viewHistory]);\n\n  useEffect(() => {\n    fetchCases();\n  }, []);\n\n  useEffect(() => {\n    filterCases();\n  }, [cases, searchTerm, statusFilter, priorityFilter]);\n\n  const fetchCases = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/cases');\n      if (response.ok) {\n        const data = await response.json();\n        setCases(data.cases || []);\n      }\n    } catch (error) {\n      setError('Failed to fetch cases');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const filterCases = () => {\n    let filtered = [...cases];\n\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      filtered = filtered.filter(caseItem => \n        caseItem.caseNumber?.toLowerCase().includes(search) ||\n        caseItem.title?.toLowerCase().includes(search) ||\n        caseItem.description?.toLowerCase().includes(search) ||\n        caseItem.location?.toLowerCase().includes(search) ||\n        caseItem.assignedOfficer?.toLowerCase().includes(search)\n      );\n    }\n\n    if (statusFilter) {\n      filtered = filtered.filter(caseItem => caseItem.status === statusFilter);\n    }\n\n    if (priorityFilter) {\n      filtered = filtered.filter(caseItem => caseItem.priority === priorityFilter);\n    }\n\n    setFilteredCases(filtered);\n  };\n\n  const navigateToView = (newView, caseData = null) => {\n    // Add current view to history\n    const newHistory = [...viewHistory, newView];\n    setViewHistory(newHistory);\n    setCurrentView(newView);\n    \n    if (caseData) {\n      setSelectedCase(caseData);\n    }\n\n    // Update browser history\n    window.history.pushState({ view: newView }, '', '');\n  };\n\n  const goBack = () => {\n    if (viewHistory.length > 1) {\n      const newHistory = [...viewHistory];\n      newHistory.pop(); // Remove current view\n      const previousView = newHistory[newHistory.length - 1];\n      setViewHistory(newHistory);\n      setCurrentView(previousView);\n      \n      if (previousView === 'list') {\n        setSelectedCase(null);\n      }\n      \n      // Update browser history\n      window.history.back();\n    }\n  };\n\n  const handleCaseClick = (caseItem) => {\n    navigateToView('detail', caseItem);\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'Open': return <AlertTriangle className=\"status-icon\" />;\n      case 'In Progress': return <Clock className=\"status-icon\" />;\n      case 'Closed': return <CheckCircle className=\"status-icon\" />;\n      case 'Archived': return <Archive className=\"status-icon\" />;\n      default: return <FileText className=\"status-icon\" />;\n    }\n  };\n\n  const getPriorityClass = (priority) => {\n    switch (priority) {\n      case 'Critical': return 'critical';\n      case 'High': return 'high';\n      case 'Medium': return 'medium';\n      case 'Low': return 'low';\n      default: return 'medium';\n    }\n  };\n\n  // Cases List View\n  const CasesList = () => (\n    <div className=\"cases-list\">\n      <div className=\"cases-header\">\n        <div className=\"header-content\">\n          <FileText className=\"header-icon\" />\n          <div>\n            <h1>Cases Management</h1>\n            <p>Manage and track police cases</p>\n          </div>\n        </div>\n        <div className=\"header-actions\">\n          <button \n            className=\"refresh-btn\" \n            onClick={fetchCases}\n            disabled={isLoading}\n            title=\"Refresh cases list\"\n          >\n            <RotateCcw size={18} className={isLoading ? 'spinning' : ''} />\n            Refresh\n          </button>\n          <button className=\"add-case-btn\" onClick={() => navigateToView('create')}>\n            <Plus size={18} />\n            New Case\n          </button>\n        </div>\n      </div>\n\n      <div className=\"filters-section\">\n        <div className=\"search-box\">\n          <Search size={20} />\n          <input\n            type=\"text\"\n            placeholder=\"Search cases...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        <div className=\"filter-controls\">\n          <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>\n            <option value=\"\">All Status</option>\n            {caseStatuses.map(status => (\n              <option key={status} value={status}>{status}</option>\n            ))}\n          </select>\n          <select value={priorityFilter} onChange={(e) => setPriorityFilter(e.target.value)}>\n            <option value=\"\">All Priority</option>\n            {casePriorities.map(priority => (\n              <option key={priority} value={priority}>{priority}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">{error}</div>\n      )}\n\n      <div className=\"cases-grid\">\n        {isLoading ? (\n          <div className=\"loading-state\">Loading cases...</div>\n        ) : filteredCases.length === 0 ? (\n          <div className=\"empty-state\">\n            <FileText size={48} />\n            <h3>No cases found</h3>\n            <p>Create a new case or adjust your search filters</p>\n          </div>\n        ) : (\n          filteredCases.map((caseItem) => (\n            <div key={caseItem.id} className=\"case-card\" onClick={() => handleCaseClick(caseItem)}>\n              <div className=\"case-header\">\n                <div className=\"case-info\">\n                  <h3>{caseItem.caseNumber}</h3>\n                  <p className=\"case-title\">{caseItem.title}</p>\n                </div>\n                <div className={`priority-badge ${getPriorityClass(caseItem.priority)}`}>\n                  {caseItem.priority}\n                </div>\n              </div>\n              <div className=\"case-body\">\n                <div className=\"status-row\">\n                  {getStatusIcon(caseItem.status)}\n                  <span className=\"status-text\">{caseItem.status}</span>\n                </div>\n                <div className=\"case-details\">\n                  <p><strong>Type:</strong> {caseItem.type}</p>\n                  <p><strong>Date:</strong> {new Date(caseItem.incidentDate).toLocaleDateString()}</p>\n                  <p><strong>Location:</strong> {caseItem.location}</p>\n                  {caseItem.assignedOfficer && (\n                    <p><strong>Officer:</strong> {caseItem.assignedOfficer}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  // Create Case Form\n  const CreateCaseForm = () => {\n    const [formData, setFormData] = useState({\n      title: '',\n      description: '',\n      type: 'Theft',\n      priority: 'Medium',\n      status: 'Open',\n      location: '',\n      assignedOfficer: '',\n      incidentDate: new Date().toISOString().split('T')[0]\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const caseTypes = ['Theft', 'Assault', 'Vandalism', 'Fraud', 'Burglary', 'Traffic', 'Domestic', 'Drug', 'Other'];\n\n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setFormData(prev => ({ ...prev, [name]: value }));\n      // Clear error when user starts typing\n      if (errors[name]) {\n        setErrors(prev => ({ ...prev, [name]: '' }));\n      }\n    };\n\n    const validateForm = () => {\n      const newErrors = {};\n      if (!formData.title.trim()) newErrors.title = 'Title is required';\n      if (!formData.description.trim()) newErrors.description = 'Description is required';\n      if (!formData.location.trim()) newErrors.location = 'Location is required';\n      if (!formData.incidentDate) newErrors.incidentDate = 'Incident date is required';\n      \n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      if (!validateForm()) return;\n\n      setIsSubmitting(true);\n      try {\n        const response = await fetch('/api/cases', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n\n        if (response.ok) {\n          await fetchCases(); // Refresh cases list\n          goBack(); // Return to cases list\n        } else {\n          const errorData = await response.json();\n          setErrors({ submit: errorData.message || 'Failed to create case' });\n        }\n      } catch (error) {\n        setErrors({ submit: 'Network error. Please try again.' });\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    return (\n      <div className=\"case-form-container\">\n        <div className=\"form-header\">\n          <button className=\"back-btn\" onClick={goBack} data-testid=\"button-back\">\n            <ArrowLeft size={20} />\n            Back to Cases\n          </button>\n          <h1>Create New Case</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"case-creation-form\">\n          <div className=\"form-grid\">\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Case Title *</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleInputChange}\n                placeholder=\"Enter case title\"\n                className={errors.title ? 'error' : ''}\n                data-testid=\"input-title\"\n              />\n              {errors.title && <span className=\"error-text\">{errors.title}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"type\">Case Type</label>\n              <select\n                id=\"type\"\n                name=\"type\"\n                value={formData.type}\n                onChange={handleInputChange}\n                data-testid=\"select-type\"\n              >\n                {caseTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"priority\">Priority</label>\n              <select\n                id=\"priority\"\n                name=\"priority\"\n                value={formData.priority}\n                onChange={handleInputChange}\n                data-testid=\"select-priority\"\n              >\n                {casePriorities.map(priority => (\n                  <option key={priority} value={priority}>{priority}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status</label>\n              <select\n                id=\"status\"\n                name=\"status\"\n                value={formData.status}\n                onChange={handleInputChange}\n                data-testid=\"select-status\"\n              >\n                {caseStatuses.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"assignedOfficer\">Assigned Officer</label>\n              <input\n                type=\"text\"\n                id=\"assignedOfficer\"\n                name=\"assignedOfficer\"\n                value={formData.assignedOfficer}\n                onChange={handleInputChange}\n                placeholder=\"Enter officer name (optional)\"\n                data-testid=\"input-officer\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"incidentDate\">Incident Date *</label>\n              <input\n                type=\"date\"\n                id=\"incidentDate\"\n                name=\"incidentDate\"\n                value={formData.incidentDate}\n                onChange={handleInputChange}\n                className={errors.incidentDate ? 'error' : ''}\n                data-testid=\"input-incident-date\"\n              />\n              {errors.incidentDate && <span className=\"error-text\">{errors.incidentDate}</span>}\n            </div>\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"location\">Location *</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              name=\"location\"\n              value={formData.location}\n              onChange={handleInputChange}\n              placeholder=\"Enter incident location\"\n              className={errors.location ? 'error' : ''}\n              data-testid=\"input-location\"\n            />\n            {errors.location && <span className=\"error-text\">{errors.location}</span>}\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"description\">Description *</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              placeholder=\"Enter detailed case description\"\n              rows=\"6\"\n              className={errors.description ? 'error' : ''}\n              data-testid=\"textarea-description\"\n            />\n            {errors.description && <span className=\"error-text\">{errors.description}</span>}\n          </div>\n\n          {errors.submit && (\n            <div className=\"submit-error\">\n              {errors.submit}\n            </div>\n          )}\n\n          <div className=\"form-actions\">\n            <button \n              type=\"button\" \n              className=\"cancel-btn\" \n              onClick={goBack}\n              disabled={isSubmitting}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"submit-btn\" \n              disabled={isSubmitting}\n              data-testid=\"button-submit-case\"\n            >\n              {isSubmitting ? 'Creating...' : 'Create Case'}\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  };\n\n  // Edit Case Form\n  const EditCaseForm = () => {\n    const [formData, setFormData] = useState({\n      title: selectedCase?.title || '',\n      description: selectedCase?.description || '',\n      type: selectedCase?.type || 'Theft',\n      priority: selectedCase?.priority || 'Medium',\n      status: selectedCase?.status || 'Open',\n      location: selectedCase?.location || '',\n      assignedOfficer: selectedCase?.assignedOfficer || '',\n      incidentDate: selectedCase?.incidentDate ? new Date(selectedCase.incidentDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0]\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const caseTypes = ['Theft', 'Assault', 'Vandalism', 'Fraud', 'Burglary', 'Traffic', 'Domestic', 'Drug', 'Other'];\n\n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setFormData(prev => ({ ...prev, [name]: value }));\n      // Clear error when user starts typing\n      if (errors[name]) {\n        setErrors(prev => ({ ...prev, [name]: '' }));\n      }\n    };\n\n    const validateForm = () => {\n      const newErrors = {};\n      if (!formData.title.trim()) newErrors.title = 'Title is required';\n      if (!formData.description.trim()) newErrors.description = 'Description is required';\n      if (!formData.location.trim()) newErrors.location = 'Location is required';\n      if (!formData.incidentDate) newErrors.incidentDate = 'Incident date is required';\n      \n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      if (!validateForm()) return;\n\n      setIsSubmitting(true);\n      try {\n        const response = await fetch(`/api/cases/${selectedCase.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n\n        if (response.ok) {\n          const updatedCaseData = await response.json();\n          // Update the selected case with new data\n          setSelectedCase(updatedCaseData.case);\n          // Refresh cases list\n          await fetchCases();\n          // Navigate back to detail view\n          navigateToView('detail', updatedCaseData.case);\n        } else {\n          const errorData = await response.json();\n          setErrors({ submit: errorData.message || 'Failed to update case' });\n        }\n      } catch (error) {\n        setErrors({ submit: 'Network error. Please try again.' });\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    return (\n      <div className=\"case-form-container\">\n        <div className=\"form-header\">\n          <button className=\"back-btn\" onClick={goBack} data-testid=\"button-back\">\n            <ArrowLeft size={20} />\n            Back to Case Details\n          </button>\n          <h1>Edit Case #{selectedCase?.caseNumber}</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"case-creation-form\">\n          <div className=\"form-grid\">\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Case Title *</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleInputChange}\n                placeholder=\"Enter case title\"\n                className={errors.title ? 'error' : ''}\n                data-testid=\"input-title\"\n              />\n              {errors.title && <span className=\"error-text\">{errors.title}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"type\">Case Type</label>\n              <select\n                id=\"type\"\n                name=\"type\"\n                value={formData.type}\n                onChange={handleInputChange}\n                data-testid=\"select-type\"\n              >\n                {caseTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"priority\">Priority</label>\n              <select\n                id=\"priority\"\n                name=\"priority\"\n                value={formData.priority}\n                onChange={handleInputChange}\n                data-testid=\"select-priority\"\n              >\n                {casePriorities.map(priority => (\n                  <option key={priority} value={priority}>{priority}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status</label>\n              <select\n                id=\"status\"\n                name=\"status\"\n                value={formData.status}\n                onChange={handleInputChange}\n                data-testid=\"select-status\"\n              >\n                {caseStatuses.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"assignedOfficer\">Assigned Officer</label>\n              <input\n                type=\"text\"\n                id=\"assignedOfficer\"\n                name=\"assignedOfficer\"\n                value={formData.assignedOfficer}\n                onChange={handleInputChange}\n                placeholder=\"Enter officer name (optional)\"\n                data-testid=\"input-officer\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"incidentDate\">Incident Date *</label>\n              <input\n                type=\"date\"\n                id=\"incidentDate\"\n                name=\"incidentDate\"\n                value={formData.incidentDate}\n                onChange={handleInputChange}\n                className={errors.incidentDate ? 'error' : ''}\n                data-testid=\"input-incident-date\"\n              />\n              {errors.incidentDate && <span className=\"error-text\">{errors.incidentDate}</span>}\n            </div>\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"location\">Location *</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              name=\"location\"\n              value={formData.location}\n              onChange={handleInputChange}\n              placeholder=\"Enter incident location\"\n              className={errors.location ? 'error' : ''}\n              data-testid=\"input-location\"\n            />\n            {errors.location && <span className=\"error-text\">{errors.location}</span>}\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"description\">Description *</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              placeholder=\"Enter detailed case description\"\n              rows=\"6\"\n              className={errors.description ? 'error' : ''}\n              data-testid=\"textarea-description\"\n            />\n            {errors.description && <span className=\"error-text\">{errors.description}</span>}\n          </div>\n\n          {errors.submit && (\n            <div className=\"submit-error\">\n              {errors.submit}\n            </div>\n          )}\n\n          <div className=\"form-actions\">\n            <button \n              type=\"button\" \n              className=\"cancel-btn\" \n              onClick={goBack}\n              disabled={isSubmitting}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"submit-btn\" \n              disabled={isSubmitting}\n              data-testid=\"button-submit-case\"\n            >\n              {isSubmitting ? 'Updating...' : 'Update Case'}\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  };\n\n  // Case Detail View\n  const CaseDetail = () => (\n    <div className=\"case-detail\">\n      <div className=\"detail-header\">\n        <button className=\"back-btn\" onClick={goBack}>\n          <ArrowLeft size={20} />\n          Back to Cases\n        </button>\n        <div className=\"detail-actions\">\n          <button onClick={() => navigateToView('edit', selectedCase)}>\n            <Edit2 size={16} />\n            Edit Case\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"case-info-panel\">\n        <div className=\"panel-header\">\n          <h1>Case #{selectedCase?.caseNumber}</h1>\n          <div className=\"case-badges\">\n            <span className={`priority-badge ${getPriorityClass(selectedCase?.priority)}`}>\n              {selectedCase?.priority} Priority\n            </span>\n            <span className=\"status-badge\">\n              {getStatusIcon(selectedCase?.status)}\n              {selectedCase?.status}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"detail-grid\">\n          <div className=\"detail-section\">\n            <h3>Case Information</h3>\n            <div className=\"info-grid\">\n              <div><strong>Title:</strong> {selectedCase?.title}</div>\n              <div><strong>Type:</strong> {selectedCase?.type}</div>\n              <div><strong>Incident Date:</strong> {new Date(selectedCase?.incidentDate).toLocaleString()}</div>\n              <div><strong>Reported Date:</strong> {new Date(selectedCase?.reportedDate || selectedCase?.createdAt).toLocaleString()}</div>\n              <div><strong>Location:</strong> {selectedCase?.location}</div>\n              <div><strong>Assigned Officer:</strong> {selectedCase?.assignedOfficer || 'Unassigned'}</div>\n            </div>\n          </div>\n\n          <div className=\"detail-section\">\n            <h3>Description</h3>\n            <p className=\"case-description\">{selectedCase?.description}</p>\n          </div>\n\n          {selectedCase?.evidence && (\n            <div className=\"detail-section\">\n              <h3>Evidence</h3>\n              <div className=\"evidence-list\">\n                {/* Evidence items would be listed here */}\n                <p>Evidence management coming soon...</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"detail-section\">\n            <h3>Activity Log</h3>\n            <div className=\"activity-log\">\n              <div className=\"activity-item\">\n                <span className=\"activity-time\">{new Date(selectedCase?.createdAt).toLocaleString()}</span>\n                <span className=\"activity-text\">Case created</span>\n              </div>\n              {selectedCase?.updatedAt !== selectedCase?.createdAt && (\n                <div className=\"activity-item\">\n                  <span className=\"activity-time\">{new Date(selectedCase?.updatedAt).toLocaleString()}</span>\n                  <span className=\"activity-text\">Case updated</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Render appropriate view based on currentView state\n  switch (currentView) {\n    case 'detail':\n      return <CaseDetail />;\n    case 'create':\n      return <CreateCaseForm />;\n    case 'edit':\n      return <EditCaseForm />;\n    default:\n      return <CasesList />;\n  }\n};\n\nexport default CasesManager;","size_bytes":27363},"client/src/components/Dashboard/Dashboard.css":{"content":".dashboard {\n  padding: 30px;\n  max-width: 1400px;\n}\n\n.dashboard-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n}\n\n.dashboard-header h1 {\n  font-size: 28px;\n  font-weight: 600;\n  color: #ffffff;\n  margin-bottom: 5px;\n}\n\n.dashboard-header p {\n  color: #7f8c8d;\n  font-size: 14px;\n}\n\n.header-actions {\n  position: relative;\n}\n\n.notification-badge {\n  background-color: #e74c3c;\n  color: white;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.dashboard-content {\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n}\n\n.stats-section h2,\n.actions-section h2,\n.updates-section h2 {\n  font-size: 20px;\n  font-weight: 600;\n  color: #ffffff;\n  margin-bottom: 20px;\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  gap: 20px;\n}\n\n.stat-card {\n  background-color: #2c3e50;\n  border-radius: 12px;\n  padding: 24px;\n  border-left: 4px solid;\n  transition: transform 0.2s ease;\n}\n\n.stat-card:hover {\n  transform: translateY(-2px);\n}\n\n.stat-card.orange { border-left-color: #f39c12; }\n.stat-card.blue { border-left-color: #3498db; }\n.stat-card.green { border-left-color: #27ae60; }\n.stat-card.red { border-left-color: #e74c3c; }\n\n.stat-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 12px;\n}\n\n.stat-icon {\n  width: 24px;\n  height: 24px;\n  color: #7f8c8d;\n}\n\n.stat-value {\n  font-size: 32px;\n  font-weight: 700;\n  color: #ffffff;\n}\n\n.stat-info h3 {\n  font-size: 16px;\n  font-weight: 500;\n  color: #bdc3c7;\n  margin-bottom: 4px;\n}\n\n.stat-info p {\n  font-size: 12px;\n  color: #27ae60;\n}\n\n.actions-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 16px;\n}\n\n.action-card {\n  background-color: #34495e;\n  border-radius: 8px;\n  padding: 20px;\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.action-card:hover {\n  background-color: #3c5a78;\n  transform: translateY(-1px);\n}\n\n.action-icon {\n  width: 24px;\n  height: 24px;\n  color: #3498db;\n}\n\n.action-info h3 {\n  font-size: 16px;\n  font-weight: 500;\n  color: #ffffff;\n  margin-bottom: 4px;\n}\n\n.action-info p {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.updates-table {\n  width: 100%;\n  background-color: #34495e;\n  border-radius: 8px;\n  overflow: hidden;\n  border-collapse: collapse;\n}\n\n.updates-table thead {\n  background-color: #2c3e50;\n}\n\n.updates-table th {\n  padding: 16px 20px;\n  text-align: left;\n  font-weight: 600;\n  font-size: 14px;\n  color: #bdc3c7;\n  border-bottom: 1px solid #4a5f7a;\n}\n\n.updates-table td {\n  padding: 16px 20px;\n  font-size: 14px;\n  color: #ffffff;\n  border-bottom: 1px solid #4a5f7a;\n}\n\n.updates-table tbody tr {\n  transition: background-color 0.2s ease;\n}\n\n.updates-table tbody tr:hover {\n  background-color: #2c3e50;\n}\n\n.updates-table tbody tr:last-child td {\n  border-bottom: none;\n}\n\n.case-link {\n  color: #3498db;\n  cursor: pointer;\n}\n\n.case-link:hover {\n  text-decoration: underline;\n}\n\n.priority {\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n}\n\n.priority.high {\n  background-color: #e74c3c;\n  color: white;\n}\n\n.priority.medium {\n  background-color: #f39c12;\n  color: white;\n}\n\n.priority.low {\n  background-color: #27ae60;\n  color: white;\n}","size_bytes":3440},"client/src/components/Dashboard/Dashboard.jsx":{"content":"import React from 'react';\nimport { \n  Clock, \n  CheckCircle, \n  AlertTriangle, \n  Plus,\n  Users,\n  FileText,\n  Shield,\n  TrendingUp\n} from 'lucide-react';\nimport './Dashboard.css';\n\nconst Dashboard = ({ onAddCaseClick, onLicensePlateClick, cases, setActiveSection }) => {\n  const openCases = cases.filter(c => c.status === 'Open').length;\n  const inProgressCases = cases.filter(c => c.status === 'In Progress').length;\n  const closedCases = cases.filter(c => c.status === 'Closed').length;\n  const priorityCases = cases.filter(c => c.priority === 'High').length;\n\n  const stats = [\n    { title: 'Open Cases', value: openCases.toString(), change: '+2 from last week', color: 'orange', icon: FileText, onClick: () => setActiveSection?.('cases') },\n    { title: 'In Progress', value: inProgressCases.toString(), change: '+1 from last week', color: 'blue', icon: Clock, onClick: () => setActiveSection?.('cases') },\n    { title: 'Closed Cases', value: closedCases.toString(), change: '+5 from last week', color: 'green', icon: CheckCircle, onClick: () => setActiveSection?.('cases') },\n    { title: 'Priority Cases', value: priorityCases.toString(), change: '+1 from last week', color: 'red', icon: AlertTriangle, onClick: () => setActiveSection?.('cases') }\n  ];\n\n  const quickActions = [\n    { title: 'Add Case', subtitle: 'Create new case file', icon: Plus, color: 'blue', onClick: onAddCaseClick },\n    { title: 'New Arrests', subtitle: '3 pending entries', icon: Users, color: 'red' },\n    { title: 'Geofile Access', subtitle: 'Location tracking', icon: Shield, color: 'green' },\n    { title: 'License Plate', subtitle: 'Vehicle lookup', icon: FileText, color: 'purple', onClick: onLicensePlateClick },\n    { title: 'Evidence Log', subtitle: 'Upload evidence', icon: TrendingUp, color: 'teal' },\n    { title: 'Generate Report', subtitle: 'Create case report', icon: FileText, color: 'indigo' }\n  ];\n\n  const recentUpdates = [\n    { id: 'UPD003', time: '2024-01-15 14:30', officer: 'Officer Johnson', caseId: 'CASE-2024-001', description: 'Evidence submitted for forensic analysis', priority: 'HIGH' },\n    { id: 'UPD002', time: '2024-01-15 12:15', officer: 'Officer Davis', caseId: 'CASE-2024-002', description: 'Witness statement recorded', priority: 'MEDIUM' },\n    { id: 'UPD001', time: '2024-01-15 09:45', officer: 'Officer Smith', caseId: 'CASE-2024-003', description: 'Suspect interview completed', priority: 'HIGH' },\n    { id: 'UPD004', time: '2024-01-14 16:20', officer: 'Officer Wilson', caseId: 'CASE-2024-004', description: 'Crime scene photos uploaded', priority: 'LOW' },\n    { id: 'UPD005', time: '2024-01-14 11:30', officer: 'Officer Brown', caseId: 'CASE-2024-005', description: 'Background check completed', priority: 'MEDIUM' }\n  ];\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <div>\n          <h1>Welcome, Officer Smith</h1>\n          <p>Monday, July 28, 2025</p>\n        </div>\n        <div className=\"header-actions\">\n          <div className=\"notification-badge\">\n            <span>3</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"dashboard-content\">\n        <section className=\"stats-section\">\n          <h2>Case Overview</h2>\n          <div className=\"stats-grid\">\n            {stats.map((stat, index) => {\n              const IconComponent = stat.icon;\n              return (\n                <div \n                  key={index} \n                  className={`stat-card ${stat.color}`}\n                  onClick={stat.onClick}\n                  style={{ cursor: stat.onClick ? 'pointer' : 'default' }}\n                  data-testid={`stat-card-${stat.title.toLowerCase().replace(' ', '-')}`}\n                >\n                  <div className=\"stat-header\">\n                    <IconComponent className=\"stat-icon\" />\n                    <span className=\"stat-value\">{stat.value}</span>\n                  </div>\n                  <div className=\"stat-info\">\n                    <h3>{stat.title}</h3>\n                    <p>{stat.change}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </section>\n\n        <section className=\"actions-section\">\n          <h2>Quick Actions</h2>\n          <div className=\"actions-grid\">\n            {quickActions.map((action, index) => {\n              const IconComponent = action.icon;\n              return (\n                <div \n                  key={index} \n                  className={`action-card ${action.color}`}\n                  onClick={action.onClick}\n                  style={{ cursor: action.onClick ? 'pointer' : 'default' }}\n                >\n                  <IconComponent className=\"action-icon\" />\n                  <div className=\"action-info\">\n                    <h3>{action.title}</h3>\n                    <p>{action.subtitle}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </section>\n\n        <section className=\"updates-section\">\n          <h2>Recent Updates</h2>\n          <table className=\"updates-table\">\n            <thead>\n              <tr>\n                <th>Entry ID</th>\n                <th>Date & Time</th>\n                <th>Officer</th>\n                <th>Case ID</th>\n                <th>Description</th>\n                <th>Priority</th>\n              </tr>\n            </thead>\n            <tbody>\n              {recentUpdates.map((update) => (\n                <tr key={update.id}>\n                  <td>{update.id}</td>\n                  <td>{update.time}</td>\n                  <td>{update.officer}</td>\n                  <td className=\"case-link\">{update.caseId}</td>\n                  <td>{update.description}</td>\n                  <td>\n                    <span className={`priority ${update.priority.toLowerCase()}`}>\n                      {update.priority}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":6079},"client/src/components/LicensePlateModal/LicensePlateModal.css":{"content":".license-plate-modal {\n  max-width: 900px;\n  max-height: 90vh;\n  width: 90%;\n  background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);\n  transition: all 0.3s ease;\n}\n\n.license-plate-modal.maximized {\n  max-width: 95vw;\n  max-height: 95vh;\n  width: 95vw;\n  height: 95vh;\n}\n\n.license-plate-modal.minimized {\n  max-width: 400px;\n  max-height: 300px;\n  width: 400px;\n  height: 300px;\n  overflow: hidden;\n}\n\n.license-plate-modal.minimized .modal-tabs,\n.license-plate-modal.minimized .plate-form,\n.license-plate-modal.minimized .search-section {\n  display: none;\n}\n\n.modal-header {\n  background: linear-gradient(135deg, #229954 0%, #27ae60 100%);\n  border-bottom: 2px solid #2ecc71;\n}\n\n.modal-header h2::before {\n  content: \"🚗\";\n  font-size: 28px;\n}\n\n.modal-controls {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.minimize-btn,\n.maximize-btn {\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  color: #ffffff;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.minimize-btn:hover,\n.maximize-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n  transform: scale(1.1);\n}\n\n.close-btn {\n  background: rgba(231, 76, 60, 0.8);\n  color: #ffffff;\n}\n\n.close-btn:hover {\n  background: rgba(231, 76, 60, 1);\n  transform: scale(1.1);\n}\n\n.modal-tabs {\n  display: flex;\n  border-bottom: 1px solid #34495e;\n  margin-bottom: 24px;\n  background: rgba(46, 204, 113, 0.1);\n}\n\n.tab-btn {\n  flex: 1;\n  padding: 12px 24px;\n  background: none;\n  border: none;\n  color: #7f8c8d;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border-bottom: 2px solid transparent;\n  position: relative;\n}\n\n.tab-btn:hover {\n  color: #bdc3c7;\n  background: rgba(46, 204, 113, 0.1);\n}\n\n.tab-btn.active {\n  color: #2ecc71;\n  border-bottom-color: #2ecc71;\n  background: rgba(46, 204, 113, 0.2);\n}\n\n.plate-form {\n  padding: 24px;\n  background: rgba(46, 204, 113, 0.1);\n  margin: 0;\n  backdrop-filter: blur(10px);\n}\n\n.image-upload {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.upload-btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background-color: #34495e;\n  color: #bdc3c7;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  width: fit-content;\n}\n\n.upload-btn:hover {\n  background-color: #4a5f7a;\n  color: #ffffff;\n}\n\n.image-preview {\n  width: 120px;\n  height: 120px;\n  border-radius: 8px;\n  overflow: hidden;\n  border: 2px solid #34495e;\n}\n\n.image-preview img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.search-section {\n  padding: 24px;\n  background: rgba(46, 204, 113, 0.1);\n  margin: 0;\n  backdrop-filter: blur(10px);\n}\n\n.search-bar {\n  display: flex;\n  gap: 12px;\n  margin-bottom: 24px;\n}\n\n.search-input {\n  flex: 1;\n  padding: 12px 16px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 14px;\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: #3498db;\n}\n\n.search-input::placeholder {\n  color: #7f8c8d;\n}\n\n.search-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.search-btn:hover {\n  background-color: #2980b9;\n}\n\n.search-results {\n  margin-top: 24px;\n}\n\n.no-results {\n  text-align: center;\n  padding: 40px 20px;\n  color: #7f8c8d;\n}\n\n.no-results svg {\n  color: #e74c3c;\n  margin-bottom: 16px;\n}\n\n.no-results h3 {\n  color: #ffffff;\n  margin-bottom: 8px;\n}\n\n.result-card {\n  background-color: #34495e;\n  border-radius: 12px;\n  padding: 24px;\n  border: 1px solid #4a5f7a;\n}\n\n.result-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 16px;\n  border-bottom: 1px solid #4a5f7a;\n}\n\n.result-header h3 {\n  color: #ffffff;\n  font-size: 18px;\n  margin: 0;\n}\n\n.plate-number {\n  background-color: #3498db;\n  color: white;\n  padding: 6px 12px;\n  border-radius: 6px;\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.result-content {\n  display: grid;\n  grid-template-columns: 1fr auto;\n  gap: 24px;\n  align-items: start;\n}\n\n.owner-info {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.info-group {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.info-group label {\n  font-size: 12px;\n  color: #7f8c8d;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.info-group span {\n  color: #ffffff;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.owner-image {\n  width: 120px;\n  height: 120px;\n  border-radius: 8px;\n  overflow: hidden;\n  border: 2px solid #4a5f7a;\n  cursor: pointer;\n  transition: transform 0.2s ease;\n}\n\n.owner-image:hover {\n  transform: scale(1.05);\n}\n\n.owner-image img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.image-modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.9);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000;\n  padding: 20px;\n}\n\n.image-modal-content {\n  position: relative;\n  max-width: 90vw;\n  max-height: 90vh;\n  background-color: #2c3e50;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\n}\n\n.image-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 20px;\n  background-color: #34495e;\n  border-bottom: 1px solid #4a5f7a;\n}\n\n.image-modal-header h3 {\n  color: #ffffff;\n  margin: 0;\n  font-size: 18px;\n}\n\n.image-close-btn {\n  background: none;\n  border: none;\n  color: #7f8c8d;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n}\n\n.image-close-btn:hover {\n  background-color: #4a5f7a;\n  color: #ffffff;\n}\n\n.enlarged-image {\n  width: 100%;\n  height: auto;\n  max-height: 70vh;\n  object-fit: contain;\n  display: block;\n}\n\n.image-info {\n  padding: 16px 20px;\n  background-color: #2c3e50;\n  color: #bdc3c7;\n  font-size: 14px;\n}\n\n@media (max-width: 768px) {\n  .license-plate-modal {\n    margin: 10px;\n    max-width: none;\n    width: 95%;\n  }\n  \n  .result-content {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n  \n  .owner-image {\n    justify-self: center;\n  }\n  \n  .search-bar {\n    flex-direction: column;\n  }\n  \n  .image-modal-content {\n    max-width: 95vw;\n    max-height: 95vh;\n  }\n  \n  .enlarged-image {\n    max-height: 60vh;\n  }\n}","size_bytes":6562},"client/src/components/LicensePlateModal/LicensePlateModal.jsx":{"content":"import React, { useState } from 'react';\nimport { X, Save, AlertCircle, Upload, Search, Minimize2, Maximize2, Square } from 'lucide-react';\nimport './LicensePlateModal.css';\n\nconst LicensePlateModal = ({ isOpen, onClose, onAddPlate, onSearchPlate, plates }) => {\n  const [isMaximized, setIsMaximized] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [activeTab, setActiveTab] = useState('add');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResult, setSearchResult] = useState(null);\n  const [enlargedImage, setEnlargedImage] = useState(null);\n  const [formData, setFormData] = useState({\n    plateNumber: '',\n    ownerName: '',\n    fatherName: '',\n    motherName: '',\n    idNumber: '',\n    passportNumber: '',\n    ownerImage: null\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setFormData(prev => ({\n          ...prev,\n          ownerImage: e.target.result\n        }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.plateNumber.trim()) {\n      newErrors.plateNumber = 'License plate number is required';\n    }\n    \n    if (!formData.ownerName.trim()) {\n      newErrors.ownerName = 'Owner name is required';\n    }\n    \n    if (!formData.fatherName.trim()) {\n      newErrors.fatherName = 'Father name is required';\n    }\n    \n    if (!formData.motherName.trim()) {\n      newErrors.motherName = 'Mother name is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      const newPlate = {\n        id: `LP-${Date.now()}`,\n        plateNumber: formData.plateNumber.toUpperCase(),\n        ownerName: formData.ownerName,\n        fatherName: formData.fatherName,\n        motherName: formData.motherName,\n        idNumber: formData.idNumber,\n        passportNumber: formData.passportNumber,\n        ownerImage: formData.ownerImage,\n        dateAdded: new Date().toISOString().split('T')[0]\n      };\n      \n      onAddPlate(newPlate);\n      \n      // Reset form\n      setFormData({\n        plateNumber: '',\n        ownerName: '',\n        fatherName: '',\n        motherName: '',\n        idNumber: '',\n        passportNumber: '',\n        ownerImage: null\n      });\n      \n      onClose();\n    }\n  };\n\n  const handleSearch = () => {\n    if (searchTerm.trim()) {\n      const result = plates.find(plate => \n        plate.plateNumber.toLowerCase() === searchTerm.toLowerCase()\n      );\n      setSearchResult(result || 'not_found');\n    }\n  };\n\n  const handleClose = () => {\n    setFormData({\n      plateNumber: '',\n      ownerName: '',\n      fatherName: '',\n      motherName: '',\n      idNumber: '',\n      passportNumber: '',\n      ownerImage: null\n    });\n    setErrors({});\n    setSearchTerm('');\n    setSearchResult(null);\n    setEnlargedImage(null);\n    setActiveTab('add');\n    onClose();\n  };\n\n  const handleMaximize = () => {\n    setIsMaximized(!isMaximized);\n    setIsMinimized(false);\n  };\n\n  const handleMinimize = () => {\n    setIsMinimized(!isMinimized);\n    setIsMaximized(false);\n  };\n\n  if (!isOpen) return null;\n\n  const modalClass = `modal-content license-plate-modal ${isMaximized ? 'maximized' : ''} ${isMinimized ? 'minimized' : ''}`;\n\n  return (\n    <div className=\"modal-overlay\" onClick={handleClose}>\n      <div className={modalClass} onClick={(e) => e.stopPropagation()}>\n        <div className=\"modal-header\">\n          <h2>License Plate Management</h2>\n          <div className=\"modal-controls\">\n            <button className=\"minimize-btn\" onClick={handleMinimize}>\n              <Minimize2 size={16} />\n            </button>\n            <button className=\"maximize-btn\" onClick={handleMaximize}>\n              {isMaximized ? <Square size={16} /> : <Maximize2 size={16} />}\n            </button>\n            <button className=\"close-btn\" onClick={handleClose}>\n              <X size={20} />\n            </button>\n          </div>\n        </div>\n        \n        {!isMinimized && (\n          <>\n            <div className=\"modal-tabs\">\n          <button \n            className={`tab-btn ${activeTab === 'add' ? 'active' : ''}`}\n            onClick={() => setActiveTab('add')}\n          >\n            Add Plate\n          </button>\n          <button \n            className={`tab-btn ${activeTab === 'search' ? 'active' : ''}`}\n            onClick={() => setActiveTab('search')}\n          >\n            Search Plate\n          </button>\n        </div>\n          </>\n        )}\n\n        {!isMinimized && activeTab === 'add' && (\n          <form onSubmit={handleSubmit} className=\"plate-form\">\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"plateNumber\">License Plate Number *</label>\n                <input\n                  type=\"text\"\n                  id=\"plateNumber\"\n                  name=\"plateNumber\"\n                  value={formData.plateNumber}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter plate number\"\n                  className={errors.plateNumber ? 'error' : ''}\n                />\n                {errors.plateNumber && (\n                  <span className=\"error-message\">\n                    <AlertCircle size={14} />\n                    {errors.plateNumber}\n                  </span>\n                )}\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"ownerName\">Owner Name *</label>\n                <input\n                  type=\"text\"\n                  id=\"ownerName\"\n                  name=\"ownerName\"\n                  value={formData.ownerName}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter owner name\"\n                  className={errors.ownerName ? 'error' : ''}\n                />\n                {errors.ownerName && (\n                  <span className=\"error-message\">\n                    <AlertCircle size={14} />\n                    {errors.ownerName}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"fatherName\">Father Name *</label>\n                <input\n                  type=\"text\"\n                  id=\"fatherName\"\n                  name=\"fatherName\"\n                  value={formData.fatherName}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter father name\"\n                  className={errors.fatherName ? 'error' : ''}\n                />\n                {errors.fatherName && (\n                  <span className=\"error-message\">\n                    <AlertCircle size={14} />\n                    {errors.fatherName}\n                  </span>\n                )}\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"motherName\">Mother Name *</label>\n                <input\n                  type=\"text\"\n                  id=\"motherName\"\n                  name=\"motherName\"\n                  value={formData.motherName}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter mother name\"\n                  className={errors.motherName ? 'error' : ''}\n                />\n                {errors.motherName && (\n                  <span className=\"error-message\">\n                    <AlertCircle size={14} />\n                    {errors.motherName}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"idNumber\">ID Number (Optional)</label>\n                <input\n                  type=\"text\"\n                  id=\"idNumber\"\n                  name=\"idNumber\"\n                  value={formData.idNumber}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter ID number\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"passportNumber\">Passport Number (Optional)</label>\n                <input\n                  type=\"text\"\n                  id=\"passportNumber\"\n                  name=\"passportNumber\"\n                  value={formData.passportNumber}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter passport number\"\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"ownerImage\">Owner Image</label>\n              <div className=\"image-upload\">\n                <input\n                  type=\"file\"\n                  id=\"ownerImage\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                  style={{ display: 'none' }}\n                />\n                <label htmlFor=\"ownerImage\" className=\"upload-btn\">\n                  <Upload size={16} />\n                  Upload Image\n                </label>\n                {formData.ownerImage && (\n                  <div className=\"image-preview\">\n                    <img src={formData.ownerImage} alt=\"Owner\" />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"form-actions\">\n              <button type=\"button\" className=\"cancel-btn\" onClick={handleClose}>\n                Cancel\n              </button>\n              <button type=\"submit\" className=\"submit-btn\">\n                <Save size={16} />\n                Add Plate\n              </button>\n            </div>\n          </form>\n        )}\n\n        {!isMinimized && activeTab === 'search' && (\n          <div className=\"search-section\">\n            <div className=\"search-bar\">\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                placeholder=\"Enter license plate number\"\n                className=\"search-input\"\n              />\n              <button onClick={handleSearch} className=\"search-btn\">\n                <Search size={16} />\n                Search\n              </button>\n            </div>\n\n            {searchResult && (\n              <div className=\"search-results\">\n                {searchResult === 'not_found' ? (\n                  <div className=\"no-results\">\n                    <AlertCircle size={48} />\n                    <h3>No Results Found</h3>\n                    <p>No vehicle found with plate number: {searchTerm}</p>\n                  </div>\n                ) : (\n                  <div className=\"result-card\">\n                    <div className=\"result-header\">\n                      <h3>Vehicle Information</h3>\n                      <span className=\"plate-number\">{searchResult.plateNumber}</span>\n                    </div>\n                    <div className=\"result-content\">\n                      <div className=\"owner-info\">\n                        <div className=\"info-group\">\n                          <label>Owner Name:</label>\n                          <span>{searchResult.ownerName}</span>\n                        </div>\n                        <div className=\"info-group\">\n                          <label>Father Name:</label>\n                          <span>{searchResult.fatherName}</span>\n                        </div>\n                        <div className=\"info-group\">\n                          <label>Mother Name:</label>\n                          <span>{searchResult.motherName}</span>\n                        </div>\n                        {searchResult.idNumber && (\n                          <div className=\"info-group\">\n                            <label>ID Number:</label>\n                            <span>{searchResult.idNumber}</span>\n                          </div>\n                        )}\n                        {searchResult.passportNumber && (\n                          <div className=\"info-group\">\n                            <label>Passport Number:</label>\n                            <span>{searchResult.passportNumber}</span>\n                          </div>\n                        )}\n                        <div className=\"info-group\">\n                          <label>Date Added:</label>\n                          <span>{searchResult.dateAdded}</span>\n                        </div>\n                      </div>\n                      {searchResult.ownerImage && (\n                        <div className=\"owner-image\">\n                          <img \n                            src={searchResult.ownerImage} \n                            alt=\"Owner\" \n                            onClick={() => setEnlargedImage({\n                              src: searchResult.ownerImage,\n                              name: searchResult.ownerName,\n                              plate: searchResult.plateNumber\n                            })}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n      \n      {enlargedImage && (\n        <div className=\"image-modal-overlay\" onClick={() => setEnlargedImage(null)}>\n          <div className=\"image-modal-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"image-modal-header\">\n              <h3>{enlargedImage.name} - {enlargedImage.plate}</h3>\n              <button className=\"image-close-btn\" onClick={() => setEnlargedImage(null)}>\n                <X size={20} />\n              </button>\n            </div>\n            <img \n              src={enlargedImage.src} \n              alt=\"Owner\" \n              className=\"enlarged-image\"\n            />\n            <div className=\"image-info\">\n              Click outside or press the X button to close\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LicensePlateModal;","size_bytes":14499},"client/src/components/OccurrenceBook/OccurrenceBook.css":{"content":".occurrence-book {\n  padding: 30px;\n  max-width: 1400px;\n  background: linear-gradient(135deg, #8e44ad 0%, #3498db 100%);\n  border-radius: 16px;\n  margin: 20px;\n  box-shadow: 0 10px 30px rgba(142, 68, 173, 0.3);\n}\n\n.ob-header {\n  margin-bottom: 30px;\n  position: relative;\n  padding: 20px 0;\n  border-bottom: 2px solid #9b59b6;\n}\n\n.ob-header h1 {\n  font-size: 28px;\n  font-weight: 600;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.ob-header h1::before {\n  content: \"📋\";\n  font-size: 32px;\n}\n\n.ob-controls {\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  margin-bottom: 30px;\n  flex-wrap: wrap;\n  background: rgba(155, 89, 182, 0.2);\n  padding: 20px;\n  border-radius: 12px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(155, 89, 182, 0.3);\n}\n\n.search-bar {\n  position: relative;\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-bar::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(45deg, rgba(155, 89, 182, 0.1), rgba(52, 152, 219, 0.1));\n  border-radius: 8px;\n  z-index: -1;\n}\n\n.search-icon {\n  position: absolute;\n  left: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  width: 18px;\n  height: 18px;\n  color: #9b59b6;\n}\n\n.search-bar input {\n  width: 100%;\n  padding: 12px 12px 12px 40px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 14px;\n  transition: all 0.3s ease;\n}\n\n.search-bar input::placeholder {\n  color: #7f8c8d;\n}\n\n.search-bar input:focus {\n  outline: none;\n  border-color: #9b59b6;\n  box-shadow: 0 0 15px rgba(155, 89, 182, 0.3);\n  transform: translateY(-2px);\n}\n\n.filters {\n  display: flex;\n  gap: 12px;\n}\n\n.filter-select {\n  padding: 12px 16px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 14px;\n  cursor: pointer;\n  min-width: 120px;\n  transition: all 0.3s ease;\n}\n\n.filter-select:focus {\n  outline: none;\n  border-color: #9b59b6;\n  box-shadow: 0 0 10px rgba(155, 89, 182, 0.2);\n}\n\n.add-ob-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background: linear-gradient(135deg, #9b59b6, #8e44ad);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  box-shadow: 0 4px 15px rgba(155, 89, 182, 0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.add-ob-btn:hover {\n  background: linear-gradient(135deg, #8e44ad, #7d3c98);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(155, 89, 182, 0.4);\n}\n\n.add-ob-btn::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.add-ob-btn:hover::before {\n  left: 100%;\n}\n\n.btn-icon {\n  width: 18px;\n  height: 18px;\n}\n\n.ob-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.stat-card {\n  background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%);\n  border-radius: 12px;\n  padding: 24px;\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  border-left: 4px solid;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.stat-card::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(45deg, rgba(255, 255, 255, 0.1), transparent);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.stat-card:hover::before {\n  opacity: 1;\n}\n\n.stat-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 10px 25px rgba(142, 68, 173, 0.3);\n}\n\n.stat-card.orange { border-left-color: #f39c12; }\n.stat-card.blue { border-left-color: #ffffff; }\n.stat-card.red { border-left-color: #e74c3c; }\n\n.stat-icon {\n  width: 32px;\n  height: 32px;\n  color: #ffffff;\n  filter: drop-shadow(0 2px 4px rgba(255, 255, 255, 0.3));\n}\n\n.stat-info h3 {\n  font-size: 16px;\n  font-weight: 500;\n  color: #bdc3c7;\n  margin-bottom: 4px;\n}\n\n.stat-value {\n  font-size: 28px;\n  font-weight: 700;\n  color: #ffffff;\n}\n\n.ob-table {\n  width: 100%;\n  background: linear-gradient(135deg, #8e44ad 0%, #9b59b6 100%);\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 8px 25px rgba(142, 68, 173, 0.2);\n}\n\n.ob-table table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.ob-table thead {\n  background: linear-gradient(135deg, #7d3c98 0%, #8e44ad 100%);\n}\n\n.ob-table th {\n  padding: 16px 20px;\n  text-align: left;\n  font-weight: 600;\n  font-size: 14px;\n  color: #bdc3c7;\n  border-bottom: 1px solid #4a5f7a;\n  color: #ffffff;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n.ob-table td {\n  padding: 16px 20px;\n  font-size: 14px;\n  color: #ffffff;\n  border-bottom: 1px solid #4a5f7a;\n  transition: all 0.3s ease;\n}\n\n.ob-table tbody tr {\n  transition: background-color 0.2s ease;\n  cursor: pointer;\n  position: relative;\n}\n\n.ob-table tbody tr:hover {\n  background: linear-gradient(90deg, rgba(255, 255, 255, 0.1), rgba(155, 89, 182, 0.2));\n  transform: scale(1.01);\n}\n\n.ob-table tbody tr:last-child td {\n  border-bottom: none;\n}\n\n.ob-number {\n  color: #ffffff;\n  font-weight: 500;\n  text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);\n  background: linear-gradient(45deg, #9b59b6, #8e44ad);\n  padding: 4px 8px;\n  border-radius: 4px;\n  display: inline-block;\n}\n\n.type {\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.type.incident {\n  background-color: #e74c3c;\n  color: white;\n}\n\n.type.complaint {\n  background-color: #f39c12;\n  color: white;\n}\n\n.type.arrest {\n  background-color: #9b59b6;\n  color: white;\n}\n\n.type.accident {\n  background-color: #e67e22;\n  color: white;\n}\n\n.type.other {\n  background-color: #7f8c8d;\n  color: white;\n}\n\n.status {\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 600;\n  text-align: center;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.status.pending {\n  background-color: #f39c12;\n  color: white;\n}\n\n.status.under-review {\n  background-color: #3498db;\n  color: white;\n}\n\n.status.completed {\n  background-color: #27ae60;\n  color: white;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.edit-btn,\n.delete-btn {\n  padding: 6px 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.edit-btn {\n  background: linear-gradient(135deg, #ffffff, #ecf0f1);\n  color: #8e44ad;\n}\n\n.edit-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(255, 255, 255, 0.3);\n}\n\n.delete-btn {\n  background: linear-gradient(135deg, #e74c3c, #c0392b);\n  color: white;\n}\n\n.delete-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);\n}\n\n.delete-btn {\n  background-color: #e74c3c;\n  color: white;\n}\n\n.delete-btn:hover {\n  background-color: #c0392b;\n}\n\n.edit-input,\n.edit-select {\n  padding: 4px 8px;\n  background-color: #34495e;\n  border: 1px solid #4a5f7a;\n  border-radius: 4px;\n  color: #ffffff;\n  font-size: 12px;\n  width: 100%;\n}\n\n.edit-input:focus,\n.edit-select:focus {\n  outline: none;\n  border-color: #3498db;\n}\n\n.save-btn,\n.cancel-btn-small {\n  padding: 4px 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.save-btn {\n  background-color: #27ae60;\n  color: white;\n}\n\n.save-btn:hover {\n  background-color: #229954;\n}\n\n.cancel-btn-small {\n  background-color: #7f8c8d;\n  color: white;\n}\n\n.cancel-btn-small:hover {\n  background-color: #6c7b7d;\n}\n\n@media (max-width: 768px) {\n  .ob-controls {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .search-bar {\n    min-width: auto;\n  }\n  \n  .filters {\n    justify-content: space-between;\n  }\n}","size_bytes":8088},"client/src/components/OccurrenceBook/OccurrenceBook.jsx":{"content":"import React, { useState } from 'react';\nimport { Search, Plus, Clock, FileText, Edit, Trash2, AlertTriangle } from 'lucide-react';\nimport './OccurrenceBook.css';\n\nconst OccurrenceBook = ({ onAddOBClick, obEntries, onUpdateOB, onDeleteOB }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [editingEntry, setEditingEntry] = useState(null);\n\n  const stats = [\n    { title: 'Total Entries', value: obEntries.length.toString(), icon: FileText, color: 'blue' },\n    { title: 'Today\\'s Entries', value: obEntries.filter(e => e.date === new Date().toISOString().split('T')[0]).length.toString(), icon: Clock, color: 'orange' },\n    { title: 'Pending Review', value: obEntries.filter(e => e.status === 'Pending').length.toString(), icon: AlertTriangle, color: 'red' }\n  ];\n\n  const filteredEntries = obEntries.filter(entry => {\n    const matchesSearch = entry.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         entry.obNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         entry.reportedBy.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = typeFilter === 'all' || entry.type.toLowerCase() === typeFilter.toLowerCase();\n    \n    return matchesSearch && matchesType;\n  });\n\n  const handleEdit = (entry) => {\n    setEditingEntry(entry);\n  };\n\n  const handleDelete = (obId) => {\n    if (window.confirm('Are you sure you want to delete this OB entry?')) {\n      onDeleteOB(obId);\n    }\n  };\n\n  const handleUpdateSubmit = (e) => {\n    e.preventDefault();\n    onUpdateOB(editingEntry);\n    setEditingEntry(null);\n  };\n\n  const handleEditChange = (e) => {\n    const { name, value } = e.target;\n    setEditingEntry(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  return (\n    <div className=\"occurrence-book\">\n      <div className=\"ob-header\">\n        <h1>Occurrence Book (OB)</h1>\n      </div>\n\n      <div className=\"ob-controls\">\n        <div className=\"search-bar\">\n          <Search className=\"search-icon\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search OB entries...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        \n        <div className=\"filters\">\n          <select \n            value={typeFilter} \n            onChange={(e) => setTypeFilter(e.target.value)}\n            className=\"filter-select\"\n          >\n            <option value=\"all\">All Types</option>\n            <option value=\"incident\">Incident</option>\n            <option value=\"complaint\">Complaint</option>\n            <option value=\"arrest\">Arrest</option>\n            <option value=\"accident\">Accident</option>\n            <option value=\"other\">Other</option>\n          </select>\n        </div>\n\n        <button className=\"add-ob-btn\" onClick={onAddOBClick}>\n          <Plus className=\"btn-icon\" />\n          Add OB Entry\n        </button>\n      </div>\n\n      <div className=\"ob-stats\">\n        {stats.map((stat, index) => {\n          const IconComponent = stat.icon;\n          return (\n            <div key={index} className={`stat-card ${stat.color}`}>\n              <IconComponent className=\"stat-icon\" />\n              <div className=\"stat-info\">\n                <h3>{stat.title}</h3>\n                <span className=\"stat-value\">{stat.value}</span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"ob-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>OB Number</th>\n              <th>Date & Time</th>\n              <th>Type</th>\n              <th>Description</th>\n              <th>Reported By</th>\n              <th>Officer</th>\n              <th>Status</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredEntries.map((entry) => (\n              <tr key={entry.id}>\n                {editingEntry && editingEntry.id === entry.id ? (\n                  <>\n                    <td className=\"ob-number\">{entry.obNumber}</td>\n                    <td>{entry.dateTime}</td>\n                    <td>\n                      <select\n                        name=\"type\"\n                        value={editingEntry.type}\n                        onChange={handleEditChange}\n                        className=\"edit-select\"\n                      >\n                        <option value=\"Incident\">Incident</option>\n                        <option value=\"Complaint\">Complaint</option>\n                        <option value=\"Arrest\">Arrest</option>\n                        <option value=\"Accident\">Accident</option>\n                        <option value=\"Other\">Other</option>\n                      </select>\n                    </td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"description\"\n                        value={editingEntry.description}\n                        onChange={handleEditChange}\n                        className=\"edit-input\"\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"reportedBy\"\n                        value={editingEntry.reportedBy}\n                        onChange={handleEditChange}\n                        className=\"edit-input\"\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"officer\"\n                        value={editingEntry.officer}\n                        onChange={handleEditChange}\n                        className=\"edit-input\"\n                      />\n                    </td>\n                    <td>\n                      <select\n                        name=\"status\"\n                        value={editingEntry.status}\n                        onChange={handleEditChange}\n                        className=\"edit-select\"\n                      >\n                        <option value=\"Pending\">Pending</option>\n                        <option value=\"Under Review\">Under Review</option>\n                        <option value=\"Completed\">Completed</option>\n                      </select>\n                    </td>\n                    <td>\n                      <div className=\"action-buttons\">\n                        <button onClick={handleUpdateSubmit} className=\"save-btn\">\n                          Save\n                        </button>\n                        <button onClick={() => setEditingEntry(null)} className=\"cancel-btn-small\">\n                          Cancel\n                        </button>\n                      </div>\n                    </td>\n                  </>\n                ) : (\n                  <>\n                    <td className=\"ob-number\">{entry.obNumber}</td>\n                    <td>{entry.dateTime}</td>\n                    <td>\n                      <span className={`type ${entry.type.toLowerCase()}`}>\n                        {entry.type}\n                      </span>\n                    </td>\n                    <td>{entry.description}</td>\n                    <td>{entry.reportedBy}</td>\n                    <td>{entry.officer}</td>\n                    <td>\n                      <span className={`status ${entry.status.toLowerCase().replace(' ', '-')}`}>\n                        {entry.status}\n                      </span>\n                    </td>\n                    <td>\n                      <div className=\"action-buttons\">\n                        <button onClick={() => handleEdit(entry)} className=\"edit-btn\">\n                          <Edit size={16} />\n                        </button>\n                        <button onClick={() => handleDelete(entry.id)} className=\"delete-btn\">\n                          <Trash2 size={16} />\n                        </button>\n                      </div>\n                    </td>\n                  </>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default OccurrenceBook;","size_bytes":8189},"client/src/components/Profile/EnhancedProfile.css":{"content":".enhanced-profile {\n  padding: 24px;\n  max-width: 1400px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.profile-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 32px;\n  padding: 24px;\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 16px;\n  border: 1px solid #3a526b;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.header-icon {\n  color: #3498db;\n  width: 48px;\n  height: 48px;\n}\n\n.header-content h1 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 28px;\n  font-weight: 700;\n}\n\n.header-content p {\n  color: #bdc3c7;\n  margin: 0;\n  font-size: 16px;\n}\n\n.header-actions {\n  display: flex;\n  gap: 12px;\n}\n\n.export-btn, .add-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.export-btn {\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n  border: 1px solid #3498db;\n}\n\n.export-btn:hover {\n  background: rgba(52, 152, 219, 0.3);\n  transform: translateY(-2px);\n}\n\n.add-btn {\n  background: linear-gradient(135deg, #27ae60, #2ecc71);\n  color: white;\n}\n\n.add-btn:hover {\n  background: linear-gradient(135deg, #229954, #27ae60);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(39, 174, 96, 0.4);\n}\n\n.search-filters {\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  flex-wrap: wrap;\n}\n\n.search-box, .filter-box {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  background: #000000;\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: 1px solid #3a526b;\n  flex: 1;\n  min-width: 250px;\n}\n\n.search-box svg, .filter-box svg {\n  color: #7f8c8d;\n}\n\n.search-box input, .filter-box select {\n  background: transparent;\n  border: none;\n  color: #ecf0f1;\n  font-size: 14px;\n  flex: 1;\n  outline: none;\n}\n\n.search-box input::placeholder {\n  color: #7f8c8d;\n}\n\n.error-message {\n  background: rgba(231, 76, 60, 0.2);\n  border: 1px solid #e74c3c;\n  color: #e74c3c;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n}\n\n.access-denied {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 400px;\n  text-align: center;\n  color: #bdc3c7;\n}\n\n.access-denied svg {\n  color: #e74c3c;\n  margin-bottom: 16px;\n}\n\n.access-denied h2 {\n  color: #ecf0f1;\n  margin-bottom: 8px;\n}\n\n.officers-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n}\n\n.officer-card {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 12px;\n  padding: 20px;\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.officer-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);\n  border-color: #3498db;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 16px;\n}\n\n.officer-info h3 {\n  color: #ecf0f1;\n  margin: 0 0 4px 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.badge-number {\n  color: #3498db;\n  font-weight: 500;\n  font-size: 14px;\n  margin: 0;\n}\n\n.status-badge {\n  padding: 4px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.status-badge.active {\n  background: rgba(39, 174, 96, 0.2);\n  color: #27ae60;\n  border: 1px solid #27ae60;\n}\n\n.status-badge.inactive {\n  background: rgba(149, 165, 166, 0.2);\n  color: #95a5a6;\n  border: 1px solid #95a5a6;\n}\n\n.status-badge.suspended {\n  background: rgba(231, 76, 60, 0.2);\n  color: #e74c3c;\n  border: 1px solid #e74c3c;\n}\n\n.status-badge.retired {\n  background: rgba(243, 156, 18, 0.2);\n  color: #f39c12;\n  border: 1px solid #f39c12;\n}\n\n.card-body {\n  margin-bottom: 16px;\n}\n\n.info-row {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n  color: #bdc3c7;\n  font-size: 14px;\n}\n\n.info-row svg {\n  color: #7f8c8d;\n  flex-shrink: 0;\n}\n\n.specialization {\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.years-service {\n  color: #95a5a6;\n  font-size: 12px;\n  font-style: italic;\n  margin-top: 8px;\n}\n\n.card-actions {\n  display: flex;\n  gap: 8px;\n  justify-content: flex-end;\n}\n\n.edit-btn, .delete-btn {\n  padding: 8px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.edit-btn {\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n  border: 1px solid #3498db;\n}\n\n.edit-btn:hover {\n  background: rgba(52, 152, 219, 0.3);\n  transform: scale(1.05);\n}\n\n.delete-btn {\n  background: rgba(231, 76, 60, 0.2);\n  color: #e74c3c;\n  border: 1px solid #e74c3c;\n}\n\n.delete-btn:hover {\n  background: rgba(231, 76, 60, 0.3);\n  transform: scale(1.05);\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  padding: 20px;\n}\n\n.officer-form-modal {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 16px;\n  width: 100%;\n  max-width: 800px;\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.form-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 24px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.form-header h2 {\n  color: #ecf0f1;\n  margin: 0;\n  font-size: 24px;\n  font-weight: 600;\n}\n\n.form-header button {\n  background: rgba(231, 76, 60, 0.2);\n  border: 1px solid #e74c3c;\n  color: #e74c3c;\n  padding: 8px;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.form-header button:hover {\n  background: rgba(231, 76, 60, 0.3);\n}\n\n.officer-form {\n  padding: 24px;\n}\n\n.form-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 24px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-group.full-width {\n  grid-column: 1 / -1;\n}\n\n.form-group label {\n  color: #ecf0f1;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid #3a526b;\n  border-radius: 8px;\n  padding: 12px;\n  color: #ecf0f1;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #3498db;\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 60px;\n}\n\n.form-actions {\n  display: flex;\n  gap: 12px;\n  justify-content: flex-end;\n  padding-top: 20px;\n  border-top: 1px solid #3a526b;\n}\n\n.form-actions button {\n  padding: 12px 24px;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.form-actions button[type=\"button\"] {\n  background: rgba(149, 165, 166, 0.2);\n  color: #95a5a6;\n  border: 1px solid #95a5a6;\n}\n\n.form-actions button[type=\"button\"]:hover {\n  background: rgba(149, 165, 166, 0.3);\n}\n\n.form-actions button[type=\"submit\"] {\n  background: linear-gradient(135deg, #27ae60, #2ecc71);\n  color: white;\n}\n\n.form-actions button[type=\"submit\"]:hover:not(:disabled) {\n  background: linear-gradient(135deg, #229954, #27ae60);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(39, 174, 96, 0.4);\n}\n\n.form-actions button:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.loading-state, .empty-state {\n  grid-column: 1 / -1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 60px 20px;\n  text-align: center;\n  color: #bdc3c7;\n}\n\n.empty-state svg {\n  color: #7f8c8d;\n  margin-bottom: 16px;\n}\n\n.empty-state h3 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 20px;\n}\n\n.empty-state p {\n  margin: 0;\n  font-size: 16px;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .enhanced-profile {\n    padding: 16px;\n  }\n\n  .profile-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .header-actions {\n    width: 100%;\n    justify-content: flex-start;\n  }\n\n  .search-filters {\n    flex-direction: column;\n  }\n\n  .search-box, .filter-box {\n    min-width: auto;\n  }\n\n  .officers-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .form-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .officer-form-modal {\n    margin: 10px;\n    max-height: 80vh;\n  }\n\n  .form-actions {\n    flex-direction: column;\n  }\n\n  .form-actions button {\n    width: 100%;\n    justify-content: center;\n  }\n}","size_bytes":8737},"client/src/components/Profile/EnhancedProfile.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  User, \n  Search, \n  Plus, \n  Edit2, \n  Trash2, \n  Save, \n  X, \n  Shield, \n  Phone, \n  Mail, \n  MapPin,\n  Filter,\n  Download,\n  Upload\n} from 'lucide-react';\nimport { useAuth } from '../../context/AuthContext';\nimport './EnhancedProfile.css';\n\nconst EnhancedProfile = () => {\n  const { user } = useAuth();\n  const [officers, setOfficers] = useState([]);\n  const [filteredOfficers, setFilteredOfficers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterDepartment, setFilterDepartment] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    badgeNumber: '',\n    department: '',\n    position: '',\n    email: '',\n    phone: '',\n    address: '',\n    emergencyContact: '',\n    specialization: '',\n    yearsOfService: '',\n    status: 'active'\n  });\n\n  const departments = [\n    'Criminal Investigation',\n    'Traffic Police',\n    'Community Policing',\n    'Cybercrime Unit',\n    'Narcotics Division',\n    'Forensics',\n    'K-9 Unit',\n    'SWAT Team',\n    'Internal Affairs',\n    'Administrative',\n    'Patrol Division'\n  ];\n\n  const positions = [\n    'Police Officer',\n    'Sergeant',\n    'Lieutenant',\n    'Captain',\n    'Inspector',\n    'Detective',\n    'Specialist',\n    'Chief Inspector',\n    'Deputy Commissioner',\n    'Commissioner'\n  ];\n\n  const specializations = [\n    'Criminal Investigation',\n    'Traffic Management',\n    'Cybercrime',\n    'Forensics',\n    'Drug Enforcement',\n    'Community Relations',\n    'Emergency Response',\n    'Counter Terrorism',\n    'Financial Crimes',\n    'Domestic Violence'\n  ];\n\n  useEffect(() => {\n    if (user?.role === 'admin') {\n      fetchOfficers();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    filterOfficers();\n  }, [officers, searchTerm, filterDepartment]);\n\n  const fetchOfficers = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/officers');\n      if (response.ok) {\n        const data = await response.json();\n        setOfficers(data);\n      }\n    } catch (error) {\n      setError('Failed to fetch officers data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const filterOfficers = () => {\n    let filtered = [...officers];\n\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      filtered = filtered.filter(officer => \n        officer.firstName?.toLowerCase().includes(search) ||\n        officer.lastName?.toLowerCase().includes(search) ||\n        officer.badgeNumber?.toLowerCase().includes(search) ||\n        officer.department?.toLowerCase().includes(search) ||\n        officer.position?.toLowerCase().includes(search) ||\n        officer.email?.toLowerCase().includes(search)\n      );\n    }\n\n    if (filterDepartment) {\n      filtered = filtered.filter(officer => officer.department === filterDepartment);\n    }\n\n    setFilteredOfficers(filtered);\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const url = editingId ? `/api/officers/${editingId}` : '/api/officers';\n      const method = editingId ? 'PUT' : 'POST';\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.ok) {\n        await fetchOfficers();\n        resetForm();\n        setShowAddForm(false);\n        setEditingId(null);\n      } else {\n        const error = await response.json();\n        setError(error.message || 'Operation failed');\n      }\n    } catch (error) {\n      setError('Network error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEdit = (officer) => {\n    setFormData({\n      firstName: officer.firstName || '',\n      lastName: officer.lastName || '',\n      badgeNumber: officer.badgeNumber || '',\n      department: officer.department || '',\n      position: officer.position || '',\n      email: officer.email || '',\n      phone: officer.phone || '',\n      address: officer.address || '',\n      emergencyContact: officer.emergencyContact || '',\n      specialization: officer.specialization || '',\n      yearsOfService: officer.yearsOfService || '',\n      status: officer.status || 'active'\n    });\n    setEditingId(officer.id);\n    setShowAddForm(true);\n  };\n\n  const handleDelete = async (id) => {\n    if (!confirm('Are you sure you want to delete this officer record?')) return;\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/officers/${id}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        await fetchOfficers();\n      } else {\n        setError('Failed to delete officer');\n      }\n    } catch (error) {\n      setError('Network error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      firstName: '',\n      lastName: '',\n      badgeNumber: '',\n      department: '',\n      position: '',\n      email: '',\n      phone: '',\n      address: '',\n      emergencyContact: '',\n      specialization: '',\n      yearsOfService: '',\n      status: 'active'\n    });\n    setEditingId(null);\n    setError('');\n  };\n\n  const exportData = () => {\n    const csvContent = [\n      ['Badge Number', 'Name', 'Department', 'Position', 'Email', 'Phone', 'Status', 'Years of Service'],\n      ...filteredOfficers.map(officer => [\n        officer.badgeNumber,\n        `${officer.firstName} ${officer.lastName}`,\n        officer.department,\n        officer.position,\n        officer.email,\n        officer.phone,\n        officer.status,\n        officer.yearsOfService\n      ])\n    ].map(row => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'officers_data.csv';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"enhanced-profile\">\n        <div className=\"access-denied\">\n          <Shield size={48} />\n          <h2>Access Restricted</h2>\n          <p>You need administrative privileges to access profile management.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"enhanced-profile\">\n      <div className=\"profile-header\">\n        <div className=\"header-content\">\n          <Shield className=\"header-icon\" />\n          <div>\n            <h1>Officer Profile Management</h1>\n            <p>Manage police officer profiles, departments, and records</p>\n          </div>\n        </div>\n        <div className=\"header-actions\">\n          <button className=\"export-btn\" onClick={exportData}>\n            <Download size={18} />\n            Export Data\n          </button>\n          <button className=\"add-btn\" onClick={() => setShowAddForm(true)}>\n            <Plus size={18} />\n            Add Officer\n          </button>\n        </div>\n      </div>\n\n      <div className=\"search-filters\">\n        <div className=\"search-box\">\n          <Search size={20} />\n          <input\n            type=\"text\"\n            placeholder=\"Search by name, badge number, department, email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        <div className=\"filter-box\">\n          <Filter size={20} />\n          <select\n            value={filterDepartment}\n            onChange={(e) => setFilterDepartment(e.target.value)}\n          >\n            <option value=\"\">All Departments</option>\n            {departments.map(dept => (\n              <option key={dept} value={dept}>{dept}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      {showAddForm && (\n        <div className=\"modal-overlay\">\n          <div className=\"officer-form-modal\">\n            <div className=\"form-header\">\n              <h2>{editingId ? 'Edit Officer' : 'Add New Officer'}</h2>\n              <button onClick={() => {\n                setShowAddForm(false);\n                resetForm();\n              }}>\n                <X size={20} />\n              </button>\n            </div>\n            <form onSubmit={handleSubmit} className=\"officer-form\">\n              <div className=\"form-grid\">\n                <div className=\"form-group\">\n                  <label>First Name *</label>\n                  <input\n                    type=\"text\"\n                    name=\"firstName\"\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last Name *</label>\n                  <input\n                    type=\"text\"\n                    name=\"lastName\"\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Badge Number *</label>\n                  <input\n                    type=\"text\"\n                    name=\"badgeNumber\"\n                    value={formData.badgeNumber}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Department *</label>\n                  <select\n                    name=\"department\"\n                    value={formData.department}\n                    onChange={handleInputChange}\n                    required\n                  >\n                    <option value=\"\">Select Department</option>\n                    {departments.map(dept => (\n                      <option key={dept} value={dept}>{dept}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <label>Position *</label>\n                  <select\n                    name=\"position\"\n                    value={formData.position}\n                    onChange={handleInputChange}\n                    required\n                  >\n                    <option value=\"\">Select Position</option>\n                    {positions.map(pos => (\n                      <option key={pos} value={pos}>{pos}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <label>Specialization</label>\n                  <select\n                    name=\"specialization\"\n                    value={formData.specialization}\n                    onChange={handleInputChange}\n                  >\n                    <option value=\"\">Select Specialization</option>\n                    {specializations.map(spec => (\n                      <option key={spec} value={spec}>{spec}</option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={formData.email}\n                    onChange={handleInputChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Phone</label>\n                  <input\n                    type=\"tel\"\n                    name=\"phone\"\n                    value={formData.phone}\n                    onChange={handleInputChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Years of Service</label>\n                  <input\n                    type=\"number\"\n                    name=\"yearsOfService\"\n                    value={formData.yearsOfService}\n                    onChange={handleInputChange}\n                    min=\"0\"\n                    max=\"50\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Status</label>\n                  <select\n                    name=\"status\"\n                    value={formData.status}\n                    onChange={handleInputChange}\n                  >\n                    <option value=\"active\">Active</option>\n                    <option value=\"inactive\">Inactive</option>\n                    <option value=\"suspended\">Suspended</option>\n                    <option value=\"retired\">Retired</option>\n                  </select>\n                </div>\n                <div className=\"form-group full-width\">\n                  <label>Address</label>\n                  <textarea\n                    name=\"address\"\n                    value={formData.address}\n                    onChange={handleInputChange}\n                    rows=\"2\"\n                  />\n                </div>\n                <div className=\"form-group full-width\">\n                  <label>Emergency Contact</label>\n                  <input\n                    type=\"text\"\n                    name=\"emergencyContact\"\n                    value={formData.emergencyContact}\n                    onChange={handleInputChange}\n                    placeholder=\"Name and phone number\"\n                  />\n                </div>\n              </div>\n              <div className=\"form-actions\">\n                <button type=\"button\" onClick={() => {\n                  setShowAddForm(false);\n                  resetForm();\n                }}>\n                  Cancel\n                </button>\n                <button type=\"submit\" disabled={isLoading}>\n                  <Save size={18} />\n                  {isLoading ? 'Saving...' : (editingId ? 'Update' : 'Save')}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      <div className=\"officers-grid\">\n        {isLoading && officers.length === 0 ? (\n          <div className=\"loading-state\">Loading officers...</div>\n        ) : filteredOfficers.length === 0 ? (\n          <div className=\"empty-state\">\n            <User size={48} />\n            <h3>No officers found</h3>\n            <p>Add new officers or adjust your search filters</p>\n          </div>\n        ) : (\n          filteredOfficers.map((officer) => (\n            <div key={officer.id} className=\"officer-card\">\n              <div className=\"card-header\">\n                <div className=\"officer-info\">\n                  <h3>{officer.firstName} {officer.lastName}</h3>\n                  <p className=\"badge-number\">Badge #{officer.badgeNumber}</p>\n                </div>\n                <div className={`status-badge ${officer.status}`}>\n                  {officer.status}\n                </div>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"info-row\">\n                  <Shield size={16} />\n                  <span>{officer.department}</span>\n                </div>\n                <div className=\"info-row\">\n                  <User size={16} />\n                  <span>{officer.position}</span>\n                </div>\n                {officer.email && (\n                  <div className=\"info-row\">\n                    <Mail size={16} />\n                    <span>{officer.email}</span>\n                  </div>\n                )}\n                {officer.phone && (\n                  <div className=\"info-row\">\n                    <Phone size={16} />\n                    <span>{officer.phone}</span>\n                  </div>\n                )}\n                {officer.specialization && (\n                  <div className=\"info-row\">\n                    <span className=\"specialization\">{officer.specialization}</span>\n                  </div>\n                )}\n                {officer.yearsOfService && (\n                  <div className=\"years-service\">\n                    {officer.yearsOfService} years of service\n                  </div>\n                )}\n              </div>\n              <div className=\"card-actions\">\n                <button onClick={() => handleEdit(officer)} className=\"edit-btn\">\n                  <Edit2 size={16} />\n                </button>\n                <button onClick={() => handleDelete(officer.id)} className=\"delete-btn\">\n                  <Trash2 size={16} />\n                </button>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedProfile;","size_bytes":16957},"client/src/components/Profile/Profile.css":{"content":"/* Profile Component Styles */\n.profile-container {\n  padding: 30px;\n  color: #ffffff;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.profile-header {\n  display: flex;\n  align-items: center;\n  gap: 24px;\n  margin-bottom: 30px;\n  padding: 24px;\n  background: linear-gradient(145deg, #2a2a2a, #1a1a1a);\n  border-radius: 16px;\n  border: 1px solid #333;\n}\n\n.profile-avatar {\n  flex-shrink: 0;\n}\n\n.avatar-placeholder {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 28px;\n  font-weight: bold;\n  color: white;\n  text-transform: uppercase;\n}\n\n.profile-info {\n  flex: 1;\n}\n\n.profile-info h1 {\n  margin: 0 0 8px 0;\n  font-size: 32px;\n  font-weight: 600;\n}\n\n.profile-role {\n  color: #4CAF50;\n  font-size: 16px;\n  font-weight: 500;\n  margin: 0 0 4px 0;\n}\n\n.profile-badge {\n  color: #ccc;\n  font-size: 14px;\n  margin: 0;\n}\n\n.profile-actions {\n  flex-shrink: 0;\n}\n\n.edit-profile-btn {\n  padding: 12px 24px;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.edit-profile-btn:hover {\n  background: linear-gradient(135deg, #45a049, #3d8b40);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);\n}\n\n.profile-content {\n  background: linear-gradient(145deg, #1a1a1a, #2a2a2a);\n  border-radius: 16px;\n  border: 1px solid #333;\n  overflow: hidden;\n}\n\n/* Form Styles */\n.profile-form {\n  padding: 30px;\n}\n\n.form-section {\n  margin-bottom: 32px;\n}\n\n.form-section h3 {\n  color: #4CAF50;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0 0 20px 0;\n  padding-bottom: 8px;\n  border-bottom: 2px solid #333;\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  color: #e0e0e0;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 12px 16px;\n  background-color: #333;\n  border: 2px solid #444;\n  border-radius: 8px;\n  color: #ffffff;\n  font-size: 16px;\n  transition: all 0.2s ease;\n  box-sizing: border-box;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #4CAF50;\n  background-color: #3a3a3a;\n}\n\n.form-group input:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.form-actions {\n  display: flex;\n  gap: 16px;\n  justify-content: flex-end;\n  padding-top: 24px;\n  border-top: 1px solid #333;\n}\n\n.save-btn {\n  padding: 12px 32px;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.save-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #45a049, #3d8b40);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);\n}\n\n.save-btn:disabled {\n  background: linear-gradient(135deg, #666, #555);\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: none;\n}\n\n.cancel-btn {\n  padding: 12px 32px;\n  background: transparent;\n  color: #ccc;\n  border: 2px solid #555;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover:not(:disabled) {\n  background-color: #333;\n  border-color: #666;\n  color: #fff;\n}\n\n.cancel-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n/* Details Styles */\n.profile-details {\n  padding: 30px;\n}\n\n.details-section {\n  margin-bottom: 32px;\n}\n\n.details-section h3 {\n  color: #4CAF50;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0 0 20px 0;\n  padding-bottom: 8px;\n  border-bottom: 2px solid #333;\n}\n\n.detail-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n  margin-bottom: 16px;\n}\n\n.detail-item {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.detail-item label {\n  color: #999;\n  font-size: 12px;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.detail-item span {\n  color: #e0e0e0;\n  font-size: 16px;\n  font-weight: 400;\n}\n\n.role-badge {\n  padding: 6px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  display: inline-block;\n  width: fit-content;\n}\n\n.role-badge.admin {\n  background-color: #d32f2f;\n  color: white;\n}\n\n.role-badge.user {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.status-badge {\n  padding: 6px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  display: inline-block;\n  width: fit-content;\n}\n\n.status-badge.active {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.status-badge.inactive {\n  background-color: #f44336;\n  color: white;\n}\n\n/* Admin Section */\n.admin-section {\n  padding: 24px 30px;\n  border-top: 1px solid #333;\n  background-color: rgba(76, 175, 80, 0.05);\n}\n\n.admin-section h3 {\n  color: #4CAF50;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0 0 16px 0;\n}\n\n.admin-actions {\n  display: flex;\n  gap: 16px;\n  flex-wrap: wrap;\n}\n\n.admin-btn {\n  padding: 12px 24px;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.register-user-btn {\n  background: linear-gradient(135deg, #2196F3, #1976D2);\n  color: white;\n}\n\n.register-user-btn:hover {\n  background: linear-gradient(135deg, #1976D2, #1565C0);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3);\n}\n\n/* Profile Footer */\n.profile-footer {\n  padding: 24px 30px;\n  border-top: 1px solid #333;\n  background-color: rgba(0, 0, 0, 0.2);\n  display: flex;\n  justify-content: center;\n}\n\n.logout-btn {\n  padding: 12px 32px;\n  background: linear-gradient(135deg, #f44336, #d32f2f);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.logout-btn:hover {\n  background: linear-gradient(135deg, #d32f2f, #c62828);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(244, 67, 54, 0.3);\n}\n\n/* Error and Success Messages */\n.error-message {\n  background-color: #d32f2f;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #f44336;\n}\n\n.success-message {\n  background-color: #388e3c;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #4caf50;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .profile-container {\n    padding: 20px;\n  }\n\n  .profile-header {\n    flex-direction: column;\n    text-align: center;\n    gap: 16px;\n  }\n\n  .profile-actions {\n    width: 100%;\n  }\n\n  .edit-profile-btn {\n    width: 100%;\n  }\n\n  .form-row,\n  .detail-row {\n    grid-template-columns: 1fr;\n  }\n\n  .form-actions {\n    flex-direction: column;\n  }\n\n  .save-btn,\n  .cancel-btn {\n    width: 100%;\n  }\n\n  .admin-actions {\n    flex-direction: column;\n  }\n\n  .admin-btn {\n    width: 100%;\n  }\n}\n\n@media (max-width: 480px) {\n  .profile-header {\n    padding: 20px;\n  }\n\n  .profile-info h1 {\n    font-size: 24px;\n  }\n\n  .avatar-placeholder {\n    width: 60px;\n    height: 60px;\n    font-size: 20px;\n  }\n\n  .profile-form,\n  .profile-details {\n    padding: 20px;\n  }\n\n  .admin-section {\n    padding: 20px;\n  }\n\n  .profile-footer {\n    padding: 20px;\n  }\n}","size_bytes":7453},"client/src/components/Profile/Profile.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport './Profile.css';\n\nconst Profile = ({ onRegisterClick }) => {\n  const { user, updateProfile, logout } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: user?.firstName || '',\n    lastName: user?.lastName || '',\n    email: user?.email || '',\n    badgeNumber: user?.badgeNumber || '',\n    department: user?.department || '',\n    position: user?.position || '',\n    phone: user?.phone || '',\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n    setError('');\n    setSuccess('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    setSuccess('');\n\n    const result = await updateProfile(formData);\n\n    if (result.success) {\n      setSuccess('Profile updated successfully!');\n      setIsEditing(false);\n      setTimeout(() => setSuccess(''), 3000);\n    } else {\n      setError(result.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      firstName: user?.firstName || '',\n      lastName: user?.lastName || '',\n      email: user?.email || '',\n      badgeNumber: user?.badgeNumber || '',\n      department: user?.department || '',\n      position: user?.position || '',\n      phone: user?.phone || '',\n    });\n    setIsEditing(false);\n    setError('');\n    setSuccess('');\n  };\n\n  const handleLogout = async () => {\n    if (window.confirm('Are you sure you want to logout?')) {\n      await logout();\n    }\n  };\n\n  if (!user) {\n    return <div className=\"profile-container\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-header\">\n        <div className=\"profile-avatar\">\n          <div className=\"avatar-placeholder\">\n            {user.firstName?.[0]}{user.lastName?.[0]}\n          </div>\n        </div>\n        <div className=\"profile-info\">\n          <h1>{user.firstName} {user.lastName}</h1>\n          <p className=\"profile-role\">{user.role === 'admin' ? 'Administrator' : 'Officer'}</p>\n          <p className=\"profile-badge\">Badge: {user.badgeNumber || 'N/A'}</p>\n        </div>\n        <div className=\"profile-actions\">\n          {!isEditing && (\n            <button className=\"edit-profile-btn\" onClick={() => setIsEditing(true)}>\n              Edit Profile\n            </button>\n          )}\n        </div>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n      {success && <div className=\"success-message\">{success}</div>}\n\n      <div className=\"profile-content\">\n        {isEditing ? (\n          <form onSubmit={handleSubmit} className=\"profile-form\">\n            <div className=\"form-section\">\n              <h3>Personal Information</h3>\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <input\n                    type=\"text\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                    required\n                    disabled={isLoading}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <input\n                    type=\"text\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                    required\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"email\">Email</label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"phone\">Phone</label>\n                <input\n                  type=\"tel\"\n                  id=\"phone\"\n                  name=\"phone\"\n                  value={formData.phone}\n                  onChange={handleChange}\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-section\">\n              <h3>Professional Information</h3>\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"badgeNumber\">Badge Number</label>\n                  <input\n                    type=\"text\"\n                    id=\"badgeNumber\"\n                    name=\"badgeNumber\"\n                    value={formData.badgeNumber}\n                    onChange={handleChange}\n                    disabled={isLoading}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"department\">Department</label>\n                  <input\n                    type=\"text\"\n                    id=\"department\"\n                    name=\"department\"\n                    value={formData.department}\n                    onChange={handleChange}\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"position\">Position/Rank</label>\n                <input\n                  type=\"text\"\n                  id=\"position\"\n                  name=\"position\"\n                  value={formData.position}\n                  onChange={handleChange}\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-actions\">\n              <button\n                type=\"submit\"\n                className=\"save-btn\"\n                disabled={isLoading}\n              >\n                {isLoading ? 'Saving...' : 'Save Changes'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"cancel-btn\"\n                onClick={handleCancel}\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        ) : (\n          <div className=\"profile-details\">\n            <div className=\"details-section\">\n              <h3>Personal Information</h3>\n              <div className=\"detail-row\">\n                <div className=\"detail-item\">\n                  <label>Name</label>\n                  <span>{user.firstName} {user.lastName}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <label>Email</label>\n                  <span>{user.email}</span>\n                </div>\n              </div>\n              <div className=\"detail-item\">\n                <label>Phone</label>\n                <span>{user.phone || 'Not provided'}</span>\n              </div>\n            </div>\n\n            <div className=\"details-section\">\n              <h3>Professional Information</h3>\n              <div className=\"detail-row\">\n                <div className=\"detail-item\">\n                  <label>Badge Number</label>\n                  <span>{user.badgeNumber || 'Not assigned'}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <label>Department</label>\n                  <span>{user.department || 'Not specified'}</span>\n                </div>\n              </div>\n              <div className=\"detail-item\">\n                <label>Position/Rank</label>\n                <span>{user.position || 'Not specified'}</span>\n              </div>\n              <div className=\"detail-item\">\n                <label>Access Level</label>\n                <span className={`role-badge ${user.role}`}>\n                  {user.role === 'admin' ? 'Administrator' : 'Standard User'}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"details-section\">\n              <h3>Account Information</h3>\n              <div className=\"detail-row\">\n                <div className=\"detail-item\">\n                  <label>Username</label>\n                  <span>{user.username}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <label>Account Status</label>\n                  <span className={`status-badge ${user.isActive ? 'active' : 'inactive'}`}>\n                    {user.isActive ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n              </div>\n              <div className=\"detail-row\">\n                <div className=\"detail-item\">\n                  <label>Member Since</label>\n                  <span>{new Date(user.createdAt).toLocaleDateString()}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <label>Last Login</label>\n                  <span>\n                    {user.lastLoginAt \n                      ? new Date(user.lastLoginAt).toLocaleString()\n                      : 'Never'\n                    }\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {user.role === 'admin' && (\n          <div className=\"admin-section\">\n            <h3>Administrator Actions</h3>\n            <div className=\"admin-actions\">\n              <button className=\"admin-btn register-user-btn\" onClick={onRegisterClick}>\n                Register New User\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"profile-footer\">\n          <button className=\"logout-btn\" onClick={handleLogout}>\n            Logout\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;","size_bytes":10222},"client/src/components/Sidebar/CollapsibleSidebar.css":{"content":".collapsible-sidebar {\n  background: linear-gradient(180deg, #2c3e50 0%, #34495e 100%);\n  min-height: 100vh;\n  transition: all 0.3s ease;\n  position: relative;\n  border-right: 1px solid #3a526b;\n  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.collapsible-sidebar.expanded {\n  width: 280px;\n}\n\n.collapsible-sidebar.collapsed {\n  width: 70px;\n}\n\n.sidebar-header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px 15px 15px 15px;\n  border-bottom: 1px solid #3a526b;\n  margin-bottom: 0;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  color: #ecf0f1;\n  font-weight: 700;\n  font-size: 18px;\n}\n\n.logo-icon {\n  color: #3498db;\n  width: 28px;\n  height: 28px;\n  flex-shrink: 0;\n}\n\n.toggle-btn {\n  background: rgba(52, 152, 219, 0.2);\n  border: 1px solid #3498db;\n  border-radius: 6px;\n  color: #3498db;\n  padding: 8px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.toggle-btn.full-width {\n  width: calc(100% - 30px);\n  margin: 0 15px 15px 15px;\n  border-bottom: 1px solid #3a526b;\n  padding-bottom: 15px;\n}\n\n.toggle-btn:hover {\n  background: rgba(52, 152, 219, 0.3);\n  transform: translateY(-1px);\n}\n\n.sidebar-user {\n  padding: 15px;\n  margin-bottom: 10px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  margin: 0 15px 20px 15px;\n  transition: all 0.3s ease;\n}\n\n.sidebar-user.collapsed {\n  padding: 10px 0;\n  margin: 0 auto 20px auto;\n  background: transparent;\n  width: fit-content;\n}\n\n.sidebar-user:not(.collapsed) {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.user-avatar {\n  width: 45px;\n  height: 45px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 16px;\n  text-transform: uppercase;\n  border: 2px solid rgba(255, 255, 255, 0.2);\n  flex-shrink: 0;\n}\n\n.user-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.user-name {\n  color: #ecf0f1;\n  font-weight: 600;\n  font-size: 14px;\n  margin-bottom: 2px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.user-role {\n  color: #3498db;\n  font-size: 12px;\n  font-weight: 500;\n  margin-bottom: 2px;\n}\n\n.user-badge {\n  color: #bdc3c7;\n  font-size: 11px;\n}\n\n.sidebar-nav {\n  flex: 1;\n  padding: 0 10px;\n}\n\n.nav-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  width: 100%;\n  padding: 14px 15px;\n  background: transparent;\n  border: none;\n  color: #bdc3c7;\n  text-decoration: none;\n  border-radius: 10px;\n  margin-bottom: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 14px;\n  font-weight: 500;\n  text-align: left;\n}\n\n.nav-item.collapsed {\n  justify-content: center;\n  padding: 14px;\n}\n\n.nav-item:hover {\n  background: rgba(52, 152, 219, 0.15);\n  color: #ecf0f1;\n  transform: translateX(4px);\n}\n\n.nav-item.active {\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);\n}\n\n.nav-item.active:hover {\n  transform: translateX(0);\n}\n\n.nav-icon {\n  width: 20px;\n  height: 20px;\n  flex-shrink: 0;\n}\n\n.sidebar-footer {\n  padding: 15px 10px;\n  border-top: 1px solid #3a526b;\n  margin-top: auto;\n}\n\n.logout-item {\n  color: #e74c3c !important;\n  border: 1px solid transparent;\n}\n\n.logout-item:hover {\n  background: rgba(231, 76, 60, 0.15) !important;\n  border-color: rgba(231, 76, 60, 0.3);\n  color: #ecf0f1 !important;\n}\n\n/* Three dots animation for collapsed state */\n.collapsible-sidebar.collapsed::before {\n  content: '⋮';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #3498db;\n  font-size: 24px;\n  font-weight: bold;\n  pointer-events: none;\n  z-index: -1;\n  opacity: 0.3;\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .collapsible-sidebar.expanded {\n    width: 250px;\n  }\n  \n  .collapsible-sidebar.collapsed {\n    width: 60px;\n  }\n  \n  .sidebar-header {\n    padding: 15px 10px;\n  }\n  \n  .logo {\n    font-size: 16px;\n  }\n  \n  .nav-item {\n    padding: 12px;\n    font-size: 13px;\n  }\n  \n  .nav-item.collapsed {\n    padding: 12px 8px;\n  }\n}\n\n@media (max-width: 480px) {\n  .collapsible-sidebar.expanded {\n    position: fixed;\n    left: 0;\n    top: 0;\n    z-index: 1000;\n    width: 100%;\n    background: rgba(44, 62, 80, 0.98);\n    backdrop-filter: blur(10px);\n  }\n}","size_bytes":4420},"client/src/components/Sidebar/CollapsibleSidebar.jsx":{"content":"import React, { useState } from 'react';\nimport { \n  Home, \n  FileText, \n  UserCheck, \n  User, \n  MessageSquare, \n  Camera, \n  Upload, \n  Edit3,\n  LogOut,\n  Shield,\n  Users,\n  Menu,\n  ChevronLeft,\n  ChevronRight,\n  MoreHorizontal,\n  Car,\n  Map,\n  Archive,\n  FileCheck\n} from 'lucide-react';\nimport { useAuth } from '../../context/AuthContext';\nimport './CollapsibleSidebar.css';\n\nconst CollapsibleSidebar = ({ activeSection, setActiveSection }) => {\n  const { user, logout } = useAuth();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const menuItems = [\n    { id: 'dashboard', label: 'Dashboard', icon: Home },\n    { id: 'cases', label: 'Cases', icon: FileText },\n    { id: 'occurrence-book', label: 'Occurrence Book (OB)', icon: UserCheck },\n    { id: 'license-plates', label: 'License Plates', icon: Car },\n    { id: 'evidence', label: 'Evidence Log', icon: Camera },\n    { id: 'geofiles', label: 'Geo Files', icon: Map },\n    { id: 'reports', label: 'Generate Report', icon: FileCheck },\n    { id: 'profile', label: 'Profile', icon: User, adminOnly: true },\n    { id: 'message', label: 'Message', icon: MessageSquare },\n    { id: 'media', label: 'Media', icon: Upload },\n    { id: 'updates', label: 'Updates', icon: Edit3 },\n    { id: 'entry', label: 'Entry', icon: FileText }\n  ];\n\n  // Add admin-only items\n  if (user?.role === 'admin') {\n    menuItems.push({ id: 'admin', label: 'User Management', icon: Users });\n  }\n\n  // Filter menu items based on admin access for profile\n  const filteredMenuItems = menuItems.filter(item => {\n    if (item.adminOnly && user?.role !== 'admin') {\n      return false;\n    }\n    return true;\n  });\n\n  const handleLogout = async () => {\n    if (window.confirm('Are you sure you want to logout?')) {\n      await logout();\n    }\n  };\n\n  const toggleSidebar = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  return (\n    <div className={`collapsible-sidebar ${isCollapsed ? 'collapsed' : 'expanded'}`}>\n      <div className=\"sidebar-header\">\n        <div className=\"logo\">\n          <Shield className=\"logo-icon\" />\n          {!isCollapsed && <span>Police Portal</span>}\n        </div>\n      </div>\n      \n      <button className=\"toggle-btn full-width\" onClick={toggleSidebar} data-testid=\"button-toggle\">\n        {isCollapsed ? <MoreHorizontal size={18} /> : <ChevronLeft size={18} />}\n        {!isCollapsed && <span>Collapse</span>}\n      </button>\n\n      {user && !isCollapsed && (\n        <div className=\"sidebar-user\">\n          <div className=\"user-avatar\">\n            {user.firstName?.[0]}{user.lastName?.[0]}\n          </div>\n          <div className=\"user-info\">\n            <div className=\"user-name\">{user.firstName} {user.lastName}</div>\n            <div className=\"user-role\">{user.role === 'admin' ? 'Administrator' : 'Officer'}</div>\n            <div className=\"user-badge\">Badge: {user.badgeNumber || 'N/A'}</div>\n          </div>\n        </div>\n      )}\n\n      {user && isCollapsed && (\n        <div className=\"sidebar-user collapsed\">\n          <div className=\"user-avatar\">\n            {user.firstName?.[0]}{user.lastName?.[0]}\n          </div>\n        </div>\n      )}\n      \n      <nav className=\"sidebar-nav\">\n        {filteredMenuItems.map((item) => {\n          const IconComponent = item.icon;\n          return (\n            <button\n              key={item.id}\n              className={`nav-item ${activeSection === item.id ? 'active' : ''} ${isCollapsed ? 'collapsed' : ''}`}\n              onClick={() => setActiveSection(item.id)}\n              title={isCollapsed ? item.label : ''}\n            >\n              <IconComponent className=\"nav-icon\" />\n              {!isCollapsed && <span>{item.label}</span>}\n            </button>\n          );\n        })}\n      </nav>\n\n      <div className=\"sidebar-footer\">\n        <button \n          className={`nav-item logout-item ${isCollapsed ? 'collapsed' : ''}`} \n          onClick={handleLogout}\n          title={isCollapsed ? 'Logout' : ''}\n        >\n          <LogOut className=\"nav-icon\" />\n          {!isCollapsed && <span>Logout</span>}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CollapsibleSidebar;","size_bytes":4148},"client/src/components/Sidebar/Sidebar.css":{"content":".sidebar {\n  width: 250px;\n  background-color: #2c3e50;\n  border-right: 1px solid #34495e;\n  display: flex;\n  flex-direction: column;\n}\n\n.sidebar-header {\n  padding: 20px;\n  border-bottom: 1px solid #34495e;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 18px;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.logo-icon {\n  width: 24px;\n  height: 24px;\n  color: #3498db;\n}\n\n.sidebar-nav {\n  flex: 1;\n  padding: 20px 0;\n}\n\n.nav-item {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 20px;\n  background: none;\n  border: none;\n  color: #bdc3c7;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n}\n\n.nav-item:hover {\n  background-color: #34495e;\n  color: #ffffff;\n}\n\n.nav-item.active {\n  background-color: #3498db;\n  color: #ffffff;\n}\n\n.nav-item.active .nav-icon {\n  color: #ffffff;\n}\n\n.nav-icon {\n  width: 18px;\n  height: 18px;\n  color: #7f8c8d;\n  transition: color 0.2s ease;\n}\n\n.nav-item:hover .nav-icon {\n  color: #ffffff;\n}\n\n/* User Info Section */\n.sidebar-user {\n  padding: 20px;\n  border-bottom: 1px solid #34495e;\n  background-color: rgba(52, 73, 94, 0.5);\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  font-weight: bold;\n  color: white;\n  text-transform: uppercase;\n  flex-shrink: 0;\n}\n\n.user-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.user-name {\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff;\n  margin-bottom: 2px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.user-role {\n  font-size: 12px;\n  color: #4CAF50;\n  font-weight: 500;\n  margin-bottom: 2px;\n}\n\n.user-badge {\n  font-size: 11px;\n  color: #bdc3c7;\n}\n\n/* Footer with logout */\n.sidebar-footer {\n  border-top: 1px solid #34495e;\n  padding: 10px 0;\n}\n\n.logout-item {\n  color: #e74c3c !important;\n}\n\n.logout-item:hover {\n  background-color: #c0392b !important;\n  color: #ffffff !important;\n}\n\n.logout-item .nav-icon {\n  color: #e74c3c;\n}\n\n.logout-item:hover .nav-icon {\n  color: #ffffff;\n}\n\n/* Mobile responsive */\n@media (max-width: 768px) {\n  .sidebar {\n    width: 200px;\n  }\n\n  .sidebar-user {\n    flex-direction: column;\n    text-align: center;\n    gap: 8px;\n  }\n\n  .user-info {\n    width: 100%;\n  }\n\n  .nav-item {\n    padding: 10px 16px;\n  }\n\n  .nav-item span {\n    font-size: 13px;\n  }\n}\n\n@media (max-width: 480px) {\n  .sidebar {\n    position: fixed;\n    left: -250px;\n    top: 0;\n    height: 100vh;\n    z-index: 1000;\n    transition: left 0.3s ease;\n  }\n\n  .sidebar.mobile-open {\n    left: 0;\n  }\n}","size_bytes":2719},"client/src/components/Sidebar/Sidebar.jsx":{"content":"import React from 'react';\nimport { \n  Home, \n  FileText, \n  UserCheck, \n  User, \n  MessageSquare, \n  Camera, \n  Upload, \n  Edit3,\n  LogOut,\n  Shield,\n  Users\n} from 'lucide-react';\nimport { useAuth } from '../../context/AuthContext';\nimport './Sidebar.css';\n\nconst Sidebar = ({ activeSection, setActiveSection }) => {\n  const { user, logout } = useAuth();\n\n  const menuItems = [\n    { id: 'dashboard', label: 'Dashboard', icon: Home },\n    { id: 'cases', label: 'Cases', icon: FileText },\n    { id: 'occurrence-book', label: 'Occurrence Book (OB)', icon: UserCheck },\n    { id: 'profile', label: 'Profile', icon: User },\n    { id: 'message', label: 'Message', icon: MessageSquare },\n    { id: 'evidence', label: 'Evidence', icon: Camera },\n    { id: 'media', label: 'Media', icon: Upload },\n    { id: 'updates', label: 'Updates', icon: Edit3 },\n    { id: 'entry', label: 'Entry', icon: FileText }\n  ];\n\n  // Add admin-only items\n  if (user?.role === 'admin') {\n    menuItems.push({ id: 'admin', label: 'User Management', icon: Users });\n  }\n\n  const handleLogout = async () => {\n    if (window.confirm('Are you sure you want to logout?')) {\n      await logout();\n    }\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar-header\">\n        <div className=\"logo\">\n          <Shield className=\"logo-icon\" />\n          <span>Police Portal</span>\n        </div>\n      </div>\n\n      {user && (\n        <div className=\"sidebar-user\">\n          <div className=\"user-avatar\">\n            {user.firstName?.[0]}{user.lastName?.[0]}\n          </div>\n          <div className=\"user-info\">\n            <div className=\"user-name\">{user.firstName} {user.lastName}</div>\n            <div className=\"user-role\">{user.role === 'admin' ? 'Administrator' : 'Officer'}</div>\n            <div className=\"user-badge\">Badge: {user.badgeNumber || 'N/A'}</div>\n          </div>\n        </div>\n      )}\n      \n      <nav className=\"sidebar-nav\">\n        {menuItems.map((item) => {\n          const IconComponent = item.icon;\n          return (\n            <button\n              key={item.id}\n              className={`nav-item ${activeSection === item.id ? 'active' : ''}`}\n              onClick={() => setActiveSection(item.id)}\n            >\n              <IconComponent className=\"nav-icon\" />\n              <span>{item.label}</span>\n            </button>\n          );\n        })}\n      </nav>\n\n      <div className=\"sidebar-footer\">\n        <button className=\"nav-item logout-item\" onClick={handleLogout}>\n          <LogOut className=\"nav-icon\" />\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","size_bytes":2652},"client/src/components/UserManagement/UserManagement.css":{"content":"/* User Management Styles */\n.user-management {\n  padding: 30px;\n  color: #ffffff;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.user-management-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 30px;\n  padding: 24px;\n  background: linear-gradient(145deg, #2a2a2a, #1a1a1a);\n  border-radius: 16px;\n  border: 1px solid #333;\n}\n\n.header-info h1 {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin: 0 0 8px 0;\n  font-size: 32px;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.header-icon {\n  color: #4CAF50;\n}\n\n.header-info p {\n  margin: 0;\n  color: #ccc;\n  font-size: 16px;\n}\n\n.add-user-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 24px;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.add-user-btn:hover {\n  background: linear-gradient(135deg, #45a049, #3d8b40);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);\n}\n\n.btn-icon {\n  width: 16px;\n  height: 16px;\n}\n\n/* Error and Success Messages */\n.error-message {\n  background-color: #d32f2f;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #f44336;\n}\n\n.success-message {\n  background-color: #388e3c;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #4caf50;\n}\n\n/* Users Grid */\n.users-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  gap: 24px;\n  margin-bottom: 30px;\n}\n\n.user-card {\n  background: linear-gradient(145deg, #1a1a1a, #2a2a2a);\n  border-radius: 16px;\n  border: 1px solid #333;\n  overflow: hidden;\n  transition: all 0.2s ease;\n}\n\n.user-card:hover {\n  border-color: #4CAF50;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);\n}\n\n.user-card.inactive {\n  opacity: 0.7;\n  border-color: #f44336;\n}\n\n.user-card-header {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  padding: 20px;\n  border-bottom: 1px solid #333;\n}\n\n.user-avatar {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #4CAF50, #45a049);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  font-weight: bold;\n  color: white;\n  text-transform: uppercase;\n  flex-shrink: 0;\n}\n\n.user-info {\n  flex: 1;\n}\n\n.user-info h3 {\n  margin: 0 0 4px 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #ffffff;\n}\n\n.username {\n  margin: 0 0 8px 0;\n  color: #999;\n  font-size: 14px;\n}\n\n.user-badges {\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n.role-badge {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 10px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.role-badge.admin {\n  background-color: #d32f2f;\n  color: white;\n}\n\n.role-badge.user {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.status-badge {\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 10px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.status-badge.active {\n  background-color: #388e3c;\n  color: white;\n}\n\n.status-badge.inactive {\n  background-color: #f44336;\n  color: white;\n}\n\n/* User Details */\n.user-details {\n  padding: 20px;\n}\n\n.detail-group {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #333;\n}\n\n.detail-group:last-child {\n  margin-bottom: 0;\n  border-bottom: none;\n}\n\n.detail-group label {\n  color: #999;\n  font-size: 12px;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.detail-group span {\n  color: #e0e0e0;\n  font-size: 14px;\n  font-weight: 400;\n  text-align: right;\n  max-width: 60%;\n  word-break: break-word;\n}\n\n/* User Actions */\n.user-actions {\n  padding: 16px 20px;\n  border-top: 1px solid #333;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n\n.delete-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  padding: 8px 16px;\n  background: linear-gradient(135deg, #f44336, #d32f2f);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-size: 12px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.delete-btn:hover {\n  background: linear-gradient(135deg, #d32f2f, #c62828);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(244, 67, 54, 0.3);\n}\n\n.current-user-badge {\n  padding: 16px 20px;\n  border-top: 1px solid #333;\n  background: linear-gradient(135deg, rgba(76, 175, 80, 0.2), rgba(69, 160, 73, 0.1));\n  text-align: center;\n  color: #4CAF50;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* Empty State */\n.empty-state {\n  text-align: center;\n  padding: 60px 20px;\n  color: #999;\n}\n\n.empty-state svg {\n  margin-bottom: 20px;\n  color: #555;\n}\n\n.empty-state h3 {\n  margin: 0 0 8px 0;\n  font-size: 24px;\n  color: #ccc;\n}\n\n.empty-state p {\n  margin: 0 0 24px 0;\n  font-size: 16px;\n}\n\n/* User Stats */\n.user-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 20px;\n  margin-top: 30px;\n}\n\n.stat-card {\n  background: linear-gradient(145deg, #2a2a2a, #1a1a1a);\n  border-radius: 12px;\n  border: 1px solid #333;\n  padding: 20px;\n  text-align: center;\n  transition: all 0.2s ease;\n}\n\n.stat-card:hover {\n  border-color: #4CAF50;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.stat-card h4 {\n  margin: 0 0 8px 0;\n  color: #999;\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.stat-card span {\n  color: #4CAF50;\n  font-size: 28px;\n  font-weight: bold;\n}\n\n/* Loading */\n.loading {\n  text-align: center;\n  padding: 60px 20px;\n  color: #999;\n  font-size: 18px;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .user-management {\n    padding: 20px;\n  }\n\n  .user-management-header {\n    flex-direction: column;\n    gap: 16px;\n    text-align: center;\n  }\n\n  .users-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .user-card-header {\n    flex-direction: column;\n    text-align: center;\n    gap: 12px;\n  }\n\n  .user-info {\n    width: 100%;\n  }\n\n  .detail-group {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 4px;\n  }\n\n  .detail-group span {\n    max-width: 100%;\n    text-align: left;\n  }\n\n  .user-stats {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (max-width: 480px) {\n  .user-stats {\n    grid-template-columns: 1fr;\n  }\n\n  .header-info h1 {\n    font-size: 24px;\n  }\n\n  .stat-card span {\n    font-size: 24px;\n  }\n}","size_bytes":6642},"client/src/components/UserManagement/UserManagement.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { Users, UserPlus, Trash2, Shield, User } from 'lucide-react';\nimport './UserManagement.css';\n\nconst UserManagement = ({ onRegisterClick }) => {\n  const { user: currentUser } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/users');\n      const data = await response.json();\n      \n      if (response.ok) {\n        setUsers(data.users);\n      } else {\n        setError(data.message);\n      }\n    } catch (err) {\n      setError('Failed to fetch users');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteUser = async (userId, username) => {\n    if (window.confirm(`Are you sure you want to delete user \"${username}\"? This action cannot be undone.`)) {\n      try {\n        const response = await fetch(`/api/users/${userId}`, {\n          method: 'DELETE'\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          setSuccess(`User \"${username}\" deleted successfully`);\n          fetchUsers(); // Refresh the list\n          setTimeout(() => setSuccess(''), 3000);\n        } else {\n          setError(data.message);\n        }\n      } catch (err) {\n        setError('Failed to delete user');\n      }\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"user-management\">\n        <div className=\"loading\">Loading users...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"user-management\">\n      <div className=\"user-management-header\">\n        <div className=\"header-info\">\n          <h1>\n            <Users className=\"header-icon\" />\n            User Management\n          </h1>\n          <p>Manage system users and their access permissions</p>\n        </div>\n        <button className=\"add-user-btn\" onClick={onRegisterClick}>\n          <UserPlus className=\"btn-icon\" />\n          Add New User\n        </button>\n      </div>\n\n      {error && <div className=\"error-message\">{error}</div>}\n      {success && <div className=\"success-message\">{success}</div>}\n\n      <div className=\"users-grid\">\n        {users.map((user) => (\n          <div key={user.id} className={`user-card ${user.isActive ? 'active' : 'inactive'}`}>\n            <div className=\"user-card-header\">\n              <div className=\"user-avatar\">\n                {user.firstName?.[0]}{user.lastName?.[0]}\n              </div>\n              <div className=\"user-info\">\n                <h3>{user.firstName} {user.lastName}</h3>\n                <p className=\"username\">@{user.username}</p>\n                <div className=\"user-badges\">\n                  <span className={`role-badge ${user.role}`}>\n                    {user.role === 'admin' ? (\n                      <><Shield size={12} /> Admin</>\n                    ) : (\n                      <><User size={12} /> User</>\n                    )}\n                  </span>\n                  <span className={`status-badge ${user.isActive ? 'active' : 'inactive'}`}>\n                    {user.isActive ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"user-details\">\n              <div className=\"detail-group\">\n                <label>Email</label>\n                <span>{user.email}</span>\n              </div>\n              \n              <div className=\"detail-group\">\n                <label>Badge</label>\n                <span>{user.badgeNumber || 'Not assigned'}</span>\n              </div>\n\n              <div className=\"detail-group\">\n                <label>Department</label>\n                <span>{user.department || 'Not specified'}</span>\n              </div>\n\n              <div className=\"detail-group\">\n                <label>Position</label>\n                <span>{user.position || 'Not specified'}</span>\n              </div>\n\n              <div className=\"detail-group\">\n                <label>Phone</label>\n                <span>{user.phone || 'Not provided'}</span>\n              </div>\n\n              <div className=\"detail-group\">\n                <label>Created</label>\n                <span>{formatDate(user.createdAt)}</span>\n              </div>\n\n              <div className=\"detail-group\">\n                <label>Last Login</label>\n                <span>{user.lastLoginAt ? formatDate(user.lastLoginAt) : 'Never'}</span>\n              </div>\n            </div>\n\n            {user.id !== currentUser.id && (\n              <div className=\"user-actions\">\n                <button\n                  className=\"delete-btn\"\n                  onClick={() => handleDeleteUser(user.id, user.username)}\n                  title=\"Delete User\"\n                >\n                  <Trash2 size={16} />\n                  Delete User\n                </button>\n              </div>\n            )}\n\n            {user.id === currentUser.id && (\n              <div className=\"current-user-badge\">\n                Current User\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      {users.length === 0 && !loading && (\n        <div className=\"empty-state\">\n          <Users size={64} />\n          <h3>No Users Found</h3>\n          <p>No users have been registered in the system yet.</p>\n          <button className=\"add-user-btn\" onClick={onRegisterClick}>\n            <UserPlus className=\"btn-icon\" />\n            Add First User\n          </button>\n        </div>\n      )}\n\n      <div className=\"user-stats\">\n        <div className=\"stat-card\">\n          <h4>Total Users</h4>\n          <span>{users.length}</span>\n        </div>\n        <div className=\"stat-card\">\n          <h4>Active Users</h4>\n          <span>{users.filter(u => u.isActive).length}</span>\n        </div>\n        <div className=\"stat-card\">\n          <h4>Administrators</h4>\n          <span>{users.filter(u => u.role === 'admin').length}</span>\n        </div>\n        <div className=\"stat-card\">\n          <h4>Officers</h4>\n          <span>{users.filter(u => u.role === 'user').length}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserManagement;","size_bytes":6600},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema.js\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":487},"server/index.ts":{"content":"import express, { Express, Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\n\nconst app: Express = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req: Request, res: Response, next: NextFunction) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: any = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson: any, ...args: any[]) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":1956},"server/routes.ts":{"content":"import { createServer } from \"http\";\nimport session from \"express-session\";\nimport { Express, Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage.js\";\nimport { \n  loginSchema, \n  registerSchema, \n  forgotPasswordSchema, \n  resetPasswordSchema,\n  updateProfileSchema,\n  insertCaseSchema,\n  insertOBSchema,\n  insertLicensePlateSchema,\n  insertEvidenceSchema,\n  insertGeofileSchema,\n  insertReportSchema\n} from \"../shared/schema.js\";\nimport { randomBytes } from \"crypto\";\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: number;\n    user: any;\n  }\n}\n\n// Authentication middleware\nexport const requireAuth = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n};\n\n// Admin middleware\nexport const requireAdmin = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.session.user || req.session.user.role !== 'admin') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express) {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'police-system-secret-key-2025',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Authentication routes\n  app.post('/api/auth/login', async (req: Request, res: Response) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(403).json({ message: \"Account is deactivated\" });\n      }\n\n      await storage.updateLastLogin(user.id);\n      req.session.userId = user.id;\n      req.session.user = user;\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/register', requireAuth, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(userData.username);\n      if (existingUser) {\n        return res.status(409).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(userData.email);\n      if (existingEmail) {\n        return res.status(409).json({ message: \"Email already exists\" });\n      }\n\n      // Create user (remove confirmPassword before saving)\n      const { confirmPassword, ...userToCreate } = userData;\n      const newUser = await storage.createUser(userToCreate);\n\n      const { password: _, ...userWithoutPassword } = newUser;\n      res.status(201).json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/forgot-password', async (req: Request, res: Response) => {\n    try {\n      const { username } = forgotPasswordSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        // Don't reveal if user exists or not\n        return res.json({ message: \"If the username exists, a reset token has been generated\" });\n      }\n\n      const token = randomBytes(32).toString('hex');\n      await storage.createPasswordResetToken(user.id, token);\n\n      // In production, send email here\n      // For development, return the token\n      res.json({ \n        message: \"Password reset token generated\",\n        token // Remove this in production\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/reset-password', async (req: Request, res: Response) => {\n    try {\n      const { token, password } = resetPasswordSchema.parse(req.body);\n      \n      const resetData = await storage.getPasswordResetToken(token);\n      if (!resetData) {\n        return res.status(400).json({ message: \"Invalid or expired token\" });\n      }\n\n      await storage.updateUserPassword(resetData.userId, password);\n      await storage.deletePasswordResetToken(token);\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req: Request, res: Response) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/me', requireAuth, async (req: Request, res: Response) => {\n    const user = await storage.getUser(req.session.userId!);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    const { password: _, ...userWithoutPassword } = user;\n    res.json({ user: userWithoutPassword });\n  });\n\n  // Profile routes\n  app.put('/api/profile', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const updates = updateProfileSchema.parse(req.body);\n      const updatedUser = await storage.updateUser(req.session.userId!, updates);\n      \n      const { password: _, ...userWithoutPassword } = updatedUser;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  // User management routes (Admin only)\n  app.get('/api/users', requireAuth, requireAdmin, async (req: Request, res: Response) => {\n    const users = await storage.getAllUsers();\n    const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n    res.json({ users: usersWithoutPasswords });\n  });\n\n  app.delete('/api/users/:id', requireAuth, requireAdmin, async (req: Request, res: Response) => {\n    const userId = parseInt(req.params.id);\n    \n    if (userId === req.session.userId) {\n      return res.status(400).json({ message: \"Cannot delete your own account\" });\n    }\n\n    try {\n      await storage.deleteUser(userId);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"User not found\" });\n    }\n  });\n\n  app.post('/api/cases', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const caseData = insertCaseSchema.parse(req.body);\n      const newCase = await storage.createCase({\n        ...caseData,\n        createdById: req.session.userId!\n      });\n      res.status(201).json({ case: newCase });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.put('/api/cases/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const caseId = parseInt(req.params.id);\n      const updates = req.body;\n      const updatedCase = await storage.updateCase(caseId, updates);\n      res.json({ case: updatedCase });\n    } catch (error) {\n      res.status(404).json({ message: \"Case not found\" });\n    }\n  });\n\n  app.delete('/api/cases/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const caseId = parseInt(req.params.id);\n      await storage.deleteCase(caseId);\n      res.json({ message: \"Case deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"Case not found\" });\n    }\n  });\n\n  // OB Entry routes\n  app.get('/api/ob-entries', requireAuth, async (req: Request, res: Response) => {\n    const obEntries = await storage.getOBEntries();\n    res.json({ obEntries });\n  });\n\n  app.post('/api/ob-entries', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const obData = insertOBSchema.parse(req.body);\n      const newOBEntry = await storage.createOBEntry({\n        ...obData,\n        recordingOfficerId: req.session.userId!\n      });\n      res.status(201).json({ obEntry: newOBEntry });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.put('/api/ob-entries/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const obId = parseInt(req.params.id);\n      const updates = req.body;\n      const updatedOBEntry = await storage.updateOBEntry(obId, updates);\n      res.json({ obEntry: updatedOBEntry });\n    } catch (error) {\n      res.status(404).json({ message: \"OB Entry not found\" });\n    }\n  });\n\n  app.delete('/api/ob-entries/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const obId = parseInt(req.params.id);\n      await storage.deleteOBEntry(obId);\n      res.json({ message: \"OB Entry deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"OB Entry not found\" });\n    }\n  });\n\n  // License Plate routes\n  app.get('/api/license-plates', requireAuth, async (req: Request, res: Response) => {\n    const licensePlates = await storage.getLicensePlates();\n    res.json({ licensePlates });\n  });\n\n  app.get('/api/license-plates/search/:plateNumber', requireAuth, async (req: Request, res: Response) => {\n    const plateNumber = req.params.plateNumber;\n    const licensePlate = await storage.getLicensePlateByNumber(plateNumber);\n    \n    if (!licensePlate) {\n      return res.status(404).json({ message: \"License plate not found\" });\n    }\n\n    res.json({ licensePlate });\n  });\n\n  app.post('/api/license-plates', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const plateData = insertLicensePlateSchema.parse(req.body);\n      const newPlate = await storage.createLicensePlate({\n        ...plateData,\n        addedById: req.session.userId!\n      });\n      res.status(201).json({ licensePlate: newPlate });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  app.put('/api/license-plates/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const plateId = parseInt(req.params.id);\n      const updates = req.body;\n      const updatedPlate = await storage.updateLicensePlate(plateId, updates);\n      res.json({ licensePlate: updatedPlate });\n    } catch (error) {\n      res.status(404).json({ message: \"License plate not found\" });\n    }\n  });\n\n  app.delete('/api/license-plates/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const plateId = parseInt(req.params.id);\n      await storage.deleteLicensePlate(plateId);\n      res.json({ message: \"License plate deleted successfully\" });\n    } catch (error) {\n      res.status(404).json({ message: \"License plate not found\" });\n    }\n  });\n\n  // Officers management endpoints\n  app.get('/api/officers', requireAuth, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const officers = await storage.getAllUsers();\n      res.json(officers);\n    } catch (error) {\n      console.error('Error fetching officers:', error);\n      res.status(500).json({ message: 'Failed to fetch officers' });\n    }\n  });\n\n  app.post('/api/officers', requireAuth, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const officerData = req.body;\n      const newOfficer = await storage.createUser({\n        ...officerData,\n        username: officerData.badgeNumber || `officer_${Date.now()}`,\n        password: 'changeme123',\n        role: 'user',\n        isActive: true\n      });\n      res.status(201).json(newOfficer);\n    } catch (error) {\n      console.error('Error creating officer:', error);\n      res.status(500).json({ message: 'Failed to create officer' });\n    }\n  });\n\n  app.put('/api/officers/:id', requireAuth, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const officerData = req.body;\n      const updatedOfficer = await storage.updateUser(parseInt(id), officerData);\n      res.json(updatedOfficer);\n    } catch (error) {\n      console.error('Error updating officer:', error);\n      res.status(500).json({ message: 'Failed to update officer' });\n    }\n  });\n\n  app.delete('/api/officers/:id', requireAuth, requireAdmin, async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(parseInt(id));\n      res.json({ message: 'Officer deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting officer:', error);\n      res.status(500).json({ message: 'Failed to delete officer' });\n    }\n  });\n\n  // Cases endpoint using storage\n  app.get('/api/cases', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const cases = await storage.getCases();\n      res.json({ cases });\n    } catch (error) {\n      console.error('Error fetching cases:', error);\n      res.status(500).json({ message: 'Failed to fetch cases' });\n    }\n  });\n\n  // Evidence routes\n  app.get('/api/evidence', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const evidence = await storage.getEvidence();\n      res.json({ evidence });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch evidence' });\n    }\n  });\n\n  app.get('/api/evidence/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const evidenceItem = await storage.getEvidenceItem(parseInt(req.params.id));\n      if (!evidenceItem) {\n        return res.status(404).json({ message: 'Evidence not found' });\n      }\n      res.json(evidenceItem);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch evidence' });\n    }\n  });\n\n  app.post('/api/evidence', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const evidenceData = insertEvidenceSchema.parse(req.body);\n      const newEvidence = await storage.createEvidence(evidenceData);\n      res.status(201).json(newEvidence);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid evidence data' });\n    }\n  });\n\n  app.put('/api/evidence/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const evidenceData = insertEvidenceSchema.parse(req.body);\n      const updatedEvidence = await storage.updateEvidence(parseInt(req.params.id), evidenceData);\n      res.json(updatedEvidence);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update evidence' });\n    }\n  });\n\n  app.delete('/api/evidence/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      await storage.deleteEvidence(parseInt(req.params.id));\n      res.json({ message: 'Evidence deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete evidence' });\n    }\n  });\n\n  // Geofiles routes\n  app.get('/api/geofiles', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const geofiles = await storage.getGeofiles();\n      res.json({ geofiles });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch geofiles' });\n    }\n  });\n\n  app.get('/api/geofiles/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const geofile = await storage.getGeofile(parseInt(req.params.id));\n      if (!geofile) {\n        return res.status(404).json({ message: 'Geofile not found' });\n      }\n      res.json(geofile);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch geofile' });\n    }\n  });\n\n  app.post('/api/geofiles', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const geofileData = insertGeofileSchema.parse(req.body);\n      const newGeofile = await storage.createGeofile(geofileData);\n      res.status(201).json(newGeofile);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid geofile data' });\n    }\n  });\n\n  app.put('/api/geofiles/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const geofileData = insertGeofileSchema.parse(req.body);\n      const updatedGeofile = await storage.updateGeofile(parseInt(req.params.id), geofileData);\n      res.json(updatedGeofile);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update geofile' });\n    }\n  });\n\n  app.delete('/api/geofiles/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      await storage.deleteGeofile(parseInt(req.params.id));\n      res.json({ message: 'Geofile deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete geofile' });\n    }\n  });\n\n  // Reports routes\n  app.get('/api/reports', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const reports = await storage.getReports();\n      res.json({ reports });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch reports' });\n    }\n  });\n\n  app.get('/api/reports/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const report = await storage.getReport(parseInt(req.params.id));\n      if (!report) {\n        return res.status(404).json({ message: 'Report not found' });\n      }\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch report' });\n    }\n  });\n\n  app.post('/api/reports', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const reportData = insertReportSchema.parse(req.body);\n      const newReport = await storage.createReport(reportData);\n      res.status(201).json(newReport);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid report data' });\n    }\n  });\n\n  app.put('/api/reports/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const reportData = insertReportSchema.parse(req.body);\n      const updatedReport = await storage.updateReport(parseInt(req.params.id), reportData);\n      res.json(updatedReport);\n    } catch (error) {\n      res.status(400).json({ message: 'Failed to update report' });\n    }\n  });\n\n  app.delete('/api/reports/:id', requireAuth, async (req: Request, res: Response) => {\n    try {\n      await storage.deleteReport(parseInt(req.params.id));\n      res.json({ message: 'Report deleted successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete report' });\n    }\n  });\n\n  return createServer(app);\n}","size_bytes":18366},"server/storage.ts":{"content":"import { \n  users, \n  cases,\n  obEntries,\n  licensePlates,\n  evidence,\n  geofiles,\n  reports,\n  passwordResetTokens,\n  policeVehicles\n} from \"../shared/schema.js\";\n\nexport class MemStorage {\n  private users: Map<number, any>;\n  private cases: Map<number, any>;\n  private obEntries: Map<number, any>;\n  private licensePlates: Map<number, any>;\n  private evidence: Map<number, any>;\n  private geofiles: Map<number, any>;\n  private reports: Map<number, any>;\n  private resetTokens: Map<string, any>;\n  private policeVehicles: Map<number, any>;\n  private currentUserId: number;\n  private currentCaseId: number;\n  private currentOBId: number;\n  private currentPlateId: number;\n  private currentEvidenceId: number;\n  private currentGeofileId: number;\n  private currentReportId: number;\n  private currentVehicleId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.cases = new Map();\n    this.obEntries = new Map();\n    this.licensePlates = new Map();\n    this.evidence = new Map();\n    this.geofiles = new Map();\n    this.reports = new Map();\n    this.resetTokens = new Map();\n    this.policeVehicles = new Map();\n    this.currentUserId = 1;\n    this.currentCaseId = 1;\n    this.currentOBId = 1;\n    this.currentPlateId = 1;\n    this.currentEvidenceId = 1;\n    this.currentGeofileId = 1;\n    this.currentReportId = 1;\n    this.currentVehicleId = 1;\n    \n    // Create default admin user\n    this.createDefaultAdmin();\n    \n    // Create default case data\n    this.createDefaultCases();\n    \n    // Create default police vehicles\n    this.createDefaultVehicles();\n  }\n\n  async createDefaultAdmin() {\n    const adminUser = {\n      id: this.currentUserId++,\n      username: 'admin',\n      email: 'admin@police.gov',\n      password: 'admin123', // In production, this should be hashed\n      firstName: 'System',\n      lastName: 'Administrator',\n      role: 'admin',\n      badgeNumber: 'ADMIN001',\n      department: 'IT',\n      position: 'System Administrator',\n      phone: '+1-555-0000',\n      profileImage: null,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastLoginAt: null,\n    };\n    this.users.set(adminUser.id, adminUser);\n  }\n\n  async createDefaultCases() {\n    // Create sample cases\n    const sampleCases = [\n      {\n        title: 'Burglary at Main Street Store',\n        description: 'Break-in occurred at electronics store on Main Street. Several items reported missing including laptops and phones.',\n        type: 'Burglary',\n        priority: 'High',\n        status: 'In Progress',\n        incidentDate: '2025-01-20T10:30:00Z',\n        location: 'Main Street Electronics Store, Downtown',\n        assignedOfficer: 'Officer Johnson',\n        createdById: 1\n      },\n      {\n        title: 'Traffic Accident Investigation',\n        description: 'Multi-vehicle accident at highway intersection. Minor injuries reported.',\n        type: 'Traffic',\n        priority: 'Medium',\n        status: 'Open',\n        incidentDate: '2025-01-21T15:45:00Z',\n        location: 'Highway 101 & Oak Avenue Intersection',\n        assignedOfficer: 'Officer Davis',\n        createdById: 1\n      },\n      {\n        title: 'Missing Person Report',\n        description: 'Adult male reported missing by family. Last seen at work on Friday evening.',\n        type: 'Other',\n        priority: 'Critical',\n        status: 'Open',\n        incidentDate: '2025-01-19T18:00:00Z',\n        location: 'Last seen at Downtown Office Building',\n        assignedOfficer: 'Detective Smith',\n        createdById: 1\n      }\n    ];\n\n    for (const caseData of sampleCases) {\n      const id = this.currentCaseId++;\n      const caseNumber = `CASE-${new Date().getFullYear()}-${id.toString().padStart(3, '0')}`;\n      const newCase = {\n        ...caseData,\n        id,\n        caseNumber,\n        assignedOfficerId: null,\n        createdAt: new Date('2025-01-20T11:00:00Z'),\n        updatedAt: new Date('2025-01-21T09:15:00Z'),\n      };\n      this.cases.set(id, newCase);\n    }\n  }\n\n  // User operations\n  async getUser(id: number) {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string) {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string) {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: any) {\n    const id = this.currentUserId++;\n    const user = { \n      ...insertUser, \n      id,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastLoginAt: null,\n      profileImage: null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: number, updates: any) {\n    const user = this.users.get(id);\n    if (!user) throw new Error('User not found');\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: number) {\n    this.users.delete(id);\n  }\n\n  async updateLastLogin(id: number) {\n    const user = this.users.get(id);\n    if (user) {\n      user.lastLoginAt = new Date();\n      this.users.set(id, user);\n    }\n  }\n\n  async getAllUsers() {\n    return Array.from(this.users.values());\n  }\n\n  // Password reset operations\n  async createPasswordResetToken(userId: number, token: string) {\n    this.resetTokens.set(token, { \n      userId, \n      expiresAt: new Date(Date.now() + 3600000) // 1 hour\n    });\n  }\n\n  async getPasswordResetToken(token: string) {\n    const tokenData = this.resetTokens.get(token);\n    if (!tokenData || tokenData.expiresAt < new Date()) {\n      this.resetTokens.delete(token);\n      return undefined;\n    }\n    return tokenData;\n  }\n\n  async deletePasswordResetToken(token: string) {\n    this.resetTokens.delete(token);\n  }\n\n  async updateUserPassword(id: number, password: string) {\n    const user = this.users.get(id);\n    if (user) {\n      user.password = password;\n      user.updatedAt = new Date();\n      this.users.set(id, user);\n    }\n  }\n\n  // Case operations\n  async getCases() {\n    return Array.from(this.cases.values());\n  }\n\n  async getCase(id: number) {\n    return this.cases.get(id);\n  }\n\n  async createCase(caseData: any) {\n    const id = this.currentCaseId++;\n    const caseNumber = `CASE-${new Date().getFullYear()}-${id.toString().padStart(3, '0')}`;\n    const newCase = {\n      ...caseData,\n      id,\n      caseNumber,\n      assignedOfficerId: caseData.assignedOfficerId || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.cases.set(id, newCase);\n    return newCase;\n  }\n\n  async updateCase(id: number, updates: any) {\n    const existingCase = this.cases.get(id);\n    if (!existingCase) throw new Error('Case not found');\n    \n    const updatedCase = { ...existingCase, ...updates, updatedAt: new Date() };\n    this.cases.set(id, updatedCase);\n    return updatedCase;\n  }\n\n  async deleteCase(id: number) {\n    this.cases.delete(id);\n  }\n\n  // OB Entry operations\n  async getOBEntries() {\n    return Array.from(this.obEntries.values());\n  }\n\n  async getOBEntry(id: number) {\n    return this.obEntries.get(id);\n  }\n\n  async createOBEntry(obData: any) {\n    const id = this.currentOBId++;\n    const obNumber = `OB/${new Date().getFullYear()}/${id.toString().padStart(4, '0')}`;\n    const newEntry = {\n      ...obData,\n      id,\n      obNumber,\n      dateTime: new Date(),\n      status: 'recorded',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.obEntries.set(id, newEntry);\n    return newEntry;\n  }\n\n  async updateOBEntry(id: number, updates: any) {\n    const existingEntry = this.obEntries.get(id);\n    if (!existingEntry) throw new Error('OB Entry not found');\n    \n    const updatedEntry = { ...existingEntry, ...updates, updatedAt: new Date() };\n    this.obEntries.set(id, updatedEntry);\n    return updatedEntry;\n  }\n\n  async deleteOBEntry(id: number) {\n    this.obEntries.delete(id);\n  }\n\n  // License Plate operations\n  async getLicensePlates() {\n    return Array.from(this.licensePlates.values());\n  }\n\n  async getLicensePlate(id: number) {\n    return this.licensePlates.get(id);\n  }\n\n  async getLicensePlateByNumber(plateNumber: string) {\n    return Array.from(this.licensePlates.values()).find(\n      (plate) => plate.plateNumber === plateNumber\n    );\n  }\n\n  async createLicensePlate(plateData: any) {\n    const id = this.currentPlateId++;\n    const newPlate = {\n      ...plateData,\n      id,\n      ownerImage: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.licensePlates.set(id, newPlate);\n    return newPlate;\n  }\n\n  async updateLicensePlate(id: number, updates: any) {\n    const existingPlate = this.licensePlates.get(id);\n    if (!existingPlate) throw new Error('License plate not found');\n    \n    const updatedPlate = { ...existingPlate, ...updates, updatedAt: new Date() };\n    this.licensePlates.set(id, updatedPlate);\n    return updatedPlate;\n  }\n\n  async deleteLicensePlate(id: number) {\n    this.licensePlates.delete(id);\n  }\n\n  // Evidence methods\n  async getEvidence() {\n    return Array.from(this.evidence.values());\n  }\n\n  async getEvidenceItem(id: number) {\n    return this.evidence.get(id);\n  }\n\n  async getEvidenceByNumber(evidenceNumber: string) {\n    return Array.from(this.evidence.values()).find(\n      (evidence) => evidence.evidenceNumber === evidenceNumber\n    );\n  }\n\n  async createEvidence(evidenceData: any) {\n    const id = this.currentEvidenceId++;\n    const evidenceNumber = `EV-${new Date().getFullYear()}-${String(id).padStart(4, '0')}`;\n    const newEvidence = {\n      ...evidenceData,\n      id,\n      evidenceNumber,\n      collectedBy: 1, // Default to admin user\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.evidence.set(id, newEvidence);\n    return newEvidence;\n  }\n\n  async updateEvidence(id: number, updates: any) {\n    const existingEvidence = this.evidence.get(id);\n    if (!existingEvidence) throw new Error('Evidence not found');\n    \n    const updatedEvidence = { ...existingEvidence, ...updates, updatedAt: new Date() };\n    this.evidence.set(id, updatedEvidence);\n    return updatedEvidence;\n  }\n\n  async deleteEvidence(id: number) {\n    this.evidence.delete(id);\n  }\n\n  // Geofiles methods\n  async getGeofiles() {\n    return Array.from(this.geofiles.values());\n  }\n\n  async getGeofile(id: number) {\n    return this.geofiles.get(id);\n  }\n\n  async createGeofile(geofileData: any) {\n    const id = this.currentGeofileId++;\n    const newGeofile = {\n      ...geofileData,\n      id,\n      uploadedBy: 1, // Default to admin user\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.geofiles.set(id, newGeofile);\n    return newGeofile;\n  }\n\n  async updateGeofile(id: number, updates: any) {\n    const existingGeofile = this.geofiles.get(id);\n    if (!existingGeofile) throw new Error('Geofile not found');\n    \n    const updatedGeofile = { ...existingGeofile, ...updates, updatedAt: new Date() };\n    this.geofiles.set(id, updatedGeofile);\n    return updatedGeofile;\n  }\n\n  async deleteGeofile(id: number) {\n    this.geofiles.delete(id);\n  }\n\n  // Reports methods\n  async getReports() {\n    return Array.from(this.reports.values());\n  }\n\n  async getReport(id: number) {\n    return this.reports.get(id);\n  }\n\n  async getReportByNumber(reportNumber: string) {\n    return Array.from(this.reports.values()).find(\n      (report) => report.reportNumber === reportNumber\n    );\n  }\n\n  async createReport(reportData: any) {\n    const id = this.currentReportId++;\n    const reportNumber = `RPT-${new Date().getFullYear()}-${String(id).padStart(4, '0')}`;\n    const newReport = {\n      ...reportData,\n      id,\n      reportNumber,\n      requestedBy: 1, // Default to admin user\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.reports.set(id, newReport);\n    return newReport;\n  }\n\n  async updateReport(id: number, updates: any) {\n    const existingReport = this.reports.get(id);\n    if (!existingReport) throw new Error('Report not found');\n    \n    const updatedReport = { ...existingReport, ...updates, updatedAt: new Date() };\n    this.reports.set(id, updatedReport);\n    return updatedReport;\n  }\n\n  async deleteReport(id: number) {\n    this.reports.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":12348},"server/vite.ts":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport viteConfig from \"../vite.config.js\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app, server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.jsx\"`,\n        `src=\"/src/main.jsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2159},"start.js":{"content":"#!/usr/bin/env node\n\n// Simple startup script to run the JavaScript server\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\n// Import and run the server\nimport('./server/index.js')\n  .then(() => {\n    console.log('Server started successfully');\n  })\n  .catch((error) => {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  });","size_bytes":365},"client/src/components/Evidence/Evidence.css":{"content":"/* Evidence List Styles */\n.evidence-list {\n  padding: 24px;\n  max-width: 1400px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.evidence-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 32px;\n  padding: 24px;\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 16px;\n  border: 1px solid #3a526b;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  flex: 1;\n}\n\n.header-icon {\n  color: #e67e22;\n  width: 36px;\n  height: 36px;\n  flex-shrink: 0;\n}\n\n.header-content h1 {\n  color: #ecf0f1;\n  margin: 0 0 6px 0;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.2;\n}\n\n.header-content p {\n  color: #bdc3c7;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.3;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-shrink: 0;\n}\n\n.refresh-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.refresh-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #2980b9, #1abc9c);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(52, 152, 219, 0.4);\n}\n\n.refresh-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.refresh-btn .spinning {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.add-evidence-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background: linear-gradient(135deg, #e67e22, #d68910);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(230, 126, 34, 0.2);\n}\n\n.add-evidence-btn:hover {\n  background: linear-gradient(135deg, #d68910, #ca6f1e);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(230, 126, 34, 0.3);\n}\n\n.filters-section {\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.search-box {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  background: #2c3e50;\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: 1px solid #3a526b;\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-box svg {\n  color: #7f8c8d;\n  flex-shrink: 0;\n}\n\n.search-box input {\n  background: transparent;\n  border: none;\n  color: #ecf0f1;\n  font-size: 14px;\n  flex: 1;\n  outline: none;\n}\n\n.search-box input::placeholder {\n  color: #7f8c8d;\n}\n\n.filter-controls {\n  display: flex;\n  gap: 12px;\n}\n\n.filter-controls select {\n  background: #2c3e50;\n  border: 1px solid #3a526b;\n  color: #ecf0f1;\n  padding: 10px 12px;\n  border-radius: 6px;\n  font-size: 14px;\n  cursor: pointer;\n  min-width: 150px;\n}\n\n.filter-controls select:focus {\n  outline: none;\n  border-color: #3498db;\n}\n\n.evidence-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  gap: 24px;\n}\n\n.evidence-card {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 12px;\n  padding: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.evidence-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);\n  border-color: #e67e22;\n}\n\n.evidence-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 16px;\n}\n\n.evidence-info h3 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.evidence-description {\n  color: #bdc3c7;\n  font-size: 14px;\n  line-height: 1.4;\n  margin: 0;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.evidence-type {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  background: rgba(230, 126, 34, 0.2);\n  color: #e67e22;\n  padding: 6px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.evidence-body {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.status-row {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 12px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n}\n\n.status-text {\n  color: #ecf0f1;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.status-collected { color: #27ae60; }\n.status-analyzed { color: #3498db; }\n.status-stored { color: #95a5a6; }\n.status-disposed { color: #e74c3c; }\n.status-missing { color: #e67e22; }\n\n.evidence-details p {\n  color: #bdc3c7;\n  font-size: 13px;\n  margin: 2px 0;\n}\n\n.evidence-details strong {\n  color: #ecf0f1;\n}\n\n.linked-case {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #3498db !important;\n  font-weight: 500;\n}\n\n.loading-state, .empty-state {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 48px 24px;\n  color: #bdc3c7;\n}\n\n.empty-state svg {\n  color: #7f8c8d;\n  margin-bottom: 16px;\n}\n\n.empty-state h3 {\n  color: #ecf0f1;\n  margin: 16px 0 8px 0;\n  font-size: 20px;\n}\n\n.error-message {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 8px;\n  color: #e74c3c;\n  padding: 16px;\n  margin-bottom: 24px;\n  text-align: center;\n}\n\n/* Form Styles */\n.evidence-form-container {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.form-header {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.form-header h1 {\n  color: #ecf0f1;\n  font-size: 24px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.back-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: transparent;\n  border: 1px solid #3a526b;\n  color: #bdc3c7;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.back-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  border-color: #4a6fa5;\n  color: #ecf0f1;\n}\n\n.evidence-creation-form {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 30px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  max-width: 1000px;\n}\n\n.form-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-group.full-width {\n  grid-column: 1 / -1;\n}\n\n.form-group label {\n  color: #ecf0f1;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid #3a526b;\n  border-radius: 6px;\n  padding: 12px;\n  color: #ecf0f1 !important;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.form-group input::placeholder,\n.form-group textarea::placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #e67e22;\n  background: rgba(255, 255, 255, 0.15);\n  box-shadow: 0 0 0 3px rgba(230, 126, 34, 0.1);\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: #e74c3c;\n  background: rgba(231, 76, 60, 0.1);\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 100px;\n}\n\n.error-text {\n  color: #e74c3c;\n  font-size: 12px;\n  margin-top: 4px;\n}\n\n.submit-error {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 6px;\n  color: #e74c3c;\n  padding: 12px;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.form-actions {\n  display: flex;\n  gap: 15px;\n  justify-content: flex-end;\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid #3a526b;\n}\n\n.cancel-btn {\n  background: transparent;\n  border: 1px solid #7f8c8d;\n  color: #bdc3c7;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover:not(:disabled) {\n  background: rgba(127, 140, 141, 0.1);\n  border-color: #95a5a6;\n  color: #ecf0f1;\n}\n\n.submit-btn {\n  background: linear-gradient(135deg, #e67e22, #d68910);\n  border: none;\n  color: white;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(230, 126, 34, 0.2);\n}\n\n.submit-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #d68910, #ca6f1e);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(230, 126, 34, 0.3);\n}\n\n.submit-btn:disabled,\n.cancel-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Detail View Styles */\n.evidence-detail {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.detail-actions {\n  display: flex;\n  gap: 12px;\n}\n\n.detail-actions button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 10px 16px;\n  background: linear-gradient(135deg, #e67e22, #d68910);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.detail-actions button:hover {\n  background: linear-gradient(135deg, #d68910, #ca6f1e);\n  transform: translateY(-1px);\n}\n\n.evidence-info-panel {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  overflow: hidden;\n}\n\n.panel-header {\n  background: linear-gradient(135deg, #34495e, #2c3e50);\n  padding: 24px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.evidence-display {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.evidence-display h1 {\n  color: #ecf0f1;\n  font-size: 28px;\n  font-weight: 700;\n  margin: 0;\n  flex: 1;\n}\n\n.evidence-display svg {\n  color: #e67e22;\n}\n\n.status-badge {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  background: rgba(230, 126, 34, 0.2);\n  color: #e67e22;\n  border: 1px solid #e67e22;\n  border-radius: 20px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.detail-grid {\n  display: grid;\n  gap: 32px;\n  padding: 24px;\n}\n\n.detail-section {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 24px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n}\n\n.detail-section h3 {\n  color: #ecf0f1;\n  margin: 0 0 16px 0;\n  font-size: 20px;\n  font-weight: 600;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.info-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 16px;\n}\n\n.info-grid > div {\n  color: #bdc3c7;\n  font-size: 14px;\n}\n\n.info-grid strong {\n  color: #ecf0f1;\n  font-weight: 600;\n}\n\n.custody-info {\n  color: #bdc3c7;\n  line-height: 1.6;\n  font-size: 14px;\n  margin: 0;\n  white-space: pre-wrap;\n}\n\n.linked-records {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.linked-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: rgba(52, 152, 219, 0.1);\n  border: 1px solid #3498db;\n  border-radius: 8px;\n  color: #3498db;\n}\n\n.no-links {\n  color: #7f8c8d;\n  font-style: italic;\n  margin: 0;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .evidence-list {\n    padding: 16px;\n  }\n\n  .evidence-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .header-actions {\n    width: 100%;\n    justify-content: space-between;\n  }\n\n  .filters-section {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .search-box {\n    min-width: auto;\n  }\n\n  .filter-controls {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .filter-controls select {\n    width: 100%;\n  }\n\n  .evidence-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .form-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .info-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .detail-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .detail-actions {\n    width: 100%;\n  }\n\n  .evidence-display {\n    flex-direction: column;\n    gap: 12px;\n    align-items: flex-start;\n  }\n}","size_bytes":11994},"client/src/components/Evidence/Evidence.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Camera, \n  Plus, \n  Search, \n  Edit2, \n  Eye, \n  RotateCcw,\n  FileText,\n  Calendar,\n  MapPin,\n  Package,\n  Shield,\n  Link\n} from 'lucide-react';\nimport './Evidence.css';\n\nconst Evidence = () => {\n  const [evidence, setEvidence] = useState([]);\n  const [cases, setCases] = useState([]);\n  const [obEntries, setObEntries] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [currentView, setCurrentView] = useState('list'); // 'list', 'create', 'detail', 'edit'\n  const [selectedEvidence, setSelectedEvidence] = useState(null);\n\n  const evidenceTypes = ['Physical', 'Digital', 'Document', 'Photo', 'Video', 'Audio', 'Other'];\n  const evidenceStatuses = ['Collected', 'Analyzed', 'Stored', 'Disposed', 'Missing'];\n\n  const fetchEvidence = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/evidence');\n      if (response.ok) {\n        const data = await response.json();\n        setEvidence(data.evidence || []);\n        setError('');\n      } else {\n        setError('Failed to fetch evidence');\n      }\n    } catch (error) {\n      setError('Network error. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchCases = async () => {\n    try {\n      const response = await fetch('/api/cases');\n      if (response.ok) {\n        const data = await response.json();\n        setCases(data.cases || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch cases:', error);\n    }\n  };\n\n  const fetchOBEntries = async () => {\n    try {\n      const response = await fetch('/api/ob-entries');\n      if (response.ok) {\n        const data = await response.json();\n        setObEntries(data.obEntries || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch OB entries:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchEvidence();\n    fetchCases();\n    fetchOBEntries();\n  }, []);\n\n  const filteredEvidence = evidence.filter(item => {\n    const matchesSearch = \n      item.evidenceNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.location?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = !typeFilter || item.type === typeFilter;\n    const matchesStatus = !statusFilter || item.status === statusFilter;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  const navigateToView = (view, evidenceItem = null) => {\n    setCurrentView(view);\n    setSelectedEvidence(evidenceItem);\n  };\n\n  const goBack = () => {\n    if (currentView === 'detail') {\n      setCurrentView('list');\n    } else if (currentView === 'edit') {\n      setCurrentView('detail');\n    } else {\n      setCurrentView('list');\n    }\n    if (currentView === 'create') {\n      setSelectedEvidence(null);\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status?.toLowerCase()) {\n      case 'collected': return <Package size={16} className=\"status-collected\" />;\n      case 'analyzed': return <Eye size={16} className=\"status-analyzed\" />;\n      case 'stored': return <Shield size={16} className=\"status-stored\" />;\n      case 'disposed': return <FileText size={16} className=\"status-disposed\" />;\n      case 'missing': return <Search size={16} className=\"status-missing\" />;\n      default: return <Package size={16} />;\n    }\n  };\n\n  const getTypeIcon = (type) => {\n    switch (type?.toLowerCase()) {\n      case 'physical': return <Package size={16} />;\n      case 'digital': return <FileText size={16} />;\n      case 'document': return <FileText size={16} />;\n      case 'photo': return <Camera size={16} />;\n      case 'video': return <Camera size={16} />;\n      default: return <FileText size={16} />;\n    }\n  };\n\n  const EvidenceList = () => (\n    <div className=\"evidence-list\">\n      <div className=\"evidence-header\">\n        <div className=\"header-content\">\n          <Camera className=\"header-icon\" />\n          <div>\n            <h1>Evidence Log</h1>\n            <p>Manage evidence collection and chain of custody</p>\n          </div>\n        </div>\n        <div className=\"header-actions\">\n          <button \n            className=\"refresh-btn\" \n            onClick={fetchEvidence}\n            disabled={isLoading}\n            title=\"Refresh evidence list\"\n          >\n            <RotateCcw size={18} className={isLoading ? 'spinning' : ''} />\n            Refresh\n          </button>\n          <button className=\"add-evidence-btn\" onClick={() => navigateToView('create')}>\n            <Plus size={18} />\n            Add Evidence\n          </button>\n        </div>\n      </div>\n\n      <div className=\"filters-section\">\n        <div className=\"search-box\">\n          <Search size={20} />\n          <input\n            type=\"text\"\n            placeholder=\"Search evidence...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        <div className=\"filter-controls\">\n          <select value={typeFilter} onChange={(e) => setTypeFilter(e.target.value)}>\n            <option value=\"\">All Types</option>\n            {evidenceTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n          <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>\n            <option value=\"\">All Status</option>\n            {evidenceStatuses.map(status => (\n              <option key={status} value={status}>{status}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">{error}</div>\n      )}\n\n      <div className=\"evidence-grid\">\n        {isLoading ? (\n          <div className=\"loading-state\">Loading evidence...</div>\n        ) : filteredEvidence.length === 0 ? (\n          <div className=\"empty-state\">\n            <Camera size={48} />\n            <h3>No evidence found</h3>\n            <p>Add new evidence or adjust your search filters</p>\n          </div>\n        ) : (\n          filteredEvidence.map((evidenceItem) => (\n            <div key={evidenceItem.id} className=\"evidence-card\" onClick={() => navigateToView('detail', evidenceItem)}>\n              <div className=\"evidence-header\">\n                <div className=\"evidence-info\">\n                  <h3>{evidenceItem.evidenceNumber}</h3>\n                  <p className=\"evidence-description\">{evidenceItem.description}</p>\n                </div>\n                <div className=\"evidence-type\">\n                  {getTypeIcon(evidenceItem.type)}\n                  <span>{evidenceItem.type}</span>\n                </div>\n              </div>\n              <div className=\"evidence-body\">\n                <div className=\"status-row\">\n                  {getStatusIcon(evidenceItem.status)}\n                  <span className=\"status-text\">{evidenceItem.status}</span>\n                </div>\n                <div className=\"evidence-details\">\n                  <p><strong>Location:</strong> {evidenceItem.location}</p>\n                  <p><strong>Collected:</strong> {new Date(evidenceItem.collectedAt).toLocaleDateString()}</p>\n                  {evidenceItem.caseId && (\n                    <p className=\"linked-case\">\n                      <Link size={14} />\n                      <span>Linked to Case</span>\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  const CreateEvidenceForm = () => {\n    const [formData, setFormData] = useState({\n      type: 'Physical',\n      description: '',\n      location: '',\n      chain_of_custody: '',\n      status: 'Collected',\n      collectedAt: new Date().toISOString().split('T')[0],\n      caseId: '',\n      obId: ''\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setFormData(prev => ({ ...prev, [name]: value }));\n      if (errors[name]) {\n        setErrors(prev => ({ ...prev, [name]: '' }));\n      }\n    };\n\n    const validateForm = () => {\n      const newErrors = {};\n      if (!formData.description.trim()) newErrors.description = 'Description is required';\n      if (!formData.location.trim()) newErrors.location = 'Location is required';\n      if (!formData.collectedAt) newErrors.collectedAt = 'Collection date is required';\n      \n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      if (!validateForm()) return;\n\n      setIsSubmitting(true);\n      try {\n        const response = await fetch('/api/evidence', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n\n        if (response.ok) {\n          await fetchEvidence();\n          goBack();\n        } else {\n          const errorData = await response.json();\n          setErrors({ submit: errorData.message || 'Failed to add evidence' });\n        }\n      } catch (error) {\n        setErrors({ submit: 'Network error. Please try again.' });\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    return (\n      <div className=\"evidence-form-container\">\n        <div className=\"form-header\">\n          <button className=\"back-btn\" onClick={goBack}>\n            <Camera size={20} />\n            Back to Evidence\n          </button>\n          <h1>Add New Evidence</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"evidence-creation-form\">\n          <div className=\"form-grid\">\n            <div className=\"form-group\">\n              <label htmlFor=\"type\">Evidence Type *</label>\n              <select\n                id=\"type\"\n                name=\"type\"\n                value={formData.type}\n                onChange={handleInputChange}\n              >\n                {evidenceTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status *</label>\n              <select\n                id=\"status\"\n                name=\"status\"\n                value={formData.status}\n                onChange={handleInputChange}\n              >\n                {evidenceStatuses.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"collectedAt\">Collection Date *</label>\n              <input\n                type=\"date\"\n                id=\"collectedAt\"\n                name=\"collectedAt\"\n                value={formData.collectedAt}\n                onChange={handleInputChange}\n                className={errors.collectedAt ? 'error' : ''}\n              />\n              {errors.collectedAt && <span className=\"error-text\">{errors.collectedAt}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"caseId\">Linked Case (Optional)</label>\n              <select\n                id=\"caseId\"\n                name=\"caseId\"\n                value={formData.caseId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select a case...</option>\n                {cases.map(caseItem => (\n                  <option key={caseItem.id} value={caseItem.id}>\n                    {caseItem.caseNumber} - {caseItem.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"obId\">Linked OB Entry (Optional)</label>\n              <select\n                id=\"obId\"\n                name=\"obId\"\n                value={formData.obId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select an OB entry...</option>\n                {obEntries.map(ob => (\n                  <option key={ob.id} value={ob.id}>\n                    {ob.obNumber} - {ob.type}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"location\">Location *</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              name=\"location\"\n              value={formData.location}\n              onChange={handleInputChange}\n              placeholder=\"Enter collection location\"\n              className={errors.location ? 'error' : ''}\n            />\n            {errors.location && <span className=\"error-text\">{errors.location}</span>}\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"description\">Description *</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              placeholder=\"Enter detailed evidence description\"\n              rows=\"4\"\n              className={errors.description ? 'error' : ''}\n            />\n            {errors.description && <span className=\"error-text\">{errors.description}</span>}\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"chain_of_custody\">Chain of Custody</label>\n            <textarea\n              id=\"chain_of_custody\"\n              name=\"chain_of_custody\"\n              value={formData.chain_of_custody}\n              onChange={handleInputChange}\n              placeholder=\"Enter chain of custody information\"\n              rows=\"3\"\n            />\n          </div>\n\n          {errors.submit && (\n            <div className=\"submit-error\">\n              {errors.submit}\n            </div>\n          )}\n\n          <div className=\"form-actions\">\n            <button \n              type=\"button\" \n              className=\"cancel-btn\" \n              onClick={goBack}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"submit-btn\" \n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Adding...' : 'Add Evidence'}\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  };\n\n  const EvidenceDetail = () => {\n    const linkedCase = cases.find(c => c.id === selectedEvidence?.caseId);\n    const linkedOB = obEntries.find(ob => ob.id === selectedEvidence?.obId);\n\n    return (\n      <div className=\"evidence-detail\">\n        <div className=\"detail-header\">\n          <button className=\"back-btn\" onClick={goBack}>\n            <Camera size={20} />\n            Back to Evidence\n          </button>\n          <div className=\"detail-actions\">\n            <button onClick={() => navigateToView('edit', selectedEvidence)}>\n              <Edit2 size={16} />\n              Edit Evidence\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"evidence-info-panel\">\n          <div className=\"panel-header\">\n            <div className=\"evidence-display\">\n              <Camera size={32} />\n              <h1>{selectedEvidence?.evidenceNumber}</h1>\n              <div className=\"status-badge\">\n                {getStatusIcon(selectedEvidence?.status)}\n                {selectedEvidence?.status}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"detail-grid\">\n            <div className=\"detail-section\">\n              <h3>Evidence Information</h3>\n              <div className=\"info-grid\">\n                <div><strong>Type:</strong> {selectedEvidence?.type}</div>\n                <div><strong>Status:</strong> {selectedEvidence?.status}</div>\n                <div><strong>Location:</strong> {selectedEvidence?.location}</div>\n                <div><strong>Collected:</strong> {new Date(selectedEvidence?.collectedAt).toLocaleString()}</div>\n                <div><strong>Added:</strong> {new Date(selectedEvidence?.createdAt).toLocaleString()}</div>\n                <div><strong>Updated:</strong> {new Date(selectedEvidence?.updatedAt).toLocaleString()}</div>\n              </div>\n            </div>\n\n            <div className=\"detail-section\">\n              <h3>Description</h3>\n              <p className=\"evidence-description\">{selectedEvidence?.description}</p>\n            </div>\n\n            {selectedEvidence?.chain_of_custody && (\n              <div className=\"detail-section\">\n                <h3>Chain of Custody</h3>\n                <p className=\"custody-info\">{selectedEvidence.chain_of_custody}</p>\n              </div>\n            )}\n\n            <div className=\"detail-section\">\n              <h3>Linked Records</h3>\n              <div className=\"linked-records\">\n                {linkedCase && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>Case: {linkedCase.caseNumber} - {linkedCase.title}</span>\n                  </div>\n                )}\n                {linkedOB && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>OB: {linkedOB.obNumber} - {linkedOB.type}</span>\n                  </div>\n                )}\n                {!linkedCase && !linkedOB && (\n                  <p className=\"no-links\">No linked records found.</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  switch (currentView) {\n    case 'detail':\n      return <EvidenceDetail />;\n    case 'create':\n      return <CreateEvidenceForm />;\n    default:\n      return <EvidenceList />;\n  }\n};\n\nexport default Evidence;","size_bytes":18160},"client/src/components/Geofiles/Geofiles.css":{"content":"/* Geofiles List Styles */\n.geofiles-list {\n  padding: 24px;\n  max-width: 1400px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.geofiles-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 32px;\n  padding: 24px;\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 16px;\n  border: 1px solid #3a526b;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  flex: 1;\n}\n\n.header-icon {\n  color: #2ecc71;\n  width: 36px;\n  height: 36px;\n  flex-shrink: 0;\n}\n\n.header-content h1 {\n  color: #ecf0f1;\n  margin: 0 0 6px 0;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.2;\n}\n\n.header-content p {\n  color: #bdc3c7;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.3;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-shrink: 0;\n}\n\n.refresh-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.refresh-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #2980b9, #1abc9c);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(52, 152, 219, 0.4);\n}\n\n.refresh-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.refresh-btn .spinning {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.add-geofile-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background: linear-gradient(135deg, #2ecc71, #27ae60);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(46, 204, 113, 0.2);\n}\n\n.add-geofile-btn:hover {\n  background: linear-gradient(135deg, #27ae60, #229954);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(46, 204, 113, 0.3);\n}\n\n.filters-section {\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.search-box {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  background: #2c3e50;\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: 1px solid #3a526b;\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-box svg {\n  color: #7f8c8d;\n  flex-shrink: 0;\n}\n\n.search-box input {\n  background: transparent;\n  border: none;\n  color: #ecf0f1;\n  font-size: 14px;\n  flex: 1;\n  outline: none;\n}\n\n.search-box input::placeholder {\n  color: #7f8c8d;\n}\n\n.filter-controls {\n  display: flex;\n  gap: 12px;\n}\n\n.filter-controls select {\n  background: #2c3e50;\n  border: 1px solid #3a526b;\n  color: #ecf0f1;\n  padding: 10px 12px;\n  border-radius: 6px;\n  font-size: 14px;\n  cursor: pointer;\n  min-width: 150px;\n}\n\n.filter-controls select:focus {\n  outline: none;\n  border-color: #2ecc71;\n}\n\n.geofiles-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  gap: 24px;\n}\n\n.geofile-card {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 12px;\n  padding: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.geofile-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);\n  border-color: #2ecc71;\n}\n\n.geofile-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 16px;\n}\n\n.geofile-info h3 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.geofile-description {\n  color: #bdc3c7;\n  font-size: 14px;\n  line-height: 1.4;\n  margin: 0;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.file-type {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  background: rgba(46, 204, 113, 0.2);\n  color: #2ecc71;\n  padding: 6px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.file-kml { color: #e74c3c; }\n.file-gpx { color: #3498db; }\n.file-shp { color: #9b59b6; }\n.file-geojson { color: #f39c12; }\n\n.geofile-body {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.location-info {\n  padding: 8px 12px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n}\n\n.address {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: #bdc3c7;\n  font-size: 13px;\n  margin: 0;\n}\n\n.geofile-meta {\n  border-top: 1px solid #3a526b;\n  padding-top: 12px;\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.upload-date {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #7f8c8d;\n  font-size: 12px;\n  margin: 0;\n}\n\n.linked-items {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #3498db;\n  font-size: 12px;\n  margin: 0;\n  font-weight: 500;\n}\n\n.loading-state, .empty-state {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 48px 24px;\n  color: #bdc3c7;\n}\n\n.empty-state svg {\n  color: #7f8c8d;\n  margin-bottom: 16px;\n}\n\n.empty-state h3 {\n  color: #ecf0f1;\n  margin: 16px 0 8px 0;\n  font-size: 20px;\n}\n\n.error-message {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 8px;\n  color: #e74c3c;\n  padding: 16px;\n  margin-bottom: 24px;\n  text-align: center;\n}\n\n/* Form Styles */\n.geofile-form-container {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.form-header {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.form-header h1 {\n  color: #ecf0f1;\n  font-size: 24px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.back-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: transparent;\n  border: 1px solid #3a526b;\n  color: #bdc3c7;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.back-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  border-color: #4a6fa5;\n  color: #ecf0f1;\n}\n\n.geofile-creation-form {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 30px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  max-width: 1000px;\n}\n\n.form-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-group.full-width {\n  grid-column: 1 / -1;\n}\n\n.form-group label {\n  color: #ecf0f1;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid #3a526b;\n  border-radius: 6px;\n  padding: 12px;\n  color: #ecf0f1 !important;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.form-group input::placeholder,\n.form-group textarea::placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #2ecc71;\n  background: rgba(255, 255, 255, 0.15);\n  box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.1);\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: #e74c3c;\n  background: rgba(231, 76, 60, 0.1);\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 80px;\n}\n\n.error-text {\n  color: #e74c3c;\n  font-size: 12px;\n  margin-top: 4px;\n}\n\n.submit-error {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 6px;\n  color: #e74c3c;\n  padding: 12px;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.form-actions {\n  display: flex;\n  gap: 15px;\n  justify-content: flex-end;\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid #3a526b;\n}\n\n.cancel-btn {\n  background: transparent;\n  border: 1px solid #7f8c8d;\n  color: #bdc3c7;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover:not(:disabled) {\n  background: rgba(127, 140, 141, 0.1);\n  border-color: #95a5a6;\n  color: #ecf0f1;\n}\n\n.submit-btn {\n  background: linear-gradient(135deg, #2ecc71, #27ae60);\n  border: none;\n  color: white;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(46, 204, 113, 0.2);\n}\n\n.submit-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #27ae60, #229954);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(46, 204, 113, 0.3);\n}\n\n.submit-btn:disabled,\n.cancel-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Detail View Styles */\n.geofile-detail {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.detail-actions {\n  display: flex;\n  gap: 12px;\n}\n\n.detail-actions button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 10px 16px;\n  background: linear-gradient(135deg, #2ecc71, #27ae60);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.detail-actions button:hover {\n  background: linear-gradient(135deg, #27ae60, #229954);\n  transform: translateY(-1px);\n}\n\n.geofile-info-panel {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  overflow: hidden;\n}\n\n.panel-header {\n  background: linear-gradient(135deg, #34495e, #2c3e50);\n  padding: 24px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.geofile-display {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.geofile-display h1 {\n  color: #ecf0f1;\n  font-size: 28px;\n  font-weight: 700;\n  margin: 0;\n  flex: 1;\n}\n\n.geofile-display svg {\n  color: #2ecc71;\n}\n\n.file-type-badge {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  background: rgba(46, 204, 113, 0.2);\n  color: #2ecc71;\n  border: 1px solid #2ecc71;\n  border-radius: 20px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.detail-grid {\n  display: grid;\n  gap: 32px;\n  padding: 24px;\n}\n\n.detail-section {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 24px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n}\n\n.detail-section h3 {\n  color: #ecf0f1;\n  margin: 0 0 16px 0;\n  font-size: 20px;\n  font-weight: 600;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.info-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 16px;\n}\n\n.info-grid > div {\n  color: #bdc3c7;\n  font-size: 14px;\n}\n\n.info-grid strong {\n  color: #ecf0f1;\n  font-weight: 600;\n}\n\n.coordinates-data {\n  background: rgba(0, 0, 0, 0.3);\n  border: 1px solid #3a526b;\n  border-radius: 6px;\n  padding: 16px;\n  color: #ecf0f1;\n  font-family: 'Courier New', monospace;\n  font-size: 12px;\n  line-height: 1.4;\n  overflow-x: auto;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.linked-records {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.linked-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: rgba(52, 152, 219, 0.1);\n  border: 1px solid #3498db;\n  border-radius: 8px;\n  color: #3498db;\n}\n\n.no-links {\n  color: #7f8c8d;\n  font-style: italic;\n  margin: 0;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .geofiles-list {\n    padding: 16px;\n  }\n\n  .geofiles-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .header-actions {\n    width: 100%;\n    justify-content: space-between;\n  }\n\n  .filters-section {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .search-box {\n    min-width: auto;\n  }\n\n  .filter-controls {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .filter-controls select {\n    width: 100%;\n  }\n\n  .geofiles-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .form-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .info-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .detail-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .detail-actions {\n    width: 100%;\n  }\n\n  .geofile-display {\n    flex-direction: column;\n    gap: 12px;\n    align-items: flex-start;\n  }\n\n  .geofile-meta {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 8px;\n  }\n}","size_bytes":12363},"client/src/components/Geofiles/Geofiles.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Map, \n  Plus, \n  Search, \n  Edit2, \n  Eye, \n  RotateCcw,\n  FileText,\n  Calendar,\n  MapPin,\n  Upload,\n  Download,\n  Link\n} from 'lucide-react';\nimport './Geofiles.css';\n\nconst Geofiles = () => {\n  const [geofiles, setGeofiles] = useState([]);\n  const [cases, setCases] = useState([]);\n  const [obEntries, setObEntries] = useState([]);\n  const [evidence, setEvidence] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [currentView, setCurrentView] = useState('list'); // 'list', 'create', 'detail', 'edit'\n  const [selectedGeofile, setSelectedGeofile] = useState(null);\n\n  const fileTypes = ['KML', 'GPX', 'SHP', 'GeoJSON', 'Other'];\n\n  const fetchGeofiles = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/geofiles');\n      if (response.ok) {\n        const data = await response.json();\n        setGeofiles(data.geofiles || []);\n        setError('');\n      } else {\n        setError('Failed to fetch geofiles');\n      }\n    } catch (error) {\n      setError('Network error. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchRelatedData = async () => {\n    try {\n      const [casesRes, obRes, evidenceRes] = await Promise.all([\n        fetch('/api/cases'),\n        fetch('/api/ob-entries'),\n        fetch('/api/evidence')\n      ]);\n\n      if (casesRes.ok) {\n        const casesData = await casesRes.json();\n        setCases(casesData.cases || []);\n      }\n\n      if (obRes.ok) {\n        const obData = await obRes.json();\n        setObEntries(obData.obEntries || []);\n      }\n\n      if (evidenceRes.ok) {\n        const evidenceData = await evidenceRes.json();\n        setEvidence(evidenceData.evidence || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch related data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGeofiles();\n    fetchRelatedData();\n  }, []);\n\n  const filteredGeofiles = geofiles.filter(file => {\n    const matchesSearch = \n      file.filename?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      file.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      file.address?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = !typeFilter || file.fileType === typeFilter;\n    \n    return matchesSearch && matchesType;\n  });\n\n  const navigateToView = (view, geofile = null) => {\n    setCurrentView(view);\n    setSelectedGeofile(geofile);\n  };\n\n  const goBack = () => {\n    if (currentView === 'detail') {\n      setCurrentView('list');\n    } else if (currentView === 'edit') {\n      setCurrentView('detail');\n    } else {\n      setCurrentView('list');\n    }\n    if (currentView === 'create') {\n      setSelectedGeofile(null);\n    }\n  };\n\n  const getFileIcon = (fileType) => {\n    switch (fileType?.toLowerCase()) {\n      case 'kml': return <Map size={16} className=\"file-kml\" />;\n      case 'gpx': return <MapPin size={16} className=\"file-gpx\" />;\n      case 'shp': return <FileText size={16} className=\"file-shp\" />;\n      case 'geojson': return <Map size={16} className=\"file-geojson\" />;\n      default: return <FileText size={16} />;\n    }\n  };\n\n  const GeofilesList = () => (\n    <div className=\"geofiles-list\">\n      <div className=\"geofiles-header\">\n        <div className=\"header-content\">\n          <Map className=\"header-icon\" />\n          <div>\n            <h1>Geo Files Management</h1>\n            <p>Manage geographic data and location files</p>\n          </div>\n        </div>\n        <div className=\"header-actions\">\n          <button \n            className=\"refresh-btn\" \n            onClick={fetchGeofiles}\n            disabled={isLoading}\n            title=\"Refresh geofiles list\"\n          >\n            <RotateCcw size={18} className={isLoading ? 'spinning' : ''} />\n            Refresh\n          </button>\n          <button className=\"add-geofile-btn\" onClick={() => navigateToView('create')}>\n            <Plus size={18} />\n            Add Geofile\n          </button>\n        </div>\n      </div>\n\n      <div className=\"filters-section\">\n        <div className=\"search-box\">\n          <Search size={20} />\n          <input\n            type=\"text\"\n            placeholder=\"Search geofiles...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        <div className=\"filter-controls\">\n          <select value={typeFilter} onChange={(e) => setTypeFilter(e.target.value)}>\n            <option value=\"\">All File Types</option>\n            {fileTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">{error}</div>\n      )}\n\n      <div className=\"geofiles-grid\">\n        {isLoading ? (\n          <div className=\"loading-state\">Loading geofiles...</div>\n        ) : filteredGeofiles.length === 0 ? (\n          <div className=\"empty-state\">\n            <Map size={48} />\n            <h3>No geofiles found</h3>\n            <p>Add new geofiles or adjust your search filters</p>\n          </div>\n        ) : (\n          filteredGeofiles.map((geofile) => (\n            <div key={geofile.id} className=\"geofile-card\" onClick={() => navigateToView('detail', geofile)}>\n              <div className=\"geofile-header\">\n                <div className=\"geofile-info\">\n                  <h3>{geofile.filename}</h3>\n                  <p className=\"geofile-description\">{geofile.description || 'No description'}</p>\n                </div>\n                <div className=\"file-type\">\n                  {getFileIcon(geofile.fileType)}\n                  <span>{geofile.fileType}</span>\n                </div>\n              </div>\n              <div className=\"geofile-body\">\n                <div className=\"location-info\">\n                  {geofile.address && (\n                    <p className=\"address\">\n                      <MapPin size={14} />\n                      {geofile.address}\n                    </p>\n                  )}\n                </div>\n                <div className=\"geofile-meta\">\n                  <p className=\"upload-date\">\n                    <Calendar size={14} />\n                    Uploaded: {new Date(geofile.createdAt).toLocaleDateString()}\n                  </p>\n                  {(geofile.caseId || geofile.obId || geofile.evidenceId) && (\n                    <p className=\"linked-items\">\n                      <Link size={14} />\n                      <span>Linked to records</span>\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  const CreateGeofileForm = () => {\n    const [formData, setFormData] = useState({\n      filename: '',\n      filepath: '',\n      fileType: 'KML',\n      coordinates: '',\n      address: '',\n      description: '',\n      caseId: '',\n      obId: '',\n      evidenceId: ''\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setFormData(prev => ({ ...prev, [name]: value }));\n      if (errors[name]) {\n        setErrors(prev => ({ ...prev, [name]: '' }));\n      }\n    };\n\n    const validateForm = () => {\n      const newErrors = {};\n      if (!formData.filename.trim()) newErrors.filename = 'Filename is required';\n      if (!formData.filepath.trim()) newErrors.filepath = 'File path is required';\n      \n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      if (!validateForm()) return;\n\n      setIsSubmitting(true);\n      try {\n        const response = await fetch('/api/geofiles', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n\n        if (response.ok) {\n          await fetchGeofiles();\n          goBack();\n        } else {\n          const errorData = await response.json();\n          setErrors({ submit: errorData.message || 'Failed to add geofile' });\n        }\n      } catch (error) {\n        setErrors({ submit: 'Network error. Please try again.' });\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    return (\n      <div className=\"geofile-form-container\">\n        <div className=\"form-header\">\n          <button className=\"back-btn\" onClick={goBack}>\n            <Map size={20} />\n            Back to Geofiles\n          </button>\n          <h1>Add New Geofile</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"geofile-creation-form\">\n          <div className=\"form-grid\">\n            <div className=\"form-group\">\n              <label htmlFor=\"filename\">Filename *</label>\n              <input\n                type=\"text\"\n                id=\"filename\"\n                name=\"filename\"\n                value={formData.filename}\n                onChange={handleInputChange}\n                placeholder=\"Enter filename\"\n                className={errors.filename ? 'error' : ''}\n              />\n              {errors.filename && <span className=\"error-text\">{errors.filename}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"fileType\">File Type *</label>\n              <select\n                id=\"fileType\"\n                name=\"fileType\"\n                value={formData.fileType}\n                onChange={handleInputChange}\n              >\n                {fileTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"filepath\">File Path *</label>\n              <input\n                type=\"text\"\n                id=\"filepath\"\n                name=\"filepath\"\n                value={formData.filepath}\n                onChange={handleInputChange}\n                placeholder=\"Enter file path or URL\"\n                className={errors.filepath ? 'error' : ''}\n              />\n              {errors.filepath && <span className=\"error-text\">{errors.filepath}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"address\">Address</label>\n              <input\n                type=\"text\"\n                id=\"address\"\n                name=\"address\"\n                value={formData.address}\n                onChange={handleInputChange}\n                placeholder=\"Enter location address\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"caseId\">Linked Case (Optional)</label>\n              <select\n                id=\"caseId\"\n                name=\"caseId\"\n                value={formData.caseId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select a case...</option>\n                {cases.map(caseItem => (\n                  <option key={caseItem.id} value={caseItem.id}>\n                    {caseItem.caseNumber} - {caseItem.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"obId\">Linked OB Entry (Optional)</label>\n              <select\n                id=\"obId\"\n                name=\"obId\"\n                value={formData.obId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select an OB entry...</option>\n                {obEntries.map(ob => (\n                  <option key={ob.id} value={ob.id}>\n                    {ob.obNumber} - {ob.type}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"evidenceId\">Linked Evidence (Optional)</label>\n              <select\n                id=\"evidenceId\"\n                name=\"evidenceId\"\n                value={formData.evidenceId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select evidence...</option>\n                {evidence.map(evidenceItem => (\n                  <option key={evidenceItem.id} value={evidenceItem.id}>\n                    {evidenceItem.evidenceNumber} - {evidenceItem.type}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"coordinates\">Coordinates (JSON format)</label>\n            <textarea\n              id=\"coordinates\"\n              name=\"coordinates\"\n              value={formData.coordinates}\n              onChange={handleInputChange}\n              placeholder=\"Enter coordinates in JSON format (optional)\"\n              rows=\"3\"\n            />\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleInputChange}\n              placeholder=\"Enter file description\"\n              rows=\"4\"\n            />\n          </div>\n\n          {errors.submit && (\n            <div className=\"submit-error\">\n              {errors.submit}\n            </div>\n          )}\n\n          <div className=\"form-actions\">\n            <button \n              type=\"button\" \n              className=\"cancel-btn\" \n              onClick={goBack}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"submit-btn\" \n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Adding...' : 'Add Geofile'}\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  };\n\n  const GeofileDetail = () => {\n    const linkedCase = cases.find(c => c.id === selectedGeofile?.caseId);\n    const linkedOB = obEntries.find(ob => ob.id === selectedGeofile?.obId);\n    const linkedEvidence = evidence.find(e => e.id === selectedGeofile?.evidenceId);\n\n    return (\n      <div className=\"geofile-detail\">\n        <div className=\"detail-header\">\n          <button className=\"back-btn\" onClick={goBack}>\n            <Map size={20} />\n            Back to Geofiles\n          </button>\n          <div className=\"detail-actions\">\n            <button onClick={() => window.open(selectedGeofile?.filepath, '_blank')}>\n              <Download size={16} />\n              Download\n            </button>\n            <button onClick={() => navigateToView('edit', selectedGeofile)}>\n              <Edit2 size={16} />\n              Edit Geofile\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"geofile-info-panel\">\n          <div className=\"panel-header\">\n            <div className=\"geofile-display\">\n              <Map size={32} />\n              <h1>{selectedGeofile?.filename}</h1>\n              <div className=\"file-type-badge\">\n                {getFileIcon(selectedGeofile?.fileType)}\n                {selectedGeofile?.fileType}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"detail-grid\">\n            <div className=\"detail-section\">\n              <h3>File Information</h3>\n              <div className=\"info-grid\">\n                <div><strong>Filename:</strong> {selectedGeofile?.filename}</div>\n                <div><strong>File Type:</strong> {selectedGeofile?.fileType}</div>\n                <div><strong>File Path:</strong> {selectedGeofile?.filepath}</div>\n                <div><strong>Address:</strong> {selectedGeofile?.address || 'Not provided'}</div>\n                <div><strong>Uploaded:</strong> {new Date(selectedGeofile?.createdAt).toLocaleString()}</div>\n                <div><strong>Updated:</strong> {new Date(selectedGeofile?.updatedAt).toLocaleString()}</div>\n              </div>\n            </div>\n\n            {selectedGeofile?.description && (\n              <div className=\"detail-section\">\n                <h3>Description</h3>\n                <p className=\"geofile-description\">{selectedGeofile.description}</p>\n              </div>\n            )}\n\n            {selectedGeofile?.coordinates && (\n              <div className=\"detail-section\">\n                <h3>Coordinates</h3>\n                <pre className=\"coordinates-data\">{selectedGeofile.coordinates}</pre>\n              </div>\n            )}\n\n            <div className=\"detail-section\">\n              <h3>Linked Records</h3>\n              <div className=\"linked-records\">\n                {linkedCase && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>Case: {linkedCase.caseNumber} - {linkedCase.title}</span>\n                  </div>\n                )}\n                {linkedOB && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>OB: {linkedOB.obNumber} - {linkedOB.type}</span>\n                  </div>\n                )}\n                {linkedEvidence && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>Evidence: {linkedEvidence.evidenceNumber} - {linkedEvidence.type}</span>\n                  </div>\n                )}\n                {!linkedCase && !linkedOB && !linkedEvidence && (\n                  <p className=\"no-links\">No linked records found.</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  switch (currentView) {\n    case 'detail':\n      return <GeofileDetail />;\n    case 'create':\n      return <CreateGeofileForm />;\n    default:\n      return <GeofilesList />;\n  }\n};\n\nexport default Geofiles;","size_bytes":18180},"client/src/components/LicensePlates/LicensePlates.css":{"content":".plates-list {\n  padding: 24px;\n  max-width: 1400px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.plates-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 32px;\n  padding: 24px;\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 16px;\n  border: 1px solid #3a526b;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  flex: 1;\n}\n\n.header-icon {\n  color: #3498db;\n  width: 36px;\n  height: 36px;\n  flex-shrink: 0;\n}\n\n.header-content h1 {\n  color: #ecf0f1;\n  margin: 0 0 6px 0;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.2;\n}\n\n.header-content p {\n  color: #bdc3c7;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.3;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-shrink: 0;\n}\n\n.refresh-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.refresh-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #2980b9, #1abc9c);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(52, 152, 219, 0.4);\n}\n\n.refresh-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.refresh-btn .spinning {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.add-plate-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background: linear-gradient(135deg, #5d8a66, #6b9b73);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(109, 155, 115, 0.2);\n}\n\n.add-plate-btn:hover {\n  background: linear-gradient(135deg, #4a7355, #5d8a66);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(93, 138, 102, 0.3);\n}\n\n.filters-section {\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.search-box {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  background: #2c3e50;\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: 1px solid #3a526b;\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-box svg {\n  color: #7f8c8d;\n  flex-shrink: 0;\n}\n\n.search-box input {\n  background: transparent;\n  border: none;\n  color: #ecf0f1;\n  font-size: 14px;\n  flex: 1;\n  outline: none;\n}\n\n.search-box input::placeholder {\n  color: #7f8c8d;\n}\n\n.plates-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n  gap: 24px;\n}\n\n.plate-card {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 12px;\n  padding: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.plate-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);\n  border-color: #4a6fa5;\n}\n\n.plate-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n}\n\n.plate-number {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  padding: 12px 16px;\n  border-radius: 8px;\n  color: white;\n  font-weight: 700;\n  font-size: 16px;\n  letter-spacing: 1px;\n}\n\n.plate-text {\n  text-transform: uppercase;\n}\n\n.plate-body {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.owner-info h4 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.id-number, .passport-number {\n  color: #bdc3c7;\n  font-size: 14px;\n  margin: 4px 0;\n}\n\n.plate-meta {\n  border-top: 1px solid #3a526b;\n  padding-top: 12px;\n  margin-top: 8px;\n}\n\n.created-date {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: #7f8c8d;\n  font-size: 12px;\n  margin: 0;\n}\n\n.loading-state, .empty-state {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 48px 24px;\n  color: #bdc3c7;\n}\n\n.empty-state svg {\n  color: #7f8c8d;\n  margin-bottom: 16px;\n}\n\n.empty-state h3 {\n  color: #ecf0f1;\n  margin: 16px 0 8px 0;\n  font-size: 20px;\n}\n\n.error-message {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 8px;\n  color: #e74c3c;\n  padding: 16px;\n  margin-bottom: 24px;\n  text-align: center;\n}\n\n/* Form Styles */\n.plate-form-container {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.form-header {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.form-header h1 {\n  color: #ecf0f1;\n  font-size: 24px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.back-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: transparent;\n  border: 1px solid #3a526b;\n  color: #bdc3c7;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.back-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  border-color: #4a6fa5;\n  color: #ecf0f1;\n}\n\n.plate-creation-form {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 30px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  max-width: 1000px;\n}\n\n.form-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-group label {\n  color: #ecf0f1;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input {\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid #3a526b;\n  border-radius: 6px;\n  padding: 12px;\n  color: #ecf0f1 !important;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.form-group input::placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #3498db;\n  background: rgba(255, 255, 255, 0.15);\n  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\n}\n\n.form-group input.error {\n  border-color: #e74c3c;\n  background: rgba(231, 76, 60, 0.1);\n}\n\n.error-text {\n  color: #e74c3c;\n  font-size: 12px;\n  margin-top: 4px;\n}\n\n.submit-error {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 6px;\n  color: #e74c3c;\n  padding: 12px;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.form-actions {\n  display: flex;\n  gap: 15px;\n  justify-content: flex-end;\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid #3a526b;\n}\n\n.cancel-btn {\n  background: transparent;\n  border: 1px solid #7f8c8d;\n  color: #bdc3c7;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover:not(:disabled) {\n  background: rgba(127, 140, 141, 0.1);\n  border-color: #95a5a6;\n  color: #ecf0f1;\n}\n\n.submit-btn {\n  background: linear-gradient(135deg, #5d8a66, #6b9b73);\n  border: none;\n  color: white;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(109, 155, 115, 0.2);\n}\n\n.submit-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #4a7355, #5d8a66);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(93, 138, 102, 0.3);\n}\n\n.submit-btn:disabled,\n.cancel-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Detail View Styles */\n.plate-detail {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.detail-actions {\n  display: flex;\n  gap: 12px;\n}\n\n.detail-actions button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 10px 16px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.detail-actions button:hover {\n  background: linear-gradient(135deg, #2980b9, #1abc9c);\n  transform: translateY(-1px);\n}\n\n.plate-info-panel {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  overflow: hidden;\n}\n\n.panel-header {\n  background: linear-gradient(135deg, #34495e, #2c3e50);\n  padding: 24px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.plate-display {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.plate-display h1 {\n  color: #ecf0f1;\n  font-size: 32px;\n  font-weight: 700;\n  margin: 0;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n}\n\n.plate-display svg {\n  color: #3498db;\n}\n\n.detail-grid {\n  display: grid;\n  gap: 32px;\n  padding: 24px;\n}\n\n.detail-section {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 24px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n}\n\n.detail-section h3 {\n  color: #ecf0f1;\n  margin: 0 0 16px 0;\n  font-size: 20px;\n  font-weight: 600;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.info-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 16px;\n}\n\n.info-grid > div {\n  color: #bdc3c7;\n  font-size: 14px;\n}\n\n.info-grid strong {\n  color: #ecf0f1;\n  font-weight: 600;\n}\n\n.linked-items {\n  color: #bdc3c7;\n  font-style: italic;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .plates-list {\n    padding: 16px;\n  }\n\n  .plates-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .header-actions {\n    width: 100%;\n    justify-content: space-between;\n  }\n\n  .filters-section {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .search-box {\n    min-width: auto;\n  }\n\n  .plates-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .form-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .info-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .detail-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .detail-actions {\n    width: 100%;\n  }\n}","size_bytes":9997},"client/src/components/LicensePlates/LicensePlates.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Car, \n  Plus, \n  Search, \n  Edit2, \n  Eye, \n  RotateCcw,\n  User,\n  FileText,\n  Calendar,\n  MapPin\n} from 'lucide-react';\nimport './LicensePlates.css';\n\nconst LicensePlates = () => {\n  const [plates, setPlates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentView, setCurrentView] = useState('list'); // 'list', 'create', 'detail', 'edit'\n  const [selectedPlate, setSelectedPlate] = useState(null);\n\n  const fetchPlates = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/license-plates');\n      if (response.ok) {\n        const data = await response.json();\n        setPlates(data.plates || []);\n        setError('');\n      } else {\n        setError('Failed to fetch license plates');\n      }\n    } catch (error) {\n      setError('Network error. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPlates();\n  }, []);\n\n  const filteredPlates = plates.filter(plate =>\n    plate.plateNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    plate.ownerName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    plate.idNumber?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const navigateToView = (view, plate = null) => {\n    setCurrentView(view);\n    setSelectedPlate(plate);\n  };\n\n  const goBack = () => {\n    if (currentView === 'detail') {\n      setCurrentView('list');\n    } else if (currentView === 'edit') {\n      setCurrentView('detail');\n    } else {\n      setCurrentView('list');\n    }\n    if (currentView === 'create') {\n      setSelectedPlate(null);\n    }\n  };\n\n  const PlatesList = () => (\n    <div className=\"plates-list\">\n      <div className=\"plates-header\">\n        <div className=\"header-content\">\n          <Car className=\"header-icon\" />\n          <div>\n            <h1>License Plates Management</h1>\n            <p>Manage vehicle registration records</p>\n          </div>\n        </div>\n        <div className=\"header-actions\">\n          <button \n            className=\"refresh-btn\" \n            onClick={fetchPlates}\n            disabled={isLoading}\n            title=\"Refresh plates list\"\n          >\n            <RotateCcw size={18} className={isLoading ? 'spinning' : ''} />\n            Refresh\n          </button>\n          <button className=\"add-plate-btn\" onClick={() => navigateToView('create')}>\n            <Plus size={18} />\n            Add Plate\n          </button>\n        </div>\n      </div>\n\n      <div className=\"filters-section\">\n        <div className=\"search-box\">\n          <Search size={20} />\n          <input\n            type=\"text\"\n            placeholder=\"Search by plate number, owner name, or ID number...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">{error}</div>\n      )}\n\n      <div className=\"plates-grid\">\n        {isLoading ? (\n          <div className=\"loading-state\">Loading license plates...</div>\n        ) : filteredPlates.length === 0 ? (\n          <div className=\"empty-state\">\n            <Car size={48} />\n            <h3>No license plates found</h3>\n            <p>Add a new license plate or adjust your search filters</p>\n          </div>\n        ) : (\n          filteredPlates.map((plate) => (\n            <div key={plate.id} className=\"plate-card\" onClick={() => navigateToView('detail', plate)}>\n              <div className=\"plate-header\">\n                <div className=\"plate-number\">\n                  <Car size={20} />\n                  <span className=\"plate-text\">{plate.plateNumber}</span>\n                </div>\n              </div>\n              <div className=\"plate-body\">\n                <div className=\"owner-info\">\n                  <h4>{plate.ownerName}</h4>\n                  {plate.idNumber && (\n                    <p className=\"id-number\">ID: {plate.idNumber}</p>\n                  )}\n                  {plate.passportNumber && (\n                    <p className=\"passport-number\">Passport: {plate.passportNumber}</p>\n                  )}\n                </div>\n                <div className=\"plate-meta\">\n                  <p className=\"created-date\">\n                    <Calendar size={14} />\n                    Added: {new Date(plate.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  const CreatePlateForm = () => {\n    const [formData, setFormData] = useState({\n      plateNumber: '',\n      ownerName: '',\n      fatherName: '',\n      motherName: '',\n      idNumber: '',\n      passportNumber: '',\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setFormData(prev => ({ ...prev, [name]: value }));\n      if (errors[name]) {\n        setErrors(prev => ({ ...prev, [name]: '' }));\n      }\n    };\n\n    const validateForm = () => {\n      const newErrors = {};\n      if (!formData.plateNumber.trim()) newErrors.plateNumber = 'Plate number is required';\n      if (!formData.ownerName.trim()) newErrors.ownerName = 'Owner name is required';\n      \n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      if (!validateForm()) return;\n\n      setIsSubmitting(true);\n      try {\n        const response = await fetch('/api/license-plates', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n\n        if (response.ok) {\n          await fetchPlates();\n          goBack();\n        } else {\n          const errorData = await response.json();\n          setErrors({ submit: errorData.message || 'Failed to add license plate' });\n        }\n      } catch (error) {\n        setErrors({ submit: 'Network error. Please try again.' });\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    return (\n      <div className=\"plate-form-container\">\n        <div className=\"form-header\">\n          <button className=\"back-btn\" onClick={goBack}>\n            <Car size={20} />\n            Back to Plates\n          </button>\n          <h1>Add New License Plate</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"plate-creation-form\">\n          <div className=\"form-grid\">\n            <div className=\"form-group\">\n              <label htmlFor=\"plateNumber\">Plate Number *</label>\n              <input\n                type=\"text\"\n                id=\"plateNumber\"\n                name=\"plateNumber\"\n                value={formData.plateNumber}\n                onChange={handleInputChange}\n                placeholder=\"Enter plate number\"\n                className={errors.plateNumber ? 'error' : ''}\n                style={{ textTransform: 'uppercase' }}\n              />\n              {errors.plateNumber && <span className=\"error-text\">{errors.plateNumber}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"ownerName\">Owner Name *</label>\n              <input\n                type=\"text\"\n                id=\"ownerName\"\n                name=\"ownerName\"\n                value={formData.ownerName}\n                onChange={handleInputChange}\n                placeholder=\"Enter owner's full name\"\n                className={errors.ownerName ? 'error' : ''}\n              />\n              {errors.ownerName && <span className=\"error-text\">{errors.ownerName}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"fatherName\">Father's Name</label>\n              <input\n                type=\"text\"\n                id=\"fatherName\"\n                name=\"fatherName\"\n                value={formData.fatherName}\n                onChange={handleInputChange}\n                placeholder=\"Enter father's name\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"motherName\">Mother's Name</label>\n              <input\n                type=\"text\"\n                id=\"motherName\"\n                name=\"motherName\"\n                value={formData.motherName}\n                onChange={handleInputChange}\n                placeholder=\"Enter mother's name\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"idNumber\">ID Number</label>\n              <input\n                type=\"text\"\n                id=\"idNumber\"\n                name=\"idNumber\"\n                value={formData.idNumber}\n                onChange={handleInputChange}\n                placeholder=\"Enter national ID number\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"passportNumber\">Passport Number</label>\n              <input\n                type=\"text\"\n                id=\"passportNumber\"\n                name=\"passportNumber\"\n                value={formData.passportNumber}\n                onChange={handleInputChange}\n                placeholder=\"Enter passport number\"\n              />\n            </div>\n          </div>\n\n          {errors.submit && (\n            <div className=\"submit-error\">\n              {errors.submit}\n            </div>\n          )}\n\n          <div className=\"form-actions\">\n            <button \n              type=\"button\" \n              className=\"cancel-btn\" \n              onClick={goBack}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"submit-btn\" \n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Adding...' : 'Add License Plate'}\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  };\n\n  const PlateDetail = () => (\n    <div className=\"plate-detail\">\n      <div className=\"detail-header\">\n        <button className=\"back-btn\" onClick={goBack}>\n          <Car size={20} />\n          Back to Plates\n        </button>\n        <div className=\"detail-actions\">\n          <button onClick={() => navigateToView('edit', selectedPlate)}>\n            <Edit2 size={16} />\n            Edit Plate\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"plate-info-panel\">\n        <div className=\"panel-header\">\n          <div className=\"plate-display\">\n            <Car size={32} />\n            <h1>{selectedPlate?.plateNumber}</h1>\n          </div>\n        </div>\n\n        <div className=\"detail-grid\">\n          <div className=\"detail-section\">\n            <h3>Owner Information</h3>\n            <div className=\"info-grid\">\n              <div><strong>Full Name:</strong> {selectedPlate?.ownerName}</div>\n              <div><strong>Father's Name:</strong> {selectedPlate?.fatherName || 'Not provided'}</div>\n              <div><strong>Mother's Name:</strong> {selectedPlate?.motherName || 'Not provided'}</div>\n              <div><strong>ID Number:</strong> {selectedPlate?.idNumber || 'Not provided'}</div>\n              <div><strong>Passport Number:</strong> {selectedPlate?.passportNumber || 'Not provided'}</div>\n            </div>\n          </div>\n\n          <div className=\"detail-section\">\n            <h3>Registration Details</h3>\n            <div className=\"info-grid\">\n              <div><strong>Plate Number:</strong> {selectedPlate?.plateNumber}</div>\n              <div><strong>Added Date:</strong> {new Date(selectedPlate?.createdAt).toLocaleString()}</div>\n              <div><strong>Last Updated:</strong> {new Date(selectedPlate?.updatedAt).toLocaleString()}</div>\n            </div>\n          </div>\n\n          <div className=\"detail-section\">\n            <h3>Linked Cases</h3>\n            <div className=\"linked-items\">\n              <p>No linked cases found for this license plate.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  switch (currentView) {\n    case 'detail':\n      return <PlateDetail />;\n    case 'create':\n      return <CreatePlateForm />;\n    default:\n      return <PlatesList />;\n  }\n};\n\nexport default LicensePlates;","size_bytes":12451},"client/src/components/Reports/Reports.css":{"content":"/* Reports List Styles */\n.reports-list {\n  padding: 24px;\n  max-width: 1400px;\n  margin: 0 auto;\n  background: #1a1f2e;\n  min-height: 100vh;\n}\n\n.reports-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 32px;\n  padding: 24px;\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border-radius: 16px;\n  border: 1px solid #3a526b;\n}\n\n.header-content {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  flex: 1;\n}\n\n.header-icon {\n  color: #8e44ad;\n  width: 36px;\n  height: 36px;\n  flex-shrink: 0;\n}\n\n.header-content h1 {\n  color: #ecf0f1;\n  margin: 0 0 6px 0;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.2;\n}\n\n.header-content p {\n  color: #bdc3c7;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.3;\n}\n\n.header-actions {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-shrink: 0;\n}\n\n.refresh-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: linear-gradient(135deg, #3498db, #2980b9);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.refresh-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #2980b9, #1abc9c);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(52, 152, 219, 0.4);\n}\n\n.refresh-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.refresh-btn .spinning {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.add-report-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 20px;\n  background: linear-gradient(135deg, #8e44ad, #7d3c98);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(142, 68, 173, 0.2);\n}\n\n.add-report-btn:hover {\n  background: linear-gradient(135deg, #7d3c98, #6c3483);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(142, 68, 173, 0.3);\n}\n\n.filters-section {\n  display: flex;\n  gap: 16px;\n  margin-bottom: 24px;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.search-box {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  background: #2c3e50;\n  padding: 12px 16px;\n  border-radius: 8px;\n  border: 1px solid #3a526b;\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-box svg {\n  color: #7f8c8d;\n  flex-shrink: 0;\n}\n\n.search-box input {\n  background: transparent;\n  border: none;\n  color: #ecf0f1;\n  font-size: 14px;\n  flex: 1;\n  outline: none;\n}\n\n.search-box input::placeholder {\n  color: #7f8c8d;\n}\n\n.filter-controls {\n  display: flex;\n  gap: 12px;\n}\n\n.filter-controls select {\n  background: #2c3e50;\n  border: 1px solid #3a526b;\n  color: #ecf0f1;\n  padding: 10px 12px;\n  border-radius: 6px;\n  font-size: 14px;\n  cursor: pointer;\n  min-width: 150px;\n}\n\n.filter-controls select:focus {\n  outline: none;\n  border-color: #8e44ad;\n}\n\n.reports-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  gap: 24px;\n}\n\n.report-card {\n  background: linear-gradient(135deg, #2c3e50, #34495e);\n  border: 1px solid #3a526b;\n  border-radius: 12px;\n  padding: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.report-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);\n  border-color: #8e44ad;\n}\n\n.report-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 16px;\n}\n\n.report-info h3 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.report-title {\n  color: #bdc3c7;\n  font-size: 14px;\n  line-height: 1.4;\n  margin: 0;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.report-type {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  background: rgba(142, 68, 173, 0.2);\n  color: #8e44ad;\n  padding: 6px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.report-body {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.status-priority-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 12px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 6px;\n}\n\n.status-info, .priority-info {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.status-text, .priority-text {\n  color: #ecf0f1;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.status-pending { color: #f39c12; }\n.status-approved { color: #27ae60; }\n.status-completed { color: #2ecc71; }\n.status-rejected { color: #e74c3c; }\n\n.priority-urgent { color: #e74c3c; }\n.priority-high { color: #e67e22; }\n.priority-medium { color: #f39c12; }\n.priority-low { color: #95a5a6; }\n\n.report-details {\n  border-top: 1px solid #3a526b;\n  padding-top: 12px;\n}\n\n.content-preview {\n  color: #bdc3c7;\n  font-size: 13px;\n  line-height: 1.4;\n  margin: 0 0 8px 0;\n  font-style: italic;\n}\n\n.created-date {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: #7f8c8d;\n  font-size: 12px;\n  margin: 0;\n}\n\n.loading-state, .empty-state {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 48px 24px;\n  color: #bdc3c7;\n}\n\n.empty-state svg {\n  color: #7f8c8d;\n  margin-bottom: 16px;\n}\n\n.empty-state h3 {\n  color: #ecf0f1;\n  margin: 16px 0 8px 0;\n  font-size: 20px;\n}\n\n.error-message {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 8px;\n  color: #e74c3c;\n  padding: 16px;\n  margin-bottom: 24px;\n  text-align: center;\n}\n\n/* Form Styles */\n.report-form-container {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.form-header {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.form-header h1 {\n  color: #ecf0f1;\n  font-size: 24px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.back-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 16px;\n  background: transparent;\n  border: 1px solid #3a526b;\n  color: #bdc3c7;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.back-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n  border-color: #4a6fa5;\n  color: #ecf0f1;\n}\n\n.report-creation-form {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 30px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  max-width: 1000px;\n}\n\n.form-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 20px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.form-group.full-width {\n  grid-column: 1 / -1;\n}\n\n.form-group label {\n  color: #ecf0f1;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid #3a526b;\n  border-radius: 6px;\n  padding: 12px;\n  color: #ecf0f1 !important;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.form-group input::placeholder,\n.form-group textarea::placeholder {\n  color: #7f8c8d !important;\n  opacity: 1;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  outline: none;\n  border-color: #8e44ad;\n  background: rgba(255, 255, 255, 0.15);\n  box-shadow: 0 0 0 3px rgba(142, 68, 173, 0.1);\n}\n\n.form-group input.error,\n.form-group textarea.error {\n  border-color: #e74c3c;\n  background: rgba(231, 76, 60, 0.1);\n}\n\n.form-group textarea {\n  resize: vertical;\n  min-height: 120px;\n}\n\n.error-text {\n  color: #e74c3c;\n  font-size: 12px;\n  margin-top: 4px;\n}\n\n.warranty-notice {\n  display: flex;\n  align-items: flex-start;\n  gap: 16px;\n  background: rgba(142, 68, 173, 0.1);\n  border: 1px solid #8e44ad;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 20px;\n}\n\n.warranty-notice svg {\n  color: #8e44ad;\n  flex-shrink: 0;\n  margin-top: 2px;\n}\n\n.warranty-notice h4 {\n  color: #ecf0f1;\n  margin: 0 0 8px 0;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.warranty-notice p {\n  color: #bdc3c7;\n  margin: 0;\n  font-size: 14px;\n  line-height: 1.4;\n}\n\n.submit-error {\n  background: rgba(231, 76, 60, 0.1);\n  border: 1px solid #e74c3c;\n  border-radius: 6px;\n  color: #e74c3c;\n  padding: 12px;\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.form-actions {\n  display: flex;\n  gap: 15px;\n  justify-content: flex-end;\n  margin-top: 30px;\n  padding-top: 20px;\n  border-top: 1px solid #3a526b;\n}\n\n.cancel-btn {\n  background: transparent;\n  border: 1px solid #7f8c8d;\n  color: #bdc3c7;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.cancel-btn:hover:not(:disabled) {\n  background: rgba(127, 140, 141, 0.1);\n  border-color: #95a5a6;\n  color: #ecf0f1;\n}\n\n.submit-btn {\n  background: linear-gradient(135deg, #8e44ad, #7d3c98);\n  border: none;\n  color: white;\n  padding: 12px 24px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  border: 1px solid rgba(142, 68, 173, 0.2);\n}\n\n.submit-btn:hover:not(:disabled) {\n  background: linear-gradient(135deg, #7d3c98, #6c3483);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(142, 68, 173, 0.3);\n}\n\n.submit-btn:disabled,\n.cancel-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Detail View Styles */\n.report-detail {\n  background: #2c3e50;\n  min-height: 100vh;\n  padding: 20px;\n}\n\n.detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.detail-actions {\n  display: flex;\n  gap: 12px;\n}\n\n.detail-actions button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 10px 16px;\n  background: linear-gradient(135deg, #8e44ad, #7d3c98);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.detail-actions button:hover {\n  background: linear-gradient(135deg, #7d3c98, #6c3483);\n  transform: translateY(-1px);\n}\n\n.report-info-panel {\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n  overflow: hidden;\n}\n\n.panel-header {\n  background: linear-gradient(135deg, #34495e, #2c3e50);\n  padding: 24px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.report-display {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.report-display h1 {\n  color: #ecf0f1;\n  font-size: 28px;\n  font-weight: 700;\n  margin: 0;\n  flex: 1;\n}\n\n.report-display svg {\n  color: #8e44ad;\n}\n\n.status-priority-badges {\n  display: flex;\n  gap: 12px;\n}\n\n.status-badge, .priority-badge {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  border-radius: 20px;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.status-badge {\n  background: rgba(52, 152, 219, 0.2);\n  color: #3498db;\n  border: 1px solid #3498db;\n}\n\n.priority-badge {\n  background: rgba(142, 68, 173, 0.2);\n  color: #8e44ad;\n  border: 1px solid #8e44ad;\n}\n\n.detail-grid {\n  display: grid;\n  gap: 32px;\n  padding: 24px;\n}\n\n.detail-section {\n  background: rgba(255, 255, 255, 0.05);\n  padding: 24px;\n  border-radius: 12px;\n  border: 1px solid #3a526b;\n}\n\n.detail-section h3 {\n  color: #ecf0f1;\n  margin: 0 0 16px 0;\n  font-size: 20px;\n  font-weight: 600;\n  padding-bottom: 12px;\n  border-bottom: 1px solid #3a526b;\n}\n\n.info-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 16px;\n}\n\n.info-grid > div {\n  color: #bdc3c7;\n  font-size: 14px;\n}\n\n.info-grid strong {\n  color: #ecf0f1;\n  font-weight: 600;\n}\n\n.report-title-display {\n  color: #ecf0f1;\n  font-size: 24px;\n  font-weight: 600;\n  margin: 0;\n  line-height: 1.3;\n}\n\n.report-content {\n  color: #bdc3c7;\n  line-height: 1.6;\n  font-size: 14px;\n}\n\n.report-content p {\n  margin: 0 0 16px 0;\n}\n\n.report-content p:last-child {\n  margin-bottom: 0;\n}\n\n.linked-records {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.linked-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px;\n  background: rgba(52, 152, 219, 0.1);\n  border: 1px solid #3498db;\n  border-radius: 8px;\n  color: #3498db;\n}\n\n.no-links {\n  color: #7f8c8d;\n  font-style: italic;\n  margin: 0;\n}\n\n/* Print Styles */\n@media print {\n  .detail-header {\n    display: none;\n  }\n  \n  .report-detail {\n    background: white;\n    color: black;\n  }\n  \n  .report-info-panel {\n    background: white;\n    border: 1px solid #000;\n  }\n  \n  .panel-header {\n    background: #f8f9fa;\n  }\n  \n  .detail-section {\n    background: white;\n    border: 1px solid #ddd;\n  }\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .reports-list {\n    padding: 16px;\n  }\n\n  .reports-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .header-actions {\n    width: 100%;\n    justify-content: space-between;\n  }\n\n  .filters-section {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .search-box {\n    min-width: auto;\n  }\n\n  .filter-controls {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .filter-controls select {\n    width: 100%;\n  }\n\n  .reports-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .form-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .info-grid {\n    grid-template-columns: 1fr;\n  }\n\n  .detail-header {\n    flex-direction: column;\n    gap: 16px;\n    align-items: flex-start;\n  }\n\n  .detail-actions {\n    width: 100%;\n  }\n\n  .report-display {\n    flex-direction: column;\n    gap: 12px;\n    align-items: flex-start;\n  }\n\n  .status-priority-badges {\n    flex-direction: column;\n    gap: 8px;\n    width: 100%;\n  }\n\n  .status-priority-row {\n    flex-direction: column;\n    gap: 8px;\n    align-items: flex-start;\n  }\n}","size_bytes":13678},"client/src/components/Reports/Reports.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  FileCheck, \n  Plus, \n  Search, \n  Edit2, \n  Eye, \n  RotateCcw,\n  FileText,\n  Calendar,\n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Shield\n} from 'lucide-react';\nimport './Reports.css';\n\nconst Reports = () => {\n  const [reports, setReports] = useState([]);\n  const [cases, setCases] = useState([]);\n  const [obEntries, setObEntries] = useState([]);\n  const [evidence, setEvidence] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [currentView, setCurrentView] = useState('list'); // 'list', 'create', 'detail', 'edit'\n  const [selectedReport, setSelectedReport] = useState(null);\n\n  const reportTypes = ['Warranty', 'Incident', 'Evidence', 'Case Summary', 'Investigation', 'Other'];\n  const reportStatuses = ['Pending', 'Approved', 'Completed', 'Rejected'];\n  const priorities = ['Low', 'Medium', 'High', 'Urgent'];\n\n  const fetchReports = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/reports');\n      if (response.ok) {\n        const data = await response.json();\n        setReports(data.reports || []);\n        setError('');\n      } else {\n        setError('Failed to fetch reports');\n      }\n    } catch (error) {\n      setError('Network error. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchRelatedData = async () => {\n    try {\n      const [casesRes, obRes, evidenceRes] = await Promise.all([\n        fetch('/api/cases'),\n        fetch('/api/ob-entries'),\n        fetch('/api/evidence')\n      ]);\n\n      if (casesRes.ok) {\n        const casesData = await casesRes.json();\n        setCases(casesData.cases || []);\n      }\n\n      if (obRes.ok) {\n        const obData = await obRes.json();\n        setObEntries(obData.obEntries || []);\n      }\n\n      if (evidenceRes.ok) {\n        const evidenceData = await evidenceRes.json();\n        setEvidence(evidenceData.evidence || []);\n      }\n    } catch (error) {\n      console.error('Failed to fetch related data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchReports();\n    fetchRelatedData();\n  }, []);\n\n  const filteredReports = reports.filter(report => {\n    const matchesSearch = \n      report.reportNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      report.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      report.content?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = !typeFilter || report.type === typeFilter;\n    const matchesStatus = !statusFilter || report.status === statusFilter;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  const navigateToView = (view, report = null) => {\n    setCurrentView(view);\n    setSelectedReport(report);\n  };\n\n  const goBack = () => {\n    if (currentView === 'detail') {\n      setCurrentView('list');\n    } else if (currentView === 'edit') {\n      setCurrentView('detail');\n    } else {\n      setCurrentView('list');\n    }\n    if (currentView === 'create') {\n      setSelectedReport(null);\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status?.toLowerCase()) {\n      case 'pending': return <Clock size={16} className=\"status-pending\" />;\n      case 'approved': return <CheckCircle size={16} className=\"status-approved\" />;\n      case 'completed': return <CheckCircle size={16} className=\"status-completed\" />;\n      case 'rejected': return <XCircle size={16} className=\"status-rejected\" />;\n      default: return <Clock size={16} />;\n    }\n  };\n\n  const getPriorityIcon = (priority) => {\n    switch (priority?.toLowerCase()) {\n      case 'urgent': return <AlertCircle size={16} className=\"priority-urgent\" />;\n      case 'high': return <AlertCircle size={16} className=\"priority-high\" />;\n      case 'medium': return <AlertCircle size={16} className=\"priority-medium\" />;\n      case 'low': return <AlertCircle size={16} className=\"priority-low\" />;\n      default: return <AlertCircle size={16} />;\n    }\n  };\n\n  const ReportsList = () => (\n    <div className=\"reports-list\">\n      <div className=\"reports-header\">\n        <div className=\"header-content\">\n          <FileCheck className=\"header-icon\" />\n          <div>\n            <h1>Generate Reports</h1>\n            <p>Create and manage warranty and investigation reports</p>\n          </div>\n        </div>\n        <div className=\"header-actions\">\n          <button \n            className=\"refresh-btn\" \n            onClick={fetchReports}\n            disabled={isLoading}\n            title=\"Refresh reports list\"\n          >\n            <RotateCcw size={18} className={isLoading ? 'spinning' : ''} />\n            Refresh\n          </button>\n          <button className=\"add-report-btn\" onClick={() => navigateToView('create')}>\n            <Plus size={18} />\n            New Report\n          </button>\n        </div>\n      </div>\n\n      <div className=\"filters-section\">\n        <div className=\"search-box\">\n          <Search size={20} />\n          <input\n            type=\"text\"\n            placeholder=\"Search reports...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        <div className=\"filter-controls\">\n          <select value={typeFilter} onChange={(e) => setTypeFilter(e.target.value)}>\n            <option value=\"\">All Types</option>\n            {reportTypes.map(type => (\n              <option key={type} value={type}>{type}</option>\n            ))}\n          </select>\n          <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>\n            <option value=\"\">All Status</option>\n            {reportStatuses.map(status => (\n              <option key={status} value={status}>{status}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">{error}</div>\n      )}\n\n      <div className=\"reports-grid\">\n        {isLoading ? (\n          <div className=\"loading-state\">Loading reports...</div>\n        ) : filteredReports.length === 0 ? (\n          <div className=\"empty-state\">\n            <FileCheck size={48} />\n            <h3>No reports found</h3>\n            <p>Create a new report or adjust your search filters</p>\n          </div>\n        ) : (\n          filteredReports.map((report) => (\n            <div key={report.id} className=\"report-card\" onClick={() => navigateToView('detail', report)}>\n              <div className=\"report-header\">\n                <div className=\"report-info\">\n                  <h3>{report.reportNumber}</h3>\n                  <p className=\"report-title\">{report.title}</p>\n                </div>\n                <div className=\"report-type\">\n                  <FileText size={16} />\n                  <span>{report.type}</span>\n                </div>\n              </div>\n              <div className=\"report-body\">\n                <div className=\"status-priority-row\">\n                  <div className=\"status-info\">\n                    {getStatusIcon(report.status)}\n                    <span className=\"status-text\">{report.status}</span>\n                  </div>\n                  <div className=\"priority-info\">\n                    {getPriorityIcon(report.priority)}\n                    <span className=\"priority-text\">{report.priority}</span>\n                  </div>\n                </div>\n                <div className=\"report-details\">\n                  <p className=\"content-preview\">{report.content?.substring(0, 100)}...</p>\n                  <p className=\"created-date\">\n                    <Calendar size={14} />\n                    Created: {new Date(report.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n\n  const CreateReportForm = () => {\n    const [formData, setFormData] = useState({\n      type: 'Warranty',\n      title: '',\n      content: '',\n      status: 'Pending',\n      priority: 'Medium',\n      caseId: '',\n      obId: '',\n      evidenceId: ''\n    });\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n\n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setFormData(prev => ({ ...prev, [name]: value }));\n      if (errors[name]) {\n        setErrors(prev => ({ ...prev, [name]: '' }));\n      }\n    };\n\n    const validateForm = () => {\n      const newErrors = {};\n      if (!formData.title.trim()) newErrors.title = 'Title is required';\n      if (!formData.content.trim()) newErrors.content = 'Content is required';\n      \n      setErrors(newErrors);\n      return Object.keys(newErrors).length === 0;\n    };\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      if (!validateForm()) return;\n\n      setIsSubmitting(true);\n      try {\n        const response = await fetch('/api/reports', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        });\n\n        if (response.ok) {\n          await fetchReports();\n          goBack();\n        } else {\n          const errorData = await response.json();\n          setErrors({ submit: errorData.message || 'Failed to create report' });\n        }\n      } catch (error) {\n        setErrors({ submit: 'Network error. Please try again.' });\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    return (\n      <div className=\"report-form-container\">\n        <div className=\"form-header\">\n          <button className=\"back-btn\" onClick={goBack}>\n            <FileCheck size={20} />\n            Back to Reports\n          </button>\n          <h1>Create New Report</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"report-creation-form\">\n          <div className=\"form-grid\">\n            <div className=\"form-group\">\n              <label htmlFor=\"type\">Report Type *</label>\n              <select\n                id=\"type\"\n                name=\"type\"\n                value={formData.type}\n                onChange={handleInputChange}\n              >\n                {reportTypes.map(type => (\n                  <option key={type} value={type}>{type}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"priority\">Priority *</label>\n              <select\n                id=\"priority\"\n                name=\"priority\"\n                value={formData.priority}\n                onChange={handleInputChange}\n              >\n                {priorities.map(priority => (\n                  <option key={priority} value={priority}>{priority}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"status\">Status *</label>\n              <select\n                id=\"status\"\n                name=\"status\"\n                value={formData.status}\n                onChange={handleInputChange}\n              >\n                {reportStatuses.map(status => (\n                  <option key={status} value={status}>{status}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"caseId\">Linked Case (Optional)</label>\n              <select\n                id=\"caseId\"\n                name=\"caseId\"\n                value={formData.caseId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select a case...</option>\n                {cases.map(caseItem => (\n                  <option key={caseItem.id} value={caseItem.id}>\n                    {caseItem.caseNumber} - {caseItem.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"obId\">Linked OB Entry (Optional)</label>\n              <select\n                id=\"obId\"\n                name=\"obId\"\n                value={formData.obId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select an OB entry...</option>\n                {obEntries.map(ob => (\n                  <option key={ob.id} value={ob.id}>\n                    {ob.obNumber} - {ob.type}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"evidenceId\">Linked Evidence (Optional)</label>\n              <select\n                id=\"evidenceId\"\n                name=\"evidenceId\"\n                value={formData.evidenceId}\n                onChange={handleInputChange}\n              >\n                <option value=\"\">Select evidence...</option>\n                {evidence.map(evidenceItem => (\n                  <option key={evidenceItem.id} value={evidenceItem.id}>\n                    {evidenceItem.evidenceNumber} - {evidenceItem.type}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"title\">Report Title *</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={formData.title}\n              onChange={handleInputChange}\n              placeholder=\"Enter report title\"\n              className={errors.title ? 'error' : ''}\n            />\n            {errors.title && <span className=\"error-text\">{errors.title}</span>}\n          </div>\n\n          <div className=\"form-group full-width\">\n            <label htmlFor=\"content\">Report Content *</label>\n            <textarea\n              id=\"content\"\n              name=\"content\"\n              value={formData.content}\n              onChange={handleInputChange}\n              placeholder=\"Enter detailed report content...\"\n              rows=\"10\"\n              className={errors.content ? 'error' : ''}\n            />\n            {errors.content && <span className=\"error-text\">{errors.content}</span>}\n          </div>\n\n          {formData.type === 'Warranty' && (\n            <div className=\"warranty-notice\">\n              <Shield size={20} />\n              <div>\n                <h4>Warranty Report Notice</h4>\n                <p>This report will be submitted for warranty review. Please ensure all information is accurate and complete.</p>\n              </div>\n            </div>\n          )}\n\n          {errors.submit && (\n            <div className=\"submit-error\">\n              {errors.submit}\n            </div>\n          )}\n\n          <div className=\"form-actions\">\n            <button \n              type=\"button\" \n              className=\"cancel-btn\" \n              onClick={goBack}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </button>\n            <button \n              type=\"submit\" \n              className=\"submit-btn\" \n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Creating...' : 'Create Report'}\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  };\n\n  const ReportDetail = () => {\n    const linkedCase = cases.find(c => c.id === selectedReport?.caseId);\n    const linkedOB = obEntries.find(ob => ob.id === selectedReport?.obId);\n    const linkedEvidence = evidence.find(e => e.id === selectedReport?.evidenceId);\n\n    return (\n      <div className=\"report-detail\">\n        <div className=\"detail-header\">\n          <button className=\"back-btn\" onClick={goBack}>\n            <FileCheck size={20} />\n            Back to Reports\n          </button>\n          <div className=\"detail-actions\">\n            <button onClick={() => window.print()}>\n              <FileText size={16} />\n              Print Report\n            </button>\n            <button onClick={() => navigateToView('edit', selectedReport)}>\n              <Edit2 size={16} />\n              Edit Report\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"report-info-panel\">\n          <div className=\"panel-header\">\n            <div className=\"report-display\">\n              <FileCheck size={32} />\n              <h1>{selectedReport?.reportNumber}</h1>\n              <div className=\"status-priority-badges\">\n                <div className=\"status-badge\">\n                  {getStatusIcon(selectedReport?.status)}\n                  {selectedReport?.status}\n                </div>\n                <div className=\"priority-badge\">\n                  {getPriorityIcon(selectedReport?.priority)}\n                  {selectedReport?.priority}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"detail-grid\">\n            <div className=\"detail-section\">\n              <h3>Report Information</h3>\n              <div className=\"info-grid\">\n                <div><strong>Report Number:</strong> {selectedReport?.reportNumber}</div>\n                <div><strong>Type:</strong> {selectedReport?.type}</div>\n                <div><strong>Status:</strong> {selectedReport?.status}</div>\n                <div><strong>Priority:</strong> {selectedReport?.priority}</div>\n                <div><strong>Created:</strong> {new Date(selectedReport?.createdAt).toLocaleString()}</div>\n                <div><strong>Updated:</strong> {new Date(selectedReport?.updatedAt).toLocaleString()}</div>\n              </div>\n            </div>\n\n            <div className=\"detail-section\">\n              <h3>Report Title</h3>\n              <h2 className=\"report-title-display\">{selectedReport?.title}</h2>\n            </div>\n\n            <div className=\"detail-section\">\n              <h3>Report Content</h3>\n              <div className=\"report-content\">\n                {selectedReport?.content?.split('\\n').map((paragraph, index) => (\n                  <p key={index}>{paragraph}</p>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"detail-section\">\n              <h3>Linked Records</h3>\n              <div className=\"linked-records\">\n                {linkedCase && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>Case: {linkedCase.caseNumber} - {linkedCase.title}</span>\n                  </div>\n                )}\n                {linkedOB && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>OB: {linkedOB.obNumber} - {linkedOB.type}</span>\n                  </div>\n                )}\n                {linkedEvidence && (\n                  <div className=\"linked-item\">\n                    <FileText size={16} />\n                    <span>Evidence: {linkedEvidence.evidenceNumber} - {linkedEvidence.type}</span>\n                  </div>\n                )}\n                {!linkedCase && !linkedOB && !linkedEvidence && (\n                  <p className=\"no-links\">No linked records found.</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  switch (currentView) {\n    case 'detail':\n      return <ReportDetail />;\n    case 'create':\n      return <CreateReportForm />;\n    default:\n      return <ReportsList />;\n  }\n};\n\nexport default Reports;","size_bytes":19537},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"admin\" or \"user\"\n  badgeNumber: text(\"badge_number\"),\n  department: text(\"department\"),\n  position: text(\"position\"),\n  phone: text(\"phone\"),\n  profileImage: text(\"profile_image\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  lastLoginAt: timestamp(\"last_login_at\"),\n});\n\n// Cases table\nexport const cases = pgTable(\"cases\", {\n  id: serial(\"id\").primaryKey(),\n  caseNumber: text(\"case_number\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"open\"), // \"open\", \"in_progress\", \"closed\"\n  priority: text(\"priority\").notNull().default(\"medium\"), // \"low\", \"medium\", \"high\"\n  assignedOfficerId: integer(\"assigned_officer_id\").references(() => users.id),\n  createdById: integer(\"created_by_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Occurrence Book entries\nexport const obEntries = pgTable(\"ob_entries\", {\n  id: serial(\"id\").primaryKey(),\n  obNumber: text(\"ob_number\").notNull().unique(),\n  dateTime: timestamp(\"date_time\").notNull(),\n  type: text(\"type\").notNull(),\n  description: text(\"description\").notNull(),\n  reportedBy: text(\"reported_by\").notNull(),\n  recordingOfficerId: integer(\"recording_officer_id\").references(() => users.id),\n  location: text(\"location\"),\n  status: text(\"status\").notNull().default(\"recorded\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// License plates\nexport const licensePlates = pgTable(\"license_plates\", {\n  id: serial(\"id\").primaryKey(),\n  plateNumber: text(\"plate_number\").notNull().unique(),\n  ownerName: text(\"owner_name\").notNull(),\n  fatherName: text(\"father_name\"),\n  motherName: text(\"mother_name\"),\n  idNumber: text(\"id_number\"),\n  passportNumber: text(\"passport_number\"),\n  ownerImage: text(\"owner_image\"),\n  addedById: integer(\"added_by_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Password reset tokens\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Evidence log\nexport const evidence = pgTable(\"evidence\", {\n  id: serial(\"id\").primaryKey(),\n  evidenceNumber: text(\"evidence_number\").notNull().unique(),\n  caseId: integer(\"case_id\").references(() => cases.id),\n  obId: integer(\"ob_id\").references(() => obEntries.id),\n  type: text(\"type\").notNull(), // \"physical\", \"digital\", \"document\", \"photo\", \"video\"\n  description: text(\"description\").notNull(),\n  location: text(\"location\").notNull(),\n  chain_of_custody: text(\"chain_of_custody\"),\n  status: text(\"status\").notNull().default(\"collected\"), // \"collected\", \"analyzed\", \"stored\", \"disposed\"\n  collectedBy: integer(\"collected_by\").references(() => users.id),\n  collectedAt: timestamp(\"collected_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Police Vehicles\nexport const policeVehicles = pgTable(\"police_vehicles\", {\n  id: serial(\"id\").primaryKey(),\n  vehicleId: text(\"vehicle_id\").notNull().unique(),\n  licensePlate: text(\"license_plate\").notNull().unique(),\n  vehicleType: text(\"vehicle_type\").notNull(), // \"patrol\", \"motorcycle\", \"ambulance\", \"k9\", \"special\"\n  make: text(\"make\").notNull(),\n  model: text(\"model\").notNull(),\n  year: integer(\"year\").notNull(),\n  currentLocation: text(\"current_location\"), // JSON string of coordinates\n  assignedArea: text(\"assigned_area\"), // JSON string of patrol area coordinates\n  status: text(\"status\").notNull().default(\"available\"), // \"available\", \"on_patrol\", \"responding\", \"out_of_service\"\n  assignedOfficerId: integer(\"assigned_officer_id\").references(() => users.id),\n  lastUpdate: timestamp(\"last_update\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Geofiles\nexport const geofiles = pgTable(\"geofiles\", {\n  id: serial(\"id\").primaryKey(),\n  caseId: integer(\"case_id\").references(() => cases.id),\n  obId: integer(\"ob_id\").references(() => obEntries.id),\n  evidenceId: integer(\"evidence_id\").references(() => evidence.id),\n  filename: text(\"filename\").notNull(),\n  filepath: text(\"filepath\").notNull(),\n  fileType: text(\"file_type\").notNull(), // \"kml\", \"gpx\", \"shp\", \"geojson\"\n  coordinates: text(\"coordinates\"), // JSON string of coordinates\n  address: text(\"address\"),\n  description: text(\"description\"),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Reports\nexport const reports = pgTable(\"reports\", {\n  id: serial(\"id\").primaryKey(),\n  reportNumber: text(\"report_number\").notNull().unique(),\n  type: text(\"type\").notNull(), // \"warranty\", \"incident\", \"evidence\", \"case_summary\"\n  caseId: integer(\"case_id\").references(() => cases.id),\n  obId: integer(\"ob_id\").references(() => obEntries.id),\n  evidenceId: integer(\"evidence_id\").references(() => evidence.id),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  requestedBy: integer(\"requested_by\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"approved\", \"completed\", \"rejected\"\n  priority: text(\"priority\").notNull().default(\"medium\"), // \"low\", \"medium\", \"high\", \"urgent\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  role: true,\n  badgeNumber: true,\n  department: true,\n  position: true,\n  phone: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const registerSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  badgeNumber: true,\n  department: true,\n  position: true,\n  phone: true,\n}).extend({\n  confirmPassword: z.string().min(1, \"Confirm password is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const forgotPasswordSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n});\n\nexport const resetPasswordSchema = z.object({\n  token: z.string().min(1, \"Token is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Confirm password is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const updateProfileSchema = createInsertSchema(users).pick({\n  firstName: true,\n  lastName: true,\n  email: true,\n  badgeNumber: true,\n  department: true,\n  position: true,\n  phone: true,\n}).partial();\n\nexport const insertCaseSchema = createInsertSchema(cases).pick({\n  title: true,\n  description: true,\n  status: true,\n  priority: true,\n});\n\nexport const insertOBSchema = createInsertSchema(obEntries).pick({\n  type: true,\n  description: true,\n  reportedBy: true,\n  location: true,\n});\n\nexport const insertLicensePlateSchema = createInsertSchema(licensePlates).pick({\n  plateNumber: true,\n  ownerName: true,\n  fatherName: true,\n  motherName: true,\n  idNumber: true,\n  passportNumber: true,\n});\n\nexport const insertEvidenceSchema = createInsertSchema(evidence).pick({\n  type: true,\n  description: true,\n  location: true,\n  chain_of_custody: true,\n  status: true,\n  collectedAt: true,\n});\n\nexport const insertGeofileSchema = createInsertSchema(geofiles).pick({\n  filename: true,\n  filepath: true,\n  fileType: true,\n  coordinates: true,\n  address: true,\n  description: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).pick({\n  type: true,\n  title: true,\n  content: true,\n  status: true,\n  priority: true,\n});\n\nexport const insertPoliceVehicleSchema = createInsertSchema(policeVehicles).pick({\n  vehicleId: true,\n  licensePlate: true,\n  vehicleType: true,\n  make: true,\n  model: true,\n  year: true,\n  currentLocation: true,\n  assignedArea: true,\n  status: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type Case = typeof cases.$inferSelect;\nexport type OBEntry = typeof obEntries.$inferSelect;\nexport type Evidence = typeof evidence.$inferSelect;\nexport type Geofile = typeof geofiles.$inferSelect;\nexport type PoliceVehicle = typeof policeVehicles.$inferSelect;\nexport type Report = typeof reports.$inferSelect;\nexport type LicensePlate = typeof licensePlates.$inferSelect;","size_bytes":9636}}}